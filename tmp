'impish', 'impishly', 'implant', 'implanted', 'implants', 'implement', 'implicate', 'implicit', 'implied', 'implies', 'implode', 'imploded', 'implodes', 'imploding', 'implore', 'implored', 'implores', 'imploring', 'implosion', 'imply', 'implying', 'impolite', 'impolitic', 'important', 'imported', 'importer', 'importers', 'importing', 'imports', 'importune', 'impose', 'imposed', 'imposes', 'imposing', 'imposter', 'imposters', 'impostor', 'impostors', 'imposture', 'impotence', 'impotent', 'impound', 'impounded', 'impounds', 'imprecise', 'impress', 'impressed', 'impresses', 'imprint', 'imprinted', 'imprints', 'imprison', 'imprisons', 'impromptu', 'improper', 'improve', 'improved', 'improves', 'improving', 'improvise', 'imprudent', 'imps', 'impudence', 'impudent', 'impugn', 'impugned', 'impugning', 'impugns', 'impulse', 'impulsed', 'impulses', 'impulsing', 'impulsion', 'impulsive', 'impunity', 'impure', 'impurely', 'impurer', 'impurest', 'impurity', 'impute', 'imputed', 'imputes', 'imputing', 'imus', 'ina', 'inability', 'inaction', 'inactive', 'inamorata', 'inane', 'inanely', 'inaner', 'inanest', 'inanimate', 'inanities', 'inanity', 'inapt', 'inasmuch', 'inaudible', 'inaudibly', 'inaugural', 'inboard', 'inboards', 'inborn', 'inbound', 'inbox', 'inboxes', 'inbred', 'inbreed', 'inbreeds', 'inbuilt', 'inca', 'incapable', 'incarnate', 'incas', 'incense', 'incensed', 'incenses', 'incensing', 'incentive', 'inception', 'incessant', 'incest', 'inch', 'inched', 'inches', 'inching', 'inchoate', 'inchon', 'incidence', 'incident', 'incidents', 'incipient', 'incise', 'incised', 'incises', 'incising', 'incision', 'incisions', 'incisive', 'incisor', 'incisors', 'incite', 'incited', 'incites', 'inciting', 'inclement', 'incline', 'inclined', 'inclines', 'inclining', 'inclose', 'inclosed', 'incloses', 'inclosing', 'inclosure', 'include', 'included', 'includes', 'including', 'inclusion', 'inclusive', 'incognito', 'income', 'incomes', 'incoming', 'incorrect', 'increase', 'increased', 'increases', 'increment', 'incrust', 'incrusted', 'incrusts', 'incubate', 'incubated', 'incubates', 'incubator', 'incubi', 'incubus', 'incubuses', 'inculcate', 'inculpate', 'incumbent', 'incur', 'incurable', 'incurably', 'incurious', 'incurred', 'incurring', 'incurs', 'incursion', 'indebted', 'indecency', 'indecent', 'indeed', 'indelible', 'indelibly', 'indemnify', 'indemnity', 'indent', 'indented', 'indenting', 'indents', 'indenture', 'indexed', 'indexes', 'indexing', 'india', 'indian', 'indiana', 'indianan', 'indianans', 'indians', 'indicate', 'indicated', 'indicates', 'indicator', 'indices', 'indict', 'indicted', 'indicting', 'indicts', 'indies', 'indigence', 'indigent', 'indigents', 'indignant', 'indignity', 'indigo', 'indira', 'indirect', 'indochina', 'indolence', 'indolent', 'indonesia', 'indoor', 'indoors', 'indore', 'indorse', 'indorsed', 'indorses', 'indorsing', 'indra', 'induce', 'induced', 'induces', 'inducing', 'induct', 'inducted', 'inductee', 'inductees', 'inducting', 'induction', 'inductive', 'inducts', 'indue', 'indued', 'indues', 'induing', 'indulge', 'indulged', 'indulgent', 'indulges', 'indulging', 'indus', 'industry', 'indy', 'inebriate', 'inedible', 'ineffable', 'ineffably', 'inelastic', 'inelegant', 'inept', 'ineptly', 'ineptness', 'inequity', 'inert', 'inertia', 'inertial', 'inertly', 'inertness', 'ines', 'inexact', 'inexpert', 'inez', 'infamies', 'infamous', 'infamy', 'infancy', 'infant', 'infantile', 'infantry', 'infants', 'infatuate', 'infect', 'infected', 'infecting', 'infection', 'infects', 'infer', 'inference', 'inferior', 'inferiors', 'infernal', 'inferno', 'infernos', 'inferred', 'inferring', 'infers', 'infertile', 'infest', 'infested', 'infesting', 'infests', 'infidel', 'infidels', 'infield', 'infielder', 'infields', 'infinite', 'infinity', 'infirm', 'infirmary', 'infirmity', 'inflame', 'inflamed', 'inflames', 'inflaming', 'inflate', 'inflated', 'inflates', 'inflating', 'inflation', 'inflect', 'inflected', 'inflects', 'inflict', 'inflicted', 'inflicts', 'inflow', 'influence', 'influenza', 'influx', 'influxes', 'info', 'inform', 'informal', 'informant', 'informed', 'informer', 'informers', 'informing', 'informs', 'infrared', 'infringe', 'infringed', 'infringes', 'infuriate', 'infuse', 'infused', 'infuses', 'infusing', 'infusion', 'infusions', 'ing', 'inge', 'ingenious', 'ingenuity', 'ingenuous', 'ingest', 'ingested', 'ingesting', 'ingestion', 'ingests', 'inglewood', 'ingot', 'ingots', 'ingrain', 'ingrained', 'ingrains', 'ingram', 'ingrate', 'ingrates', 'ingres', 'ingress', 'ingresses', 'ingrid', 'ingrown', 'inhabit', 'inhabited', 'inhabits', 'inhalant', 'inhalants', 'inhalator', 'inhale', 'inhaled', 'inhaler', 'inhalers', 'inhales', 'inhaling', 'inhere', 'inhered', 'inherent', 'inheres', 'inhering', 'inherit', 'inherited', 'inheritor', 'inherits', 'inhibit', 'inhibited', 'inhibits', 'inhuman', 'inhumane', 'inhumanly', 'inimical', 'iniquity', 'initial', 'initialed', 'initially', 'initials', 'initiate', 'initiated', 'initiates', 'initiator', 'inject', 'injected', 'injecting', 'injection', 'injector', 'injectors', 'injects', 'injure', 'injured', 'injures', 'injuries', 'injuring', 'injurious', 'injury', 'injustice', 'ink', 'inkblot', 'inkblots', 'inked', 'inkier', 'inkiest', 'inkiness', 'inking', 'inkling', 'inklings', 'inks', 'inkwell', 'inkwells', 'inky', 'inlaid', 'inland', 'inlay', 'inlaying', 'inlays', 'inlet', 'inlets', 'inmate', 'inmates', 'inmost', 'inn', 'innards', 'innate', 'innately', 'innermost', 'inning', 'innings', 'innkeeper', 'innocence', 'innocent', 'innocents', 'innocuous', 'innovate', 'innovated', 'innovates', 'innovator', 'inns', 'innuendo', 'innuendos', 'inoculate', 'inonu', 'inorganic', 'inpatient', 'input', 'inputs', 'inputted', 'inputting', 'inquest', 'inquests', 'inquire', 'inquired', 'inquirer', 'inquirers', 'inquires', 'inquiries', 'inquiring', 'inquiry', 'inroad', 'inroads', 'ins', 'insane', 'insanely', 'insaner', 'insanest', 'insanity', 'inscribe', 'inscribed', 'inscribes', 'inseam', 'inseams', 'insect', 'insects', 'insecure', 'insensate', 'insert', 'inserted', 'inserting', 'insertion', 'inserts', 'inset', 'insets', 'insetted', 'insetting', 'inshore', 'inside', 'insider', 'insiders', 'insides', 'insidious', 'insight', 'insights', 'insigne', 'insignes', 'insignia', 'insignias', 'insincere', 'insinuate', 'insipid', 'insist', 'insisted', 'insistent', 'insisting', 'insists', 'insofar', 'insole', 'insolence', 'insolent', 'insoles', 'insoluble', 'insolvent', 'insomnia', 'insomniac', 'inspect', 'inspected', 'inspector', 'inspects', 'inspire', 'inspired', 'inspires', 'inspiring', 'instagram', 'instal', 'install', 'installed', 'installs', 'instals', 'instance', 'instanced', 'instances', 'instant', 'instantly', 'instants', 'instead', 'instep', 'insteps', 'instigate', 'instil', 'instill', 'instilled', 'instills', 'instils', 'instinct', 'instincts', 'institute', 'instruct', 'instructs', 'insular', 'insulate', 'insulated', 'insulates', 'insulator', 'insulin', 'insult', 'insulted', 'insulting', 'insults', 'insurance', 'insure', 'insured', 'insureds', 'insurer', 'insurers', 'insures', 'insurgent', 'insuring', 'intact', 'intagli', 'intaglio', 'intaglios', 'intake', 'intakes', 'integers', 'integral', 'integrals', 'integrate', 'integrity', 'intel', 'intellect', 'intelsat', 'intend', 'intended', 'intendeds', 'intending', 'intends', 'intense', 'intensely', 'intenser', 'intensest', 'intensify', 'intensity', 'intensive', 'intent', 'intention', 'intently', 'intents', 'inter', 'interact', 'interacts', 'interbred', 'intercede', 'intercept', 'intercom', 'intercoms', 'interdict', 'interest', 'interests', 'interfere', 'interim', 'interior', 'interiors', 'interject', 'interlace', 'interlard', 'interlink', 'interlock', 'interlude', 'interment', 'intern', 'internals', 'interne', 'interned', 'internee', 'internees', 'internes', 'internet', 'interning', 'internist', 'interns', 'interplay', 'interpol', 'interpose', 'interpret', 'interred', 'interring', 'interrupt', 'inters', 'intersect', 'interval', 'intervals', 'intervene', 'interview', 'interwove', 'intestate', 'intestine', 'intimacy', 'intimate', 'intimated', 'intimates', 'into', 'intone', 'intoned', 'intones', 'intoning', 'intranet', 'intranets', 'intrench', 'intrepid', 'intricacy', 'intricate', 'intrigue', 'intrigued', 'intrigues', 'intrinsic', 'introduce', 'intros', 'introvert', 'intrude', 'intruded', 'intruder', 'intruders', 'intrudes', 'intruding', 'intrusion', 'intrusive', 'intrust', 'intrusted', 'intrusts', 'intuit', 'intuited', 'intuiting', 'intuition', 'intuitive', 'intuits', 'inuit', 'inuits', 'inuktitut', 'inundate', 'inundated', 'inundates', 'inure', 'inured', 'inures', 'inuring', 'invade', 'invaded', 'invader', 'invaders', 'invades', 'invading', 'invalid', 'invalided', 'invalids', 'invar', 'invariant', 'invasion', 'invasions', 'invasive', 'invective', 'inveigh', 'inveighed', 'inveighs', 'inveigle', 'inveigled', 'inveigles', 'invent', 'invented', 'inventing', 'invention', 'inventive', 'inventor', 'inventors', 'inventory', 'invents', 'inverse', 'inversely', 'inverses', 'inversion', 'invert', 'inverted', 'inverting', 'inverts', 'invest', 'invested', 'investing', 'investor', 'investors', 'invests', 'invidious', 'inviolate', 'invisible', 'invisibly', 'invite', 'invited', 'invites', 'inviting', 'invoice', 'invoiced', 'invoices', 'invoicing', 'invoke', 'invoked', 'invokes', 'invoking', 'involve', 'involved', 'involves', 'involving', 'inward', 'inwardly', 'inwards', 'iodine', 'iodize', 'iodized', 'iodizes', 'iodizing', 'ion', 'ionesco', 'ionian', 'ionic', 'ionics', 'ionize', 'ionized', 'ionizer', 'ionizers', 'ionizes', 'ionizing', 'ions', 'iota', 'iotas', 'iowa', 'iowan', 'iowans', 'iowas', 'ipad', 'ipecac', 'ipecacs', 'iphigenia', 'iphone', 'ipod', 'iqaluit', 'iqbal', 'iquitos', 'ira', 'iran', 'iranian', 'iranians', 'iraq', 'iraqi', 'iraqis', 'irascible', 'irate', 'irately', 'irateness', 'ire', 'ireland', 'irene', 'iridium', 'iris', 'irises', 'irish', 'irisher', 'irishman', 'irishmen', 'irk', 'irked', 'irking', 'irks', 'irksome', 'irkutsk', 'irma', 'iron', 'ironclad', 'ironclads', 'ironed', 'ironic', 'ironical', 'ironies', 'ironing', 'irons', 'ironware', 'ironwork', 'irony', 'iroquoian', 'iroquois', 'irradiate', 'irrawaddy', 'irregular', 'irrigate', 'irrigated', 'irrigates', 'irritable', 'irritably', 'irritant', 'irritants', 'irritate', 'irritated', 'irritates', 'irruption', 'irtish', 'irvin', 'irving', 'irwin', 'isaac', 'isabel', 'isabella', 'isabelle', 'isaiah', 'iscariot', 'isfahan', 'isherwood', 'ishim', 'ishmael', 'ishtar', 'isiah', 'isidro', 'isinglass', 'isis', 'islam', 'islamabad', 'islamic', 'islamism', 'islamist', 'islams', 'island', 'islander', 'islanders', 'islands', 'isle', 'isles', 'islet', 'islets', 'ism', 'ismael', 'ismail', 'isms', 'iso', 'isobar', 'isobars', 'isolate', 'isolated', 'isolates', 'isolating', 'isolation', 'isolde', 'isometric', 'isosceles', 'isotope', 'isotopes', 'isotopic', 'isotropic', 'ispell', 'israel', 'israeli', 'israelis', 'israelite', 'israels', 'issac', 'issachar', 'issuance', 'issue', 'issued', 'issues', 'issuing', 'istanbul', 'isthmi', 'isthmus', 'isthmuses', 'isuzu', 'itaipu', 'italian', 'italians', 'italic', 'italicize', 'italics', 'italy', 'itasca', 'itch', 'itched', 'itches', 'itchier', 'itchiest', 'itchiness', 'itching', 'itchy', 'item', 'itemize', 'itemized', 'itemizes', 'itemizing', 'items', 'iterate', 'iterated', 'iterates', 'iterating', 'iteration', 'iterative', 'iterator', 'iterators', 'ithaca', 'ithacan', 'itinerant', 'itinerary', 'ito', 'its', 'itself', 'itunes', 'iva', 'ivan', 'ivanhoe', 'ives', 'ivies', 'ivories', 'ivory', 'ivy', 'iyar', 'izaak', 'izanagi', 'izanami', 'izhevsk', 'izmir', 'izod', 'izvestia', 'jab', 'jabbed', 'jabber', 'jabbered', 'jabberer', 'jabberers', 'jabbering', 'jabbers', 'jabbing', 'jabot', 'jabots', 'jabs', 'jack', 'jackal', 'jackals', 'jackass', 'jackasses', 'jackboot', 'jackboots', 'jackdaw', 'jackdaws', 'jacked', 'jacket', 'jackets', 'jackie', 'jacking', 'jackknife', 'jacklyn', 'jackpot', 'jackpots', 'jacks', 'jackson', 'jacky', 'jaclyn', 'jacob', 'jacobean', 'jacobi', 'jacobin', 'jacobite', 'jacobs', 'jacobson', 'jacquard', 'jacquelyn', 'jacques', 'jacuzzi', 'jade', 'jaded', 'jades', 'jading', 'jag', 'jagged', 'jaggeder', 'jaggedest', 'jaggedly', 'jagger', 'jagiellon', 'jags', 'jaguar', 'jaguars', 'jahangir', 'jail', 'jailbreak', 'jailed', 'jailer', 'jailers', 'jailing', 'jailor', 'jailors', 'jails', 'jaime', 'jain', 'jainism', 'jaipur', 'jakarta', 'jake', 'jalopies', 'jalopy', 'jalousie', 'jalousies', 'jam', 'jamaal', 'jamaica', 'jamaican', 'jamaicans', 'jamal', 'jamar', 'jamb', 'jamboree', 'jamborees', 'jambs', 'jame', 'jamel', 'james', 'jamestown', 'jami', 'jamie', 'jammed', 'jamming', 'jams', 'jan', 'jana', 'janacek', 'jane', 'janell', 'janelle', 'janet', 'janette', 'jangle', 'jangled', 'jangles', 'jangling', 'janice', 'janie', 'janine', 'janis', 'janissary', 'janitor', 'janitors', 'janjaweed', 'janna', 'jannie', 'jansen', 'jansenist', 'januaries', 'january', 'janus', 'japan', 'japanese', 'japaneses', 'japanned', 'japanning', 'japans', 'jape', 'japed', 'japes', 'japing', 'japura', 'jar', 'jared', 'jargon', 'jarlsberg', 'jarred', 'jarrett', 'jarring', 'jarrod', 'jars', 'jarvis', 'jasmine', 'jasmines', 'jason', 'jasper', 'jataka', 'jaundice', 'jaundiced', 'jaundices', 'jaunt', 'jaunted', 'jauntier', 'jauntiest', 'jauntily', 'jaunting', 'jaunts', 'jaunty', 'java', 'javanese', 'javas', 'javelin', 'javelins', 'javier', 'jaw', 'jawbone', 'jawboned', 'jawbones', 'jawboning', 'jawed', 'jawing', 'jaws', 'jaxartes', 'jay', 'jayapura', 'jaycee', 'jaycees', 'jayne', 'jays', 'jayson', 'jaywalk', 'jaywalked', 'jaywalker', 'jaywalks', 'jazz', 'jazzed', 'jazzes', 'jazzier', 'jazziest', 'jazzing', 'jazzy', 'jealous', 'jealously', 'jealousy', 'jean', 'jeanette', 'jeanie', 'jeanine', 'jeanne', 'jeannette', 'jeannie', 'jeannine', 'jeans', 'jed', 'jedi', 'jeep', 'jeeps', 'jeer', 'jeered', 'jeering', 'jeeringly', 'jeers', 'jeeves', 'jeez', 'jeff', 'jefferey', 'jefferson', 'jeffery', 'jeffrey', 'jeffry', 'jehad', 'jehads', 'jehovah', 'jejune', 'jekyll', 'jell', 'jelled', 'jellied', 'jellies', 'jelling', 'jello', 'jells', 'jelly', 'jellybean', 'jellyfish', 'jellying', 'jenifer', 'jenkins', 'jenna', 'jenner', 'jennie', 'jennifer', 'jennings', 'jenny', 'jensen', 'jeopardy', 'jephthah', 'jerald', 'jeremiad', 'jeremiads', 'jeremiah', 'jeremiahs', 'jeremy', 'jeri', 'jericho', 'jerk', 'jerked', 'jerkier', 'jerkiest', 'jerkily', 'jerkin', 'jerking', 'jerkins', 'jerks', 'jerkwater', 'jerky', 'jermaine', 'jeroboam', 'jerold', 'jerome', 'jerri', 'jerrod', 'jerrold', 'jerry', 'jersey', 'jerseys', 'jerusalem', 'jess', 'jessamine', 'jesse', 'jessica', 'jessie', 'jest', 'jested', 'jester', 'jesters', 'jesting', 'jests', 'jesuit', 'jesuits', 'jesus', 'jet', 'jets', 'jetsam', 'jetted', 'jetties', 'jetting', 'jettison', 'jettisons', 'jetty', 'jetway', 'jew', 'jewel', 'jeweled', 'jeweler', 'jewelers', 'jeweling', 'jewell', 'jewelled', 'jeweller', 'jewellers', 'jewelling', 'jewelries', 'jewelry', 'jewels', 'jewish', 'jewry', 'jews', 'jezebel', 'jezebels', 'jfk', 'jib', 'jibbed', 'jibbing', 'jibe', 'jibed', 'jibes', 'jibing', 'jibs', 'jidda', 'jiffies', 'jiffy', 'jig', 'jigged', 'jigger', 'jiggered', 'jiggering', 'jiggers', 'jigging', 'jiggle', 'jiggled', 'jiggles', 'jiggling', 'jigs', 'jigsaw', 'jigsawed', 'jigsawing', 'jigsawn', 'jigsaws', 'jihad', 'jihadist', 'jihadists', 'jihads', 'jilin', 'jill', 'jillian', 'jilt', 'jilted', 'jilting', 'jilts', 'jim', 'jimenez', 'jimmie', 'jimmied', 'jimmies', 'jimmy', 'jimmying', 'jinan', 'jingle', 'jingled', 'jingles', 'jingling', 'jingoism', 'jingoist', 'jingoists', 'jinn', 'jinnah', 'jinni', 'jinnis', 'jinns', 'jinny', 'jinx', 'jinxed', 'jinxes', 'jinxing', 'jitney', 'jitneys', 'jitterbug', 'jitterier', 'jitters', 'jittery', 'jiujitsu', 'jivaro', 'jive', 'jived', 'jives', 'jiving', 'joan', 'joann', 'joanna', 'joanne', 'joaquin', 'job', 'jobbed', 'jobber', 'jobbers', 'jobbing', 'jobless', 'jobs', 'jocasta', 'jocelyn', 'jock', 'jockey', 'jockeyed', 'jockeying', 'jockeys', 'jocks', 'jockstrap', 'jocose', 'jocosely', 'jocosity', 'jocular', 'jocularly', 'jocund', 'jocundity', 'jocundly', 'jodhpurs', 'jodi', 'jodie', 'jody', 'joe', 'joel', 'joey', 'jog', 'jogged', 'jogger', 'joggers', 'jogging', 'joggle', 'joggled', 'joggles', 'joggling', 'jogs', 'johann', 'johanna', 'johannes', 'john', 'johnathan', 'johnathon', 'johnie', 'johnnie', 'johnny', 'johns', 'johnson', 'johnston', 'join', 'joined', 'joiner', 'joiners', 'joining', 'joins', 'joint', 'jointed', 'jointing', 'jointly', 'joints', 'joist', 'joists', 'joke', 'joked', 'joker', 'jokers', 'jokes', 'joking', 'jokingly', 'jolene', 'joliet', 'jollied', 'jollier', 'jollies', 'jolliest', 'jolliness', 'jollity', 'jolly', 'jollying', 'jolson', 'jolt', 'jolted', 'jolting', 'jolts', 'jon', 'jonah', 'jonahs', 'jonas', 'jonathan', 'jonathon', 'jones', 'joni', 'jonquil', 'jonquils', 'jonson', 'joplin', 'jordan', 'jordanian', 'jorge', 'jose', 'josef', 'josefa', 'josefina', 'joseph', 'josephine', 'josephs', 'josephson', 'josephus', 'josh', 'joshed', 'joshes', 'joshing', 'joshua', 'josiah', 'josie', 'jostle', 'jostled', 'jostles', 'jostling', 'josue', 'jot', 'jots', 'jotted', 'jotting', 'jottings', 'joule', 'joules', 'jounce', 'jounced', 'jounces', 'jouncing', 'journal', 'journals', 'journey', 'journeyed', 'journeys', 'joust', 'jousted', 'jousting', 'jousts', 'jove', 'jovial', 'joviality', 'jovially', 'jovian', 'jowl', 'jowls', 'joy', 'joyce', 'joycean', 'joyed', 'joyful', 'joyfuller', 'joyfully', 'joying', 'joyless', 'joyner', 'joyous', 'joyously', 'joyridden', 'joyride', 'joyrider', 'joyriders', 'joyrides', 'joyriding', 'joyrode', 'joys', 'joystick', 'joysticks', 'juan', 'juana', 'juanita', 'juarez', 'jubal', 'jubilant', 'jubilee', 'jubilees', 'judaeo', 'judah', 'judaic', 'judaism', 'judaisms', 'judas', 'judases', 'judd', 'jude', 'judea', 'judge', 'judged', 'judgement', 'judges', 'judgeship', 'judging', 'judgment', 'judgments', 'judicial', 'judiciary', 'judicious', 'judith', 'judo', 'judson', 'judy', 'jug', 'jugged', 'jugging', 'juggle', 'juggled', 'juggler', 'jugglers', 'juggles', 'juggling', 'jugs', 'jugular', 'jugulars', 'juice', 'juiced', 'juicer', 'juicers', 'juices', 'juicier', 'juiciest', 'juicily', 'juiciness', 'juicing', 'juicy', 'jujitsu', 'jujube', 'jujubes', 'jujutsu', 'jukebox', 'jukeboxes', 'julep', 'juleps', 'jules', 'julia', 'julian', 'juliana', 'julianne', 'julie', 'julienne', 'julies', 'juliet', 'juliette', 'julio', 'julius', 'julliard', 'july', 'jumble', 'jumbled', 'jumbles', 'jumbling', 'jumbo', 'jumbos', 'jump', 'jumped', 'jumper', 'jumpers', 'jumpier', 'jumpiest', 'jumpiness', 'jumping', 'jumps', 'jumpsuit', 'jumpsuits', 'jumpy', 'junco', 'juncoes', 'juncos', 'junction', 'junctions', 'juncture', 'junctures', 'june', 'juneau', 'junes', 'jung', 'jungfrau', 'jungian', 'jungle', 'jungles', 'junior', 'juniors', 'juniper', 'junipers', 'junk', 'junked', 'junker', 'junkers', 'junket', 'junketed', 'junketing', 'junkets', 'junkie', 'junkier', 'junkies', 'junkiest', 'junking', 'junks', 'junky', 'junkyard', 'junkyards', 'juno', 'junta', 'juntas', 'jupiter', 'jurassic', 'juridical', 'juries', 'jurist', 'jurists', 'juror', 'jurors', 'jurua', 'jury', 'just', 'juster', 'justest', 'justice', 'justices', 'justified', 'justifies', 'justify', 'justin', 'justine', 'justinian', 'justly', 'justness', 'jut', 'jute', 'jutland', 'juts', 'jutted', 'jutting', 'juvenal', 'juvenile', 'juveniles', 'juxtapose', 'kaaba', 'kabob', 'kabobs', 'kaboom', 'kabul', 'kafka', 'kaftan', 'kaftans', 'kagoshima', 'kahlua', 'kaifeng', 'kaiser', 'kaitlin', 'kalahari', 'kalamazoo', 'kalb', 'kale', 'kalevala', 'kali', 'kalmyk', 'kama', 'kamchatka', 'kamikaze', 'kamikazes', 'kampala', 'kampuchea', 'kandahar', 'kandinsky', 'kane', 'kangaroo', 'kangaroos', 'kannada', 'kano', 'kanpur', 'kansan', 'kansans', 'kansas', 'kant', 'kantian', 'kaohsiung', 'kaolin', 'kapok', 'kaposi', 'kaput', 'kara', 'karachi', 'karaganda', 'karakorum', 'karakul', 'karamazov', 'karaoke', 'karaokes', 'karat', 'karate', 'karats', 'kareem', 'karen', 'karenina', 'kari', 'karin', 'karina', 'karl', 'karla', 'karloff', 'karma', 'karo', 'karol', 'karroo', 'karyn', 'kasai', 'kasey', 'kashmir', 'kasparov', 'kate', 'katelyn', 'katharine', 'katherine', 'katheryn', 'kathiawar', 'kathie', 'kathleen', 'kathrine', 'kathryn', 'kathy', 'katie', 'katina', 'katmai', 'katmandu', 'katowice', 'katrina', 'katy', 'katydid', 'katydids', 'kauai', 'kaufman', 'kaunas', 'kaunda', 'kawabata', 'kawasaki', 'kay', 'kayak', 'kayaked', 'kayaking', 'kayaks', 'kaye', 'kayla', 'kazakh', 'kazan', 'kazoo', 'kazoos', 'keaton', 'keats', 'kebab', 'kebabs', 'kebob', 'kebobs', 'keck', 'keel', 'keeled', 'keeling', 'keels', 'keen', 'keenan', 'keened', 'keener', 'keenest', 'keening', 'keenly', 'keenness', 'keens', 'keep', 'keeper', 'keepers', 'keeping', 'keeps', 'keepsake', 'keepsakes', 'keewatin', 'keg', 'kegs', 'keillor', 'keisha', 'keith', 'keller', 'kelley', 'kelli', 'kellie', 'kellogg', 'kelly', 'kelp', 'kelsey', 'kelvin', 'kemerovo', 'kemp', 'kempis', 'ken', 'kendall', 'kendra', 'kendrick', 'kenmore', 'kennan', 'kenned', 'kennedy', 'kennel', 'kenneled', 'kenneling', 'kennelled', 'kennels', 'kenneth', 'kenning', 'kennith', 'kenny', 'kens', 'kent', 'kenton', 'kentucky', 'kenya', 'kenyan', 'kenyans', 'kenyatta', 'kenyon', 'keogh', 'keokuk', 'kepler', 'kept', 'keratin', 'kerchief', 'kerchiefs', 'kerensky', 'keri', 'kermit', 'kern', 'kernel', 'kernels', 'kerosene', 'kerosine', 'kerouac', 'kerr', 'kerri', 'kerry', 'kestrel', 'kestrels', 'ketch', 'ketches', 'ketchup', 'kettering', 'kettle', 'kettles', 'keven', 'kevin', 'kevlar', 'kevorkian', 'kewpie', 'key', 'keyboard', 'keyboards', 'keyed', 'keyhole', 'keyholes', 'keying', 'keynes', 'keynesian', 'keynote', 'keynoted', 'keynotes', 'keynoting', 'keypunch', 'keystone', 'keystones', 'keystroke', 'keyword', 'keywords', 'kfc', 'khaki', 'khakis', 'khalid', 'khan', 'khans', 'kharkov', 'khartoum', 'khayyam', 'khazar', 'khmer', 'khoikhoi', 'khoisan', 'khomeini', 'khorana', 'khufu', 'khulna', 'khwarizmi', 'khyber', 'khz', 'kibbutz', 'kibbutzim', 'kibitz', 'kibitzed', 'kibitzer', 'kibitzers', 'kibitzes', 'kibitzing', 'kibosh', 'kick', 'kickapoo', 'kickback', 'kickbacks', 'kicked', 'kicker', 'kickers', 'kickier', 'kickiest', 'kicking', 'kickoff', 'kickoffs', 'kicks', 'kickstand', 'kicky', 'kid', 'kidd', 'kidded', 'kidder', 'kidders', 'kiddie', 'kiddies', 'kidding', 'kiddo', 'kiddoes', 'kiddos', 'kiddy', 'kidnap', 'kidnaped', 'kidnaper', 'kidnapers', 'kidnaping', 'kidnapped', 'kidnapper', 'kidnaps', 'kidney', 'kidneys', 'kids', 'kiel', 'kielbasa', 'kielbasas', 'kielbasy', 'kieth', 'kiev', 'kigali', 'kikuyu', 'kilauea', 'kill', 'killdeer', 'killdeers', 'killed', 'killer', 'killers', 'killing', 'killings', 'killjoy', 'killjoys', 'kills', 'kiln', 'kilned', 'kilning', 'kilns', 'kilo', 'kilobyte', 'kilobytes', 'kilocycle', 'kilogram', 'kilograms', 'kilohertz', 'kilometer', 'kilos', 'kiloton', 'kilotons', 'kilowatt', 'kilowatts', 'kilroy', 'kilt', 'kilter', 'kilts', 'kim', 'kimberley', 'kimberly', 'kimono', 'kimonos', 'kin', 'kind', 'kinda', 'kinder', 'kindest', 'kindle', 'kindled', 'kindles', 'kindlier', 'kindliest', 'kindling', 'kindly', 'kindness', 'kindred', 'kinds', 'kinematic', 'kinetic', 'kinfolk', 'kinfolks', 'king', 'kingdom', 'kingdoms', 'kinglier', 'kingliest', 'kingly', 'kingpin', 'kingpins', 'kings', 'kingship', 'kingston', 'kingstown', 'kink', 'kinked', 'kinkier', 'kinkiest', 'kinking', 'kinks', 'kinky', 'kinney', 'kinsey', 'kinshasa', 'kinship', 'kinsman', 'kinsmen', 'kinswoman', 'kinswomen', 'kiosk', 'kiosks', 'kiowa', 'kip', 'kipling', 'kipper', 'kippered', 'kippering', 'kippers', 'kirby', 'kirchhoff', 'kirchner', 'kirghiz', 'kiribati', 'kirinyaga', 'kirk', 'kirkland', 'kirov', 'kirsten', 'kisangani', 'kishinev', 'kislev', 'kismet', 'kiss', 'kissed', 'kisser', 'kissers', 'kisses', 'kissing', 'kissinger', 'kit', 'kitchen', 'kitchener', 'kitchens', 'kite', 'kited', 'kites', 'kith', 'kiting', 'kits', 'kitsch', 'kitschy', 'kitten', 'kittenish', 'kittens', 'kitties', 'kitty', 'kiwanis', 'kiwi', 'kiwis', 'klan', 'klansman', 'klaus', 'klee', 'kleenex', 'kleenexes', 'klein', 'klimt', 'kline', 'klingon', 'klondike', 'klondikes', 'klutz', 'klutzes', 'klutzier', 'klutziest', 'klutzy', 'kmart', 'knack', 'knacker', 'knacks', 'knapp', 'knapsack', 'knapsacks', 'knave', 'knavery', 'knaves', 'knavish', 'knead', 'kneaded', 'kneader', 'kneaders', 'kneading', 'kneads', 'knee', 'kneecap', 'kneecaps', 'kneed', 'kneeing', 'kneel', 'kneeled', 'kneeling', 'kneels', 'knees', 'knell', 'knelled', 'knelling', 'knells', 'knelt', 'knesset', 'knew', 'knickers', 'knievel', 'knife', 'knifed', 'knifes', 'knifing', 'knight', 'knighted', 'knighting', 'knightly', 'knights', 'knit', 'knits', 'knitted', 'knitter', 'knitters', 'knitting', 'knitwear', 'knives', 'knob', 'knobbier', 'knobbiest', 'knobby', 'knobs', 'knock', 'knocked', 'knocker', 'knockers', 'knocking', 'knockout', 'knockouts', 'knocks', 'knoll', 'knolls', 'knopf', 'knossos', 'knot', 'knothole', 'knotholes', 'knots', 'knotted', 'knottier', 'knottiest', 'knotting', 'knotty', 'know', 'knowable', 'knowing', 'knowingly', 'knowings', 'knowledge', 'knowles', 'known', 'knows', 'knox', 'knoxville', 'knuckle', 'knuckled', 'knuckles', 'knuckling', 'knudsen', 'knuth', 'koala', 'koalas', 'kobe', 'koch', 'kochab', 'kodak', 'kodaly', 'kodiak', 'koestler', 'kohinoor', 'kohl', 'kohlrabi', 'koizumi', 'kojak', 'kolyma', 'kong', 'kongo', 'konrad', 'kook', 'kookie', 'kookier', 'kookiest', 'kookiness', 'kooks', 'kooky', 'koontz', 'kopeck', 'kopecks', 'kopek', 'kopeks', 'koppel', 'koran', 'korans', 'korea', 'korean', 'koreans', 'kornberg', 'kory', 'korzybski', 'kosciusko', 'kosher', 'koshered', 'koshering', 'koshers', 'kossuth', 'kosygin', 'koufax', 'kowloon', 'kowtow', 'kowtowed', 'kowtowing', 'kowtows', 'kraft', 'krakatoa', 'krakow', 'kramer', 'krasnodar', 'krebs', 'kremlin', 'kresge', 'kringle', 'kris', 'krishna', 'krista', 'kristen', 'kristi', 'kristie', 'kristin', 'kristina', 'kristine', 'kristy', 'kroc', 'kroger', 'krone', 'kronecker', 'kroner', 'kronor', 'kropotkin', 'kruger', 'krupp', 'krypton', 'krystal', 'kshatriya', 'kublai', 'kubrick', 'kudos', 'kudzu', 'kudzus', 'kuhn', 'kuibyshev', 'kulthumm', 'kumquat', 'kumquats', 'kunming', 'kurd', 'kurdish', 'kurdistan', 'kurile', 'kurosawa', 'kurt', 'kurtis', 'kusch', 'kutuzov', 'kuwait', 'kuwaiti', 'kuwaitis', 'kuznets', 'kuznetsk', 'kwakiutl', 'kwan', 'kwangju', 'kwanzaa', 'kwanzaas', 'kyle', 'kyoto', 'kyushu', 'lab', 'laban', 'label', 'labeled', 'labeling', 'labelled', 'labelling', 'labels', 'labia', 'labial', 'labials', 'labium', 'labor', 'labored', 'laborer', 'laborers', 'laboring', 'laborious', 'labors', 'labrador', 'labradors', 'labs', 'laburnum', 'laburnums', 'labyrinth', 'lace', 'laced', 'lacerate', 'lacerated', 'lacerates', 'laces', 'lacey', 'lachesis', 'lachrymal', 'lacier', 'laciest', 'lacing', 'lack', 'lacked', 'lackey', 'lackeys', 'lacking', 'lacks', 'laconic', 'lacquer', 'lacquered', 'lacquers', 'lacrimal', 'lacrosse', 'lactate', 'lactated', 'lactates', 'lactating', 'lactation', 'lactic', 'lactose', 'lacuna', 'lacunae', 'lacunas', 'lacy', 'lad', 'ladder', 'laddered', 'laddering', 'ladders', 'laddie', 'laddies', 'lade', 'laded', 'laden', 'lades', 'ladies', 'lading', 'ladings', 'ladle', 'ladled', 'ladles', 'ladling', 'ladoga', 'ladonna', 'lads', 'lady', 'ladybird', 'ladybirds', 'ladybug', 'ladybugs', 'ladylike', 'ladyship', 'lafayette', 'lafitte', 'lag', 'lager', 'lagers', 'laggard', 'laggards', 'lagged', 'lagging', 'lagniappe', 'lagoon', 'lagoons', 'lagos', 'lagrange', 'lags', 'lahore', 'laid', 'lain', 'lair', 'lairs', 'laity', 'laius', 'lajos', 'lake', 'lakeisha', 'lakes', 'lakewood', 'lakisha', 'lakota', 'lakshmi', 'lallygag', 'lallygags', 'lam', 'lama', 'lamar', 'lamarck', 'lamas', 'lamasery', 'lamaze', 'lamb', 'lambast', 'lambaste', 'lambasted', 'lambastes', 'lambasts', 'lambed', 'lambent', 'lambert', 'lambing', 'lambkin', 'lambkins', 'lambrusco', 'lambs', 'lambskin', 'lambskins', 'lame', 'lamebrain', 'lamed', 'lamely', 'lameness', 'lament', 'lamented', 'lamenting', 'laments', 'lamer', 'lames', 'lamest', 'laminate', 'laminated', 'laminates', 'laming', 'lammed', 'lamming', 'lamont', 'lamp', 'lampblack', 'lampoon', 'lampooned', 'lampoons', 'lamppost', 'lampposts', 'lamprey', 'lampreys', 'lamps', 'lampshade', 'lams', 'lana', 'lanai', 'lancaster', 'lance', 'lanced', 'lancelot', 'lancer', 'lancers', 'lances', 'lancet', 'lancets', 'lancing', 'land', 'landed', 'lander', 'landfall', 'landfalls', 'landfill', 'landfills', 'landing', 'landings', 'landlady', 'landline', 'landlines', 'landlord', 'landlords', 'landmark', 'landmarks', 'landmass', 'landon', 'landowner', 'landry', 'lands', 'landsat', 'landscape', 'landslid', 'landslide', 'landward', 'landwards', 'lane', 'lanes', 'lang', 'langland', 'langley', 'langmuir', 'language', 'languages', 'languid', 'languidly', 'languish', 'languor', 'languors', 'lank', 'lanka', 'lanker', 'lankest', 'lankier', 'lankiest', 'lankiness', 'lanky', 'lanny', 'lanolin', 'lansing', 'lantern', 'lanterns', 'lanyard', 'lanyards', 'lanzhou', 'lao', 'laocoon', 'laos', 'laotian', 'laotians', 'lap', 'lapel', 'lapels', 'lapidary', 'laplace', 'lapland', 'lapp', 'lapped', 'lapping', 'lapps', 'laps', 'lapse', 'lapsed', 'lapses', 'lapsing', 'laptop', 'laptops', 'lapwing', 'lapwings', 'lara', 'laramie', 'larboard', 'larboards', 'larcenies', 'larcenous', 'larceny', 'larch', 'larches', 'lard', 'larded', 'larder', 'larders', 'larding', 'lardner', 'lards', 'laredo', 'large', 'largely', 'largeness', 'larger', 'larges', 'largess', 'largesse', 'largest', 'largo', 'largos', 'lariat', 'lariats', 'lark', 'larked', 'larking', 'larks', 'larkspur', 'larkspurs', 'larousse', 'larry', 'lars', 'larsen', 'larson', 'larva', 'larvae', 'larval', 'larvas', 'larynges', 'larynx', 'larynxes', 'las', 'lasagna', 'lasagnas', 'lasagne', 'lasagnes', 'lascaux', 'laser', 'lasers', 'lash', 'lashed', 'lashes', 'lashing', 'lass', 'lassa', 'lassen', 'lasses', 'lassie', 'lassies', 'lassitude', 'lasso', 'lassoed', 'lassoes', 'lassoing', 'lassos', 'last', 'lasted', 'lasting', 'lastingly', 'lastly', 'lasts', 'latasha', 'latch', 'latched', 'latches', 'latching', 'late', 'latecomer', 'lately', 'latency', 'lateness', 'latent', 'later', 'lateral', 'lateraled', 'laterally', 'laterals', 'lateran', 'latest', 'latex', 'lath', 'lathe', 'lathed', 'lather', 'lathered', 'lathering', 'lathers', 'lathes', 'lathing', 'laths', 'latin', 'latina', 'latiner', 'latino', 'latinos', 'latins', 'latisha', 'latitude', 'latitudes', 'latonya', 'latoya', 'latrine', 'latrines', 'latrobe', 'lats', 'latte', 'latter', 'latterly', 'lattes', 'lattice', 'latticed', 'lattices', 'latvia', 'latvian', 'latvians', 'laud', 'laudable', 'laudably', 'laudanum', 'laudatory', 'lauded', 'lauder', 'lauding', 'lauds', 'laue', 'laugh', 'laughable', 'laughably', 'laughed', 'laughing', 'laughs', 'laughter', 'launch', 'launched', 'launcher', 'launchers', 'launches', 'launching', 'launder', 'laundered', 'launderer', 'launders', 'laundress', 'laundries', 'laundry', 'laura', 'laurasia', 'laureate', 'laureates', 'laurel', 'laurels', 'lauren', 'laurence', 'laurent', 'lauri', 'laurie', 'lava', 'laval', 'lavatory', 'lavender', 'lavenders', 'lavern', 'laverne', 'lavish', 'lavished', 'lavisher', 'lavishes', 'lavishest', 'lavishing', 'lavishly', 'lavoisier', 'lavonne', 'law', 'lawanda', 'lawful', 'lawfully', 'lawgiver', 'lawgivers', 'lawless', 'lawlessly', 'lawmaker', 'lawmakers', 'lawn', 'lawns', 'lawrence', 'laws', 'lawson', 'lawsuit', 'lawsuits', 'lawyer', 'lawyers', 'lax', 'laxative', 'laxatives', 'laxer', 'laxest', 'laxity', 'laxly', 'laxness', 'lay', 'layamon', 'layaway', 'layer', 'layered', 'layering', 'layers', 'layette', 'layettes', 'laying', 'layla', 'layman', 'laymen', 'layoff', 'layoffs', 'layout', 'layouts', 'layover', 'layovers', 'laypeople', 'layperson', 'lays', 'laywoman', 'laywomen', 'lazaro', 'lazarus', 'laze', 'lazed', 'lazes', 'lazied', 'lazier', 'lazies', 'laziest', 'lazily', 'laziness', 'lazing', 'lazy', 'lazybones', 'lazying', 'lbj', 'lea', 'leach', 'leached', 'leaches', 'leaching', 'lead', 'leadbelly', 'leaded', 'leaden', 'leader', 'leaders', 'leading', 'leads', 'leaf', 'leafed', 'leafier', 'leafiest', 'leafing', 'leafless', 'leaflet', 'leafleted', 'leaflets', 'leafs', 'leafy', 'league', 'leagued', 'leagues', 'leaguing', 'leah', 'leak', 'leakage', 'leakages', 'leaked', 'leakey', 'leakier', 'leakiest', 'leaking', 'leaks', 'leaky', 'lean', 'leander', 'leaned', 'leaner', 'leanest', 'leaning', 'leanings', 'leann', 'leanna', 'leanne', 'leanness', 'leans', 'leap', 'leaped', 'leapfrog', 'leapfrogs', 'leaping', 'leaps', 'leapt', 'lear', 'learjet', 'learn', 'learned', 'learner', 'learners', 'learning', 'learns', 'learnt', 'leary', 'leas', 'lease', 'leased', 'leasehold', 'leases', 'leash', 'leashed', 'leashes', 'leashing', 'leasing', 'least', 'leastwise', 'leather', 'leathers', 'leathery', 'leave', 'leaved', 'leaven', 'leavened', 'leavening', 'leavens', 'leaves', 'leaving', 'leavings', 'lebanese', 'lebanon', 'lebesgue', 'leblanc', 'lecher', 'lecherous', 'lechers', 'lechery', 'lecithin', 'lectern', 'lecterns', 'lecture', 'lectured', 'lecturer', 'lecturers', 'lectures', 'lecturing', 'led', 'leda', 'lederberg', 'ledge', 'ledger', 'ledgers', 'ledges', 'lee', 'leech', 'leeched', 'leeches', 'leeching', 'leeds', 'leek', 'leeks', 'leer', 'leered', 'leerier', 'leeriest', 'leering', 'leers', 'leery', 'lees', 'leeward', 'leewards', 'leeway', 'left', 'lefter', 'leftest', 'leftie', 'lefties', 'leftism', 'leftist', 'leftists', 'leftmost', 'leftover', 'leftovers', 'lefts', 'leftwards', 'lefty', 'leg', 'legacies', 'legacy', 'legal', 'legalese', 'legalism', 'legalisms', 'legality', 'legalize', 'legalized', 'legalizes', 'legally', 'legals', 'legate', 'legatee', 'legatees', 'legates', 'legation', 'legations', 'legato', 'legatos', 'legend', 'legendary', 'legendre', 'legends', 'leger', 'legged', 'leggier', 'leggiest', 'leggin', 'legging', 'leggings', 'leggins', 'leggy', 'leghorn', 'legible', 'legibly', 'legion', 'legions', 'legislate', 'legit', 'legless', 'legman', 'legmen', 'lego', 'legree', 'legroom', 'legrooms', 'legs', 'legume', 'legumes', 'legwork', 'lehman', 'lei', 'leibniz', 'leicester', 'leiden', 'leif', 'leigh', 'leila', 'leipzig', 'leis', 'leisure', 'leisurely', 'leitmotif', 'lela', 'leland', 'lelia', 'lemaitre', 'lemma', 'lemmas', 'lemme', 'lemming', 'lemmings', 'lemon', 'lemonade', 'lemons', 'lemony', 'lemuel', 'lemur', 'lemuria', 'lemurs', 'len', 'lena', 'lenard', 'lend', 'lender', 'lenders', 'lending', 'lends', 'length', 'lengthen', 'lengthens', 'lengthier', 'lengthily', 'lengths', 'lengthy', 'leniency', 'lenient', 'leniently', 'lenin', 'leningrad', 'leninism', 'leninist', 'lennon', 'lenny', 'leno', 'lenoir', 'lenora', 'lenore', 'lens', 'lenses', 'lent', 'lenten', 'lentil', 'lentils', 'lents', 'leo', 'leola', 'leon', 'leona', 'leonard', 'leonardo', 'leonel', 'leonid', 'leonidas', 'leonine', 'leonor', 'leopard', 'leopards', 'leopold', 'leopoldo', 'leos', 'leotard', 'leotards', 'leper', 'lepers', 'lepidus', 'lepke', 'leprosy', 'leprous', 'lept', 'lepus', 'lerner', 'leroy', 'les', 'lesa', 'lesbian', 'lesbians', 'lesion', 'lesions', 'lesley', 'leslie', 'lesotho', 'less', 'lessee', 'lessees', 'lessen', 'lessened', 'lessening', 'lessens', 'lesseps', 'lesser', 'lessie', 'lesson', 'lessons', 'lessor', 'lessors', 'lest', 'lester', 'lestrade', 'let', 'leta', 'letdown', 'letdowns', 'letha', 'lethal', 'lethally', 'lethargic', 'lethargy', 'lethe', 'leticia', 'letitia', 'lets', 'letter', 'letterbox', 'lettered', 'lettering', 'letterman', 'letters', 'letting', 'lettuce', 'lettuces', 'letup', 'letups', 'leukemia', 'leukocyte', 'levant', 'levee', 'levees', 'level', 'leveled', 'leveler', 'levelers', 'leveling', 'levelled', 'levellers', 'levelling', 'levelness', 'levels', 'lever', 'leverage', 'leveraged', 'leverages', 'levered', 'levering', 'levers', 'levesque', 'levi', 'leviathan', 'levied', 'levies', 'levine', 'levitate', 'levitated', 'levitates', 'leviticus', 'levitt', 'levity', 'levy', 'levying', 'lew', 'lewd', 'lewder', 'lewdest', 'lewdly', 'lewdness', 'lewinsky', 'lewis', 'lexica', 'lexical', 'lexicon', 'lexicons', 'lexington', 'lexus', 'lhasa', 'lhotse', 'liability', 'liable', 'liaise', 'liaised', 'liaises', 'liaising', 'liaison', 'liaisons', 'liar', 'liars', 'lib', 'libation', 'libations', 'libby', 'libel', 'libeled', 'libeler', 'libelers', 'libeling', 'libelled', 'libeller', 'libellers', 'libelling', 'libellous', 'libelous', 'libels', 'liberace', 'liberal', 'liberally', 'liberals', 'liberate', 'liberated', 'liberates', 'liberator', 'liberia', 'liberian', 'liberians', 'liberties', 'libertine', 'liberty', 'libido', 'libidos', 'libra', 'librarian', 'libraries', 'library', 'libras', 'libretti', 'libretto', 'librettos', 'librium', 'libya', 'libyan', 'libyans', 'lice', 'licence', 'licenced', 'licences', 'licencing', 'license', 'licensed', 'licensee', 'licensees', 'licenses', 'licensing', 'lichee', 'lichees', 'lichen', 'lichens', 'licit', 'lick', 'licked', 'licking', 'lickings', 'licks', 'licorice', 'licorices', 'lid', 'lidded', 'lidia', 'lids', 'lie', 'lieberman', 'lied', 'lief', 'liefer', 'liefest', 'liege', 'lieges', 'lien', 'liens', 'lies', 'lieu', 'life', 'lifeblood', 'lifeboat', 'lifeboats', 'lifeforms', 'lifeguard', 'lifeless', 'lifelike', 'lifeline', 'lifelines', 'lifelong', 'lifer', 'lifers', 'lifesaver', 'lifespan', 'lifespans', 'lifestyle', 'lifetime', 'lifetimes', 'lifework', 'lifeworks', 'lift', 'lifted', 'lifting', 'liftoff', 'liftoffs', 'lifts', 'ligament', 'ligaments', 'ligature', 'ligatured', 'ligatures', 'light', 'lighted', 'lighten', 'lightened', 'lightens', 'lighter', 'lighters', 'lightest', 'lighting', 'lightly', 'lightness', 'lightning', 'lights', 'lignite', 'likable', 'like', 'likeable', 'liked', 'likelier', 'likeliest', 'likely', 'liken', 'likened', 'likeness', 'likening', 'likens', 'liker', 'likes', 'likest', 'likewise', 'liking', 'lila', 'lilac', 'lilacs', 'lilia', 'lilian', 'liliana', 'lilies', 'lilith', 'lille', 'lillian', 'lillie', 'lilliput', 'lilly', 'lilongwe', 'lilt', 'lilted', 'lilting', 'lilts', 'lily', 'lima', 'limb', 'limbaugh', 'limber', 'limbered', 'limbering', 'limbers', 'limbless', 'limbo', 'limbos', 'limbs', 'limburger', 'lime', 'limeade', 'limeades', 'limed', 'limelight', 'limerick', 'limericks', 'limes', 'limestone', 'limier', 'limiest', 'liming', 'limit', 'limited', 'limiting', 'limitings', 'limitless', 'limits', 'limn', 'limned', 'limning', 'limns', 'limo', 'limoges', 'limos', 'limousin', 'limousine', 'limp', 'limped', 'limper', 'limpest', 'limpet', 'limpets', 'limpid', 'limpidity', 'limpidly', 'limping', 'limply', 'limpness', 'limpopo', 'limps', 'limy', 'lin', 'lina', 'linage', 'linchpin', 'linchpins', 'lincoln', 'lincolns', 'lind', 'linda', 'lindbergh', 'linden', 'lindens', 'lindsay', 'lindsey', 'lindy', 'line', 'lineage', 'lineages', 'lineal', 'lineally', 'lineament', 'linear', 'linearly', 'lined', 'linefeed', 'lineman', 'linemen', 'linen', 'linens', 'liner', 'liners', 'lines', 'linesman', 'linesmen', 'lineup', 'lineups', 'linger', 'lingered', 'lingerer', 'lingerers', 'lingerie', 'lingering', 'lingers', 'lingo', 'lingoes', 'lingos', 'lingual', 'linguist', 'linguists', 'liniment', 'liniments', 'lining', 'linings', 'link', 'linkage', 'linkages', 'linked', 'linker', 'linking', 'links', 'linkup', 'linkups', 'linnaeus', 'linnet', 'linnets', 'linoleum', 'linotype', 'linseed', 'lint', 'lintel', 'lintels', 'linton', 'linus', 'linux', 'linwood', 'lion', 'lionel', 'lioness', 'lionesses', 'lionize', 'lionized', 'lionizes', 'lionizing', 'lions', 'lip', 'lipid', 'lipids', 'lippi', 'lippmann', 'lipread', 'lipreads', 'lips', 'lipscomb', 'lipstick', 'lipsticks', 'lipton', 'liquefied', 'liquefies', 'liquefy', 'liqueur', 'liqueurs', 'liquid', 'liquidate', 'liquidity', 'liquidize', 'liquids', 'liquified', 'liquifies', 'liquify', 'liquor', 'liquored', 'liquoring', 'liquors', 'lira', 'liras', 'lire', 'lisa', 'lisbon', 'lisle', 'lisp', 'lisped', 'lisping', 'lisps', 'lissajous', 'lissom', 'lissome', 'list', 'listed', 'listen', 'listened', 'listener', 'listeners', 'listening', 'listens', 'lister', 'listerine', 'listing', 'listings', 'listless', 'liston', 'lists', 'liszt', 'lit', 'litanies', 'litany', 'litchi', 'litchis', 'lite', 'liter', 'literacy', 'literally', 'literals', 'literary', 'literate', 'literates', 'literati', 'liters', 'lithe', 'lither', 'lithest', 'lithium', 'lithuania', 'litigant', 'litigants', 'litigate', 'litigated', 'litigates', 'litigious', 'litmus', 'litter', 'litterbug', 'littered', 'littering', 'litters', 'little', 'littler', 'littlest', 'litton', 'littoral', 'littorals', 'liturgies', 'liturgy', 'livable', 'live', 'liveable', 'lived', 'livelier', 'liveliest', 'livelong', 'livelongs', 'lively', 'liven', 'livened', 'livening', 'livens', 'liver', 'liveried', 'liveries', 'liverpool', 'livers', 'livery', 'lives', 'livest', 'livestock', 'livia', 'livid', 'lividly', 'living', 'livings', 'livonia', 'livy', 'liz', 'liza', 'lizard', 'lizards', 'lizzie', 'lizzy', 'ljubljana', 'llama', 'llamas', 'llano', 'llanos', 'llewellyn', 'lloyd', 'load', 'loadable', 'loaded', 'loader', 'loaders', 'loading', 'loads', 'loadstar', 'loadstars', 'loadstone', 'loaf', 'loafed', 'loafer', 'loafers', 'loafing', 'loafs', 'loam', 'loamier', 'loamiest', 'loamy', 'loan', 'loaned', 'loaner', 'loaners', 'loaning', 'loans', 'loanword', 'loanwords', 'loath', 'loathe', 'loathed', 'loathes', 'loathing', 'loathings', 'loathsome', 'loaves', 'lob', 'lobbed', 'lobbied', 'lobbies', 'lobbing', 'lobby', 'lobbying', 'lobbyist', 'lobbyists', 'lobe', 'lobed', 'lobes', 'lobotomy', 'lobs', 'lobster', 'lobsters', 'local', 'locale', 'locales', 'locality', 'localize', 'localized', 'localizes', 'locally', 'locals', 'locate', 'located', 'locates', 'locating', 'location', 'locations', 'locavore', 'locavores', 'lochinvar', 'loci', 'lock', 'lockable', 'locke', 'lockean', 'locked', 'locker', 'lockers', 'locket', 'lockets', 'lockheed', 'locking', 'lockjaw', 'lockout', 'lockouts', 'locks', 'locksmith', 'lockstep', 'lockup', 'lockups', 'lockwood', 'loco', 'locoweed', 'locoweeds', 'locus', 'locust', 'locusts', 'locution', 'locutions', 'lode', 'lodes', 'lodestar', 'lodestars', 'lodestone', 'lodge', 'lodged', 'lodger', 'lodgers', 'lodges', 'lodging', 'lodgings', 'lodz', 'loewe', 'loewi', 'loews', 'loft', 'lofted', 'loftier', 'loftiest', 'loftily', 'loftiness', 'lofting', 'lofts', 'lofty', 'log', 'logan', 'logarithm', 'logbook', 'logbooks', 'loge', 'loges', 'logged', 'logger', 'loggers', 'logging', 'logic', 'logical', 'logically', 'logician', 'logicians', 'login', 'logins', 'logistic', 'logistics', 'logjam', 'logjams', 'logo', 'logoff', 'logoffs', 'logon', 'logons', 'logos', 'logotype', 'logotypes', 'logout', 'logouts', 'logs', 'lohengrin', 'loin', 'loincloth', 'loins', 'loire', 'lois', 'loiter', 'loitered', 'loiterer', 'loiterers', 'loitering', 'loiters', 'loki', 'lola', 'lolcat', 'lolcats', 'lolita', 'loll', 'lollard', 'lolled', 'lolling', 'lollipop', 'lollipops', 'lolls', 'lollygag', 'lollygags', 'lollypop', 'lollypops', 'lombard', 'lombardi', 'lombardy', 'lome', 'lon', 'london', 'londoner', 'lone', 'lonelier', 'loneliest', 'lonely', 'loner', 'loners', 'lonesome', 'longboat', 'longboats', 'longed', 'longer', 'longest', 'longevity', 'longhair', 'longhairs', 'longhand', 'longhorn', 'longhorns', 'longing', 'longingly', 'longings', 'longish', 'longitude', 'longs', 'longtime', 'lonnie', 'loofah', 'look', 'lookalike', 'looked', 'looking', 'lookout', 'lookouts', 'looks', 'lookup', 'loom', 'loomed', 'looming', 'looms', 'loon', 'looney', 'looneyier', 'looneyies', 'looneys', 'loonie', 'loonier', 'loonies', 'looniest', 'loons', 'loony', 'loop', 'looped', 'loophole', 'loopholes', 'loopier', 'loopiest', 'looping', 'loops', 'loopy', 'loose', 'loosed', 'loosely', 'loosen', 'loosened', 'looseness', 'loosening', 'loosens', 'looser', 'looses', 'loosest', 'loosing', 'loot', 'looted', 'looter', 'looters', 'looting', 'loots', 'lop', 'lope', 'loped', 'lopes', 'lopez', 'loping', 'lopped', 'lopping', 'lops', 'lopsided', 'loquacity', 'lora', 'loraine', 'lord', 'lorded', 'lording', 'lordlier', 'lordliest', 'lordly', 'lords', 'lordship', 'lordships', 'lore', 'lorelei', 'loren', 'lorena', 'lorene', 'lorentz', 'lorenz', 'lorenzo', 'loretta', 'lorgnette', 'lori', 'lorie', 'lorn', 'lorna', 'lorraine', 'lorre', 'lorrie', 'lorries', 'lorry', 'los', 'lose', 'loser', 'losers', 'loses', 'losing', 'loss', 'losses', 'lost', 'lot', 'loth', 'lothario', 'lotion', 'lotions', 'lots', 'lott', 'lotteries', 'lottery', 'lottie', 'lotto', 'lotus', 'lotuses', 'lou', 'loud', 'louder', 'loudest', 'loudly', 'loudmouth', 'loudness', 'louella', 'louie', 'louis', 'louisa', 'louise', 'louisiana', 'lounge', 'lounged', 'lounges', 'lounging', 'lourdes', 'louse', 'louses', 'lousier', 'lousiest', 'lousiness', 'lousy', 'lout', 'loutish', 'louts', 'louver', 'louvered', 'louvers', 'louvre', 'louvred', 'lovable', 'love', 'loveable', 'lovebird', 'lovebirds', 'lovecraft', 'loved', 'lovelace', 'loveless', 'lovelier', 'lovelies', 'loveliest', 'lovelorn', 'lovely', 'lover', 'lovers', 'loves', 'lovesick', 'loving', 'lovingly', 'low', 'lowbrow', 'lowbrows', 'lowdown', 'lowe', 'lowed', 'lowell', 'lowenbrau', 'lower', 'lowercase', 'lowered', 'lowering', 'lowers', 'lowery', 'lowest', 'lowing', 'lowish', 'lowland', 'lowlands', 'lowlier', 'lowliest', 'lowliness', 'lowly', 'lowness', 'lows', 'lox', 'loxes', 'loyal', 'loyaler', 'loyalest', 'loyalist', 'loyalists', 'loyaller', 'loyallest', 'loyally', 'loyalties', 'loyalty', 'loyang', 'loyd', 'loyola', 'lozenge', 'lozenges', 'luanda', 'luann', 'luau', 'luaus', 'lubber', 'lubbers', 'lubbock', 'lube', 'lubed', 'lubes', 'lubing', 'lubricant', 'lubricate', 'lucas', 'luce', 'lucia', 'lucian', 'luciano', 'lucid', 'lucidity', 'lucidly', 'lucidness', 'lucien', 'lucifer', 'lucile', 'lucille', 'lucinda', 'lucio', 'lucite', 'lucius', 'luck', 'lucked', 'luckier', 'luckiest', 'luckily', 'luckiness', 'lucking', 'luckless', 'lucknow', 'lucks', 'lucky', 'lucrative', 'lucre', 'lucretia', 'lucretius', 'lucy', 'luddite', 'ludhiana', 'ludicrous', 'ludwig', 'luella', 'lufthansa', 'luftwaffe', 'lug', 'luger', 'luggage', 'lugged', 'lugging', 'lugosi', 'lugs', 'luigi', 'luis', 'luisa', 'luke', 'lukewarm', 'lula', 'lull', 'lullabies', 'lullaby', 'lulled', 'lulling', 'lulls', 'lully', 'lulu', 'lumbago', 'lumbar', 'lumber', 'lumbered', 'lumbering', 'lumberman', 'lumbermen', 'lumbers', 'luminary', 'luminous', 'lummox', 'lummoxes', 'lump', 'lumped', 'lumpier', 'lumpiest', 'lumpiness', 'lumping', 'lumpish', 'lumps', 'lumpy', 'luna', 'lunacies', 'lunacy', 'lunar', 'lunatic', 'lunatics', 'lunch', 'lunchbox', 'lunched', 'luncheon', 'luncheons', 'lunches', 'lunching', 'lunchroom', 'lunchtime', 'lung', 'lunge', 'lunged', 'lunges', 'lunging', 'lungs', 'lupe', 'lupin', 'lupine', 'lupines', 'lupins', 'lupus', 'lurch', 'lurched', 'lurches', 'lurching', 'lure', 'lured', 'lures', 'luria', 'lurid', 'luridly', 'luridness', 'luring', 'lurk', 'lurked', 'lurking', 'lurks', 'lusaka', 'luscious', 'lush', 'lusher', 'lushes', 'lushest', 'lushness', 'lusitania', 'lust', 'lusted', 'luster', 'lustful', 'lustfully', 'lustier', 'lustiest', 'lustily', 'lustiness', 'lusting', 'lustre', 'lustrous', 'lusts', 'lusty', 'lute', 'lutes', 'luther', 'lutheran', 'lutherans', 'luvs', 'luxuriant', 'luxuriate', 'luxuries', 'luxurious', 'luxury', 'luz', 'luzon', 'lvov', 'lyceum', 'lyceums', 'lychee', 'lychees', 'lycra', 'lycurgus', 'lydia', 'lye', 'lyell', 'lying', 'lyle', 'lyly', 'lyman', 'lyme', 'lymph', 'lymphatic', 'lymphoma', 'lymphomas', 'lynch', 'lynched', 'lynches', 'lynching', 'lynchings', 'lynchpin', 'lynchpins', 'lynda', 'lyndon', 'lynette', 'lynn', 'lynne', 'lynnette', 'lynx', 'lynxes', 'lyon', 'lyons', 'lyra', 'lyre', 'lyres', 'lyric', 'lyrical', 'lyrically', 'lyricist', 'lyricists', 'lyrics', 'lysenko', 'lysol', 'lyx', 'maalox', 'mabel', 'mable', 'macabre', 'macadam', 'macao', 'macaroni', 'macaronis', 'macaroon', 'macaroons', 'macarthur', 'macaulay', 'macaw', 'macaws', 'macbeth', 'macbride', 'maccabeus', 'macdonald', 'mace', 'maced', 'macedon', 'macedonia', 'macerate', 'macerated', 'macerates', 'maces', 'mach', 'machete', 'machetes', 'machine', 'machined', 'machinery', 'machines', 'machining', 'machinist', 'machismo', 'macho', 'macias', 'macing', 'macintosh', 'mack', 'mackenzie', 'mackerel', 'mackerels', 'mackinac', 'mackinaw', 'mackinaws', 'macleish', 'macmillan', 'macon', 'macro', 'macrocosm', 'macron', 'macrons', 'macros', 'macumba', 'macy', 'mad', 'madam', 'madame', 'madams', 'madcap', 'madcaps', 'madden', 'maddened', 'maddening', 'maddens', 'madder', 'madders', 'maddest', 'maddox', 'made', 'madeira', 'madeiras', 'madeleine', 'madeline', 'madelyn', 'madge', 'madhouse', 'madhouses', 'madison', 'madly', 'madman', 'madmen', 'madness', 'madonna', 'madonnas', 'madras', 'madrasa', 'madrasah', 'madrasahs', 'madrasas', 'madrases', 'madrassa', 'madrassas', 'madrid', 'madrigal', 'madrigals', 'mads', 'madurai', 'madwoman', 'madwomen', 'mae', 'maelstrom', 'maestri', 'maestro', 'maestros', 'mafia', 'mafias', 'mafioso', 'magazine', 'magazines', 'magdalena', 'magdalene', 'magellan', 'magenta', 'maggie', 'maggot', 'maggots', 'maghreb', 'magi', 'magic', 'magical', 'magically', 'magician', 'magicians', 'maginot', 'magma', 'magnate', 'magnates', 'magnesia', 'magnesium', 'magnet', 'magnetic', 'magnetism', 'magnetize', 'magneto', 'magnetos', 'magnets', 'magnified', 'magnifier', 'magnifies', 'magnify', 'magnitude', 'magnolia', 'magnolias', 'magnum', 'magnums', 'magog', 'magoo', 'magpie', 'magpies', 'magritte', 'magsaysay', 'magyar', 'magyars', 'maharaja', 'maharajah', 'maharajas', 'maharanee', 'maharani', 'maharanis', 'maharishi', 'mahatma', 'mahatmas', 'mahavira', 'mahayana', 'mahdi', 'mahfouz', 'mahican', 'mahicans', 'mahjong', 'mahler', 'mahogany', 'mai', 'maid', 'maiden', 'maidenly', 'maidens', 'maids', 'maigret', 'mail', 'mailbox', 'mailboxes', 'mailed', 'mailer', 'mailers', 'mailing', 'mailings', 'maillol', 'mailman', 'mailmen', 'mails', 'maim', 'maiman', 'maimed', 'maiming', 'maims', 'maine', 'mainframe', 'mainland', 'mainlands', 'mainline', 'mainlined', 'mainlines', 'mainly', 'mainmast', 'mainmasts', 'mains', 'mainsail', 'mainsails', 'mainstay', 'mainstays', 'maintain', 'maintains', 'maisie', 'maitreya', 'maize', 'maizes', 'majestic', 'majesties', 'majesty', 'major', 'majorca', 'majored', 'majorette', 'majoring', 'majority', 'majorly', 'majors', 'majuro', 'makarios', 'make', 'maker', 'makers', 'makes', 'makeshift', 'makeup', 'makeups', 'making', 'makings', 'malabar', 'malabo', 'malacca', 'malachi', 'maladies', 'maladroit', 'malady', 'malagasy', 'malaise', 'malamud', 'malaprop', 'malaria', 'malarial', 'malarkey', 'malawi', 'malay', 'malayalam', 'malayan', 'malays', 'malaysia', 'malaysian', 'malcolm', 'maldive', 'maldives', 'maldivian', 'maldonado', 'male', 'maleness', 'males', 'malformed', 'mali', 'malian', 'malians', 'malibu', 'malice', 'malicious', 'malign', 'malignant', 'maligned', 'maligning', 'malignity', 'maligns', 'malinda', 'malinger', 'malingers', 'mall', 'mallard', 'mallards', 'malleable', 'mallet', 'mallets', 'mallomars', 'mallory', 'mallow', 'mallows', 'malls', 'malone', 'malory', 'malraux', 'malt', 'malta', 'malted', 'malteds', 'maltese', 'malthus', 'malting', 'maltreat', 'maltreats', 'malts', 'malware', 'mama', 'mamas', 'mambo', 'mamboed', 'mamboing', 'mambos', 'mameluke', 'mamet', 'mamie', 'mamma', 'mammal', 'mammalian', 'mammals', 'mammary', 'mammas', 'mammogram', 'mammon', 'mammoth', 'mammoths', 'mamore', 'man', 'manacle', 'manacled', 'manacles', 'manacling', 'manage', 'managed', 'manager', 'managers', 'manages', 'managing', 'managua', 'manama', 'manasseh', 'manatee', 'manatees', 'manaus', 'manchu', 'manchuria', 'mancini', 'mandalay', 'mandarin', 'mandarins', 'mandate', 'mandated', 'mandates', 'mandating', 'mandatory', 'mandela', 'mandible', 'mandibles', 'mandingo', 'mandolin', 'mandolins', 'mandrake', 'mandrakes', 'mandrell', 'mandrill', 'mandrills', 'mandy', 'mane', 'manes', 'manet', 'maneuver', 'maneuvers', 'manfred', 'manful', 'manfully', 'manga', 'manganese', 'mange', 'manger', 'mangers', 'mangier', 'mangiest', 'mangle', 'mangled', 'mangles', 'mangling', 'mango', 'mangoes', 'mangos', 'mangrove', 'mangroves', 'mangy', 'manhandle', 'manhattan', 'manhole', 'manholes', 'manhood', 'manhunt', 'manhunts', 'mani', 'mania', 'maniac', 'maniacal', 'maniacs', 'manias', 'manic', 'manichean', 'manics', 'manicure', 'manicured', 'manicures', 'manifest', 'manifesto', 'manifests', 'manifold', 'manifolds', 'manikin', 'manikins', 'manila', 'manilas', 'manilla', 'manitoba', 'mankind', 'manley', 'manlier', 'manliest', 'manliness', 'manly', 'mann', 'manna', 'manned', 'mannequin', 'manner', 'mannered', 'mannerism', 'mannerly', 'manners', 'mannheim', 'mannikin', 'mannikins', 'manning', 'mannish', 'mannishly', 'manor', 'manorial', 'manors', 'manpower', 'mans', 'mansard', 'mansards', 'manse', 'manses', 'mansfield', 'mansion', 'mansions', 'manson', 'mantegna', 'mantel', 'mantels', 'mantes', 'mantilla', 'mantillas', 'mantis', 'mantises', 'mantissa', 'mantle', 'mantled', 'mantles', 'mantling', 'mantra', 'mantras', 'manual', 'manually', 'manuals', 'manuel', 'manuela', 'manumit', 'manumits', 'manure', 'manured', 'manures', 'manuring', 'manx', 'many', 'mao', 'maoism', 'maoisms', 'maoist', 'maoists', 'maori', 'maoris', 'map', 'maple', 'maples', 'mapped', 'mapper', 'mapping', 'mappings', 'maps', 'maputo', 'mar', 'mara', 'marabou', 'marabous', 'maraca', 'maracaibo', 'maracas', 'marat', 'maratha', 'marathi', 'marathon', 'marathons', 'maraud', 'marauded', 'marauder', 'marauders', 'marauding', 'marauds', 'marble', 'marbled', 'marbles', 'marbling', 'marc', 'marceau', 'marcel', 'marcelino', 'marcella', 'marcelo', 'march', 'marched', 'marcher', 'marchers', 'marches', 'marching', 'marci', 'marcia', 'marciano', 'marcie', 'marco', 'marconi', 'marcos', 'marcus', 'marcy', 'marduk', 'mare', 'mares', 'margaret', 'margarine', 'margarita', 'margarito', 'marge', 'margery', 'margie', 'margin', 'marginal', 'margins', 'margo', 'margret', 'margrethe', 'mari', 'maria', 'mariachi', 'mariachis', 'marian', 'mariana', 'marianas', 'marianne', 'mariano', 'maribel', 'maricela', 'marie', 'marietta', 'marigold', 'marigolds', 'marihuana', 'marijuana', 'marilyn', 'marimba', 'marimbas', 'marin', 'marina', 'marinade', 'marinaded', 'marinades', 'marinas', 'marinate', 'marinated', 'marinates', 'marine', 'mariner', 'mariners', 'marines', 'mario', 'marion', 'maris', 'marisa', 'marisol', 'marissa', 'maritain', 'marital', 'maritime', 'maritza', 'marius', 'marjoram', 'marjorie', 'marjory', 'mark', 'markab', 'markdown', 'markdowns', 'marked', 'markedly', 'marker', 'markers', 'market', 'marketed', 'marketer', 'marketers', 'marketing', 'markets', 'markham', 'marking', 'markings', 'markov', 'marks', 'marksman', 'marksmen', 'markup', 'markups', 'marla', 'marlboro', 'marlene', 'marley', 'marlin', 'marlins', 'marlon', 'marlowe', 'marmalade', 'marmara', 'marmoset', 'marmosets', 'marmot', 'marmots', 'marne', 'maronite', 'maroon', 'marooned', 'marooning', 'maroons', 'marple', 'marquee', 'marquees', 'marquesas', 'marquess', 'marquetry', 'marquette', 'marquez', 'marquis', 'marquise', 'marquises', 'marquita', 'marrakesh', 'marred', 'marriage', 'marriages', 'married', 'marrieds', 'marries', 'marring', 'marriott', 'marrow', 'marrows', 'marry', 'marrying', 'mars', 'marsala', 'marsh', 'marsha', 'marshal', 'marshaled', 'marshall', 'marshals', 'marshes', 'marshier', 'marshiest', 'marshy', 'marsupial', 'mart', 'marta', 'martel', 'marten', 'martens', 'martha', 'martial', 'martian', 'martians', 'martin', 'martina', 'martinet', 'martinets', 'martinez', 'martini', 'martinis', 'martins', 'marts', 'marty', 'martyr', 'martyrdom', 'martyred', 'martyring', 'martyrs', 'marva', 'marvel', 'marveled', 'marveling', 'marvell', 'marvelled', 'marvelous', 'marvels', 'marvin', 'marx', 'marxism', 'marxisms', 'marxist', 'marxists', 'mary', 'maryann', 'maryanne', 'maryellen', 'maryland', 'marylou', 'marzipan', 'mas', 'masada', 'masai', 'masaryk', 'mascagni', 'mascara', 'mascaraed', 'mascaras', 'mascot', 'mascots', 'masculine', 'masefield', 'maserati', 'maseru', 'mash', 'mashed', 'masher', 'mashers', 'mashes', 'mashhad', 'mashing', 'mashup', 'mashups', 'mask', 'masked', 'masking', 'masks', 'masochism', 'masochist', 'mason', 'masonic', 'masonite', 'masonry', 'masons', 'masque', 'masques', 'mass', 'massacre', 'massacred', 'massacres', 'massage', 'massaged', 'massages', 'massaging', 'massasoit', 'massed', 'massenet', 'masses', 'masseur', 'masseurs', 'masseuse', 'masseuses', 'massey', 'massing', 'massive', 'massively', 'mast', 'master', 'mastered', 'masterful', 'mastering', 'masterly', 'masters', 'mastery', 'masthead', 'mastheads', 'masticate', 'mastiff', 'mastiffs', 'mastodon', 'mastodons', 'mastoid', 'mastoids', 'masts', 'mat', 'matador', 'matadors', 'match', 'matchbook', 'matchbox', 'matched', 'matches', 'matching', 'matchless', 'mate', 'mated', 'material', 'materials', 'maternal', 'maternity', 'mates', 'math', 'mather', 'mathew', 'mathews', 'mathewson', 'mathias', 'mathis', 'matilda', 'mating', 'matins', 'matisse', 'matriarch', 'matrices', 'matricide', 'matrimony', 'matrix', 'matrixes', 'matron', 'matronly', 'matrons', 'mats', 'matt', 'matte', 'matted', 'mattel', 'matter', 'mattered', 'mattering', 'matters', 'mattes', 'matthew', 'matthews', 'matthias', 'mattie', 'matting', 'mattock', 'mattocks', 'mattress', 'matts', 'mature', 'matured', 'maturely', 'maturer', 'matures', 'maturest', 'maturing', 'maturity', 'matzo', 'matzoh', 'matzohs', 'matzos', 'matzot', 'matzoth', 'maud', 'maude', 'maudlin', 'maugham', 'maui', 'maul', 'mauled', 'mauling', 'mauls', 'maunder', 'maundered', 'maunders', 'maura', 'maureen', 'mauriac', 'maurice', 'mauricio', 'maurine', 'mauritius', 'mauro', 'maurois', 'mauryan', 'mauser', 'mausolea', 'mausoleum', 'mauve', 'maven', 'mavens', 'maverick', 'mavericks', 'mavin', 'mavins', 'mavis', 'maw', 'mawkish', 'mawkishly', 'maws', 'max', 'maxed', 'maxes', 'maxilla', 'maxillae', 'maxillary', 'maxillas', 'maxim', 'maxima', 'maximal', 'maximally', 'maximize', 'maximized', 'maximizes', 'maxims', 'maximum', 'maximums', 'maxine', 'maxing', 'maxwell', 'may', 'maya', 'mayan', 'mayans', 'mayas', 'maybe', 'maybes', 'mayday', 'maydays', 'mayer', 'mayfair', 'mayflies', 'mayflower', 'mayfly', 'mayhem', 'maynard', 'mayo', 'mayor', 'mayoral', 'mayoralty', 'mayors', 'maypole', 'maypoles', 'mayra', 'mays', 'maytag', 'mazama', 'mazarin', 'mazatlan', 'mazda', 'maze', 'mazes', 'mazola', 'mazourka', 'mazourkas', 'mazurka', 'mazurkas', 'mazzini', 'mbabane', 'mbini', 'mcadam', 'mcbride', 'mccain', 'mccall', 'mccarthy', 'mccartney', 'mccarty', 'mcclain', 'mcclellan', 'mcclure', 'mcconnell', 'mccormick', 'mccoy', 'mccray', 'mcdaniel', 'mcdonald', 'mcdonnell', 'mcdowell', 'mcenroe', 'mcfadden', 'mcfarland', 'mcgee', 'mcgovern', 'mcgowan', 'mcguffey', 'mcguire', 'mci', 'mcintosh', 'mcintyre', 'mckay', 'mckee', 'mckenzie', 'mckinley', 'mckinney', 'mcknight', 'mclean', 'mcleod', 'mcluhan', 'mcmahon', 'mcmillan', 'mcnamara', 'mcneil', 'mcpherson', 'mcqueen', 'mcveigh', 'mead', 'meade', 'meadow', 'meadows', 'meagan', 'meager', 'meagerly', 'meal', 'mealier', 'mealiest', 'meals', 'mealtime', 'mealtimes', 'mealy', 'mean', 'meander', 'meandered', 'meanders', 'meaner', 'meanest', 'meaning', 'meanings', 'meanly', 'meanness', 'means', 'meant', 'meantime', 'meanwhile', 'meany', 'measles', 'measlier', 'measliest', 'measly', 'measure', 'measured', 'measures', 'measuring', 'meat', 'meatball', 'meatballs', 'meatier', 'meatiest', 'meatloaf', 'meats', 'meaty', 'mecca', 'meccas', 'mechanic', 'mechanics', 'mechanism', 'mechanize', 'medal', 'medalist', 'medalists', 'medallion', 'medals', 'medan', 'meddle', 'meddled', 'meddler', 'meddlers', 'meddles', 'meddling', 'medea', 'medellin', 'media', 'mediaeval', 'medial', 'median', 'medians', 'medias', 'mediate', 'mediated', 'mediates', 'mediating', 'mediation', 'mediator', 'mediators', 'medic', 'medicaid', 'medicaids', 'medical', 'medically', 'medicals', 'medicare', 'medicares', 'medicate', 'medicated', 'medicates', 'medici', 'medicinal', 'medicine', 'medicines', 'medics', 'medieval', 'medina', 'mediocre', 'meditate', 'meditated', 'meditates', 'medium', 'mediums', 'medley', 'medleys', 'medulla', 'medullae', 'medullas', 'medusa', 'meek', 'meeker', 'meekest', 'meekly', 'meekness', 'meet', 'meeting', 'meetings', 'meets', 'meg', 'megabyte', 'megabytes', 'megacycle', 'megahertz', 'megalith', 'megaliths', 'megan', 'megaphone', 'megapixel', 'megaton', 'megatons', 'meghan', 'megs', 'meh', 'meier', 'meighen', 'meiji', 'meir', 'mejia', 'mekong', 'mel', 'melanesia', 'melange', 'melanges', 'melanie', 'melanin', 'melanoma', 'melanomas', 'melba', 'melbourne', 'melchior', 'meld', 'melded', 'melding', 'melds', 'melendez', 'melinda', 'melisa', 'melisande', 'melissa', 'mellon', 'mellow', 'mellowed', 'mellower', 'mellowest', 'mellowing', 'mellows', 'melodic', 'melodies', 'melodious', 'melodrama', 'melody', 'melon', 'melons', 'melpomene', 'melt', 'meltdown', 'meltdowns', 'melted', 'melting', 'melton', 'melts', 'melva', 'melville', 'melvin', 'member', 'members', 'membrane', 'membranes', 'meme', 'memento', 'mementoes', 'mementos', 'memes', 'memling', 'memo', 'memoir', 'memoirs', 'memorable', 'memorably', 'memoranda', 'memorial', 'memorials', 'memories', 'memorize', 'memorized', 'memorizes', 'memory', 'memos', 'memphis', 'men', 'menace', 'menaced', 'menaces', 'menacing', 'menage', 'menagerie', 'menages', 'menander', 'mencius', 'mencken', 'mend', 'mendacity', 'mended', 'mendel', 'mendeleev', 'mendelian', 'mender', 'menders', 'mendez', 'mendicant', 'mending', 'mendocino', 'mendoza', 'mends', 'menelaus', 'menelik', 'menes', 'menfolk', 'menhaden', 'menhadens', 'menial', 'menially', 'menials', 'menkar', 'menkent', 'mennen', 'mennonite', 'menominee', 'menopause', 'menorah', 'menorahs', 'menotti', 'mensa', 'menses', 'menstrual', 'menswear', 'mental', 'mentality', 'mentally', 'menthol', 'mention', 'mentioned', 'mentions', 'mentor', 'mentored', 'mentoring', 'mentors', 'menu', 'menuhin', 'menus', 'menzies', 'meow', 'meowed', 'meowing', 'meows', 'merak', 'mercado', 'mercator', 'mercedes', 'mercenary', 'mercer', 'mercerize', 'merchant', 'merchants', 'mercia', 'mercies', 'merciful', 'merciless', 'merck', 'mercurial', 'mercuric', 'mercuries', 'mercury', 'mercy', 'mere', 'meredith', 'merely', 'meres', 'merest', 'merganser', 'merge', 'merged', 'merger', 'mergers', 'merges', 'merging', 'meridian', 'meridians', 'meringue', 'meringues', 'merino', 'merinos', 'merit', 'merited', 'meriting', 'merits', 'merle', 'merlin', 'merlot', 'mermaid', 'mermaids', 'merman', 'mermen', 'merriam', 'merrick', 'merrier', 'merriest', 'merrill', 'merrily', 'merrimack', 'merriment', 'merriness', 'merritt', 'merry', 'merton', 'mervin', 'mes', 'mesa', 'mesabi', 'mesas', 'mescal', 'mescaline', 'mescals', 'mesdames', 'mesh', 'meshed', 'meshes', 'meshing', 'mesmer', 'mesmerism', 'mesmerize', 'mesozoic', 'mesquite', 'mesquites', 'mess', 'message', 'messages', 'messed', 'messenger', 'messes', 'messiaen', 'messiah', 'messiahs', 'messianic', 'messier', 'messiest', 'messieurs', 'messily', 'messiness', 'messing', 'messy', 'mestizo', 'mestizoes', 'mestizos', 'met', 'metabolic', 'metacarpi', 'metal', 'metallic', 'metallica', 'metals', 'metamucil', 'metaphor', 'metaphors', 'mete', 'meted', 'meteor', 'meteoric', 'meteorite', 'meteoroid', 'meteors', 'meter', 'metered', 'metering', 'meters', 'metes', 'methadon', 'methadone', 'methane', 'methanol', 'methinks', 'methodism', 'methodist', 'methought', 'meting', 'metric', 'metrical', 'metrics', 'metro', 'metronome', 'metros', 'mettle', 'meuse', 'mew', 'mewed', 'mewing', 'mewl', 'mewled', 'mewling', 'mewls', 'mews', 'mexicali', 'mexican', 'mexicans', 'mexico', 'meyer', 'meyerbeer', 'meyers', 'mezzanine', 'mfume', 'mgm', 'mhz', 'mia', 'miami', 'miamis', 'miaow', 'miaowed', 'miaowing', 'miaows', 'miasma', 'miasmas', 'miasmata', 'mica', 'micah', 'micawber', 'mice', 'michael', 'micheal', 'michel', 'michele', 'michelin', 'michelle', 'michelob', 'michelson', 'michigan', 'mick', 'mickey', 'mickie', 'micky', 'micmac', 'micra', 'microbe', 'microbes', 'microchip', 'microcode', 'microcosm', 'microfilm', 'microloan', 'micron', 'microns', 'microsoft', 'microwave', 'mid', 'midair', 'midas', 'midday', 'middies', 'middle', 'middleman', 'middlemen', 'middles', 'middleton', 'middling', 'middy', 'midge', 'midges', 'midget', 'midgets', 'midland', 'midlands', 'midmost', 'midnight', 'midpoint', 'midpoints', 'midriff', 'midriffs', 'midst', 'midstream', 'midsummer', 'midterm', 'midterms', 'midtown', 'midway', 'midways', 'midweek', 'midweeks', 'midwest', 'midwife', 'midwifed', 'midwifery', 'midwifes', 'midwifing', 'midwinter', 'midwived', 'midwives', 'midwiving', 'midyear', 'midyears', 'mien', 'miens', 'miff', 'miffed', 'miffing', 'miffs', 'mig', 'might', 'mightier', 'mightiest', 'mightily', 'mighty', 'migraine', 'migraines', 'migrant', 'migrants', 'migrate', 'migrated', 'migrates', 'migrating', 'migration', 'migratory', 'miguel', 'mike', 'miked', 'mikes', 'mikhail', 'miking', 'mikoyan', 'mil', 'milagros', 'milan', 'milch', 'mild', 'milder', 'mildest', 'mildew', 'mildewed', 'mildewing', 'mildews', 'mildly', 'mildness', 'mildred', 'mile', 'mileage', 'mileages', 'milepost', 'mileposts', 'miler', 'milers', 'miles', 'milestone', 'milf', 'milford', 'milfs', 'milieu', 'milieus', 'milieux', 'militancy', 'militant', 'militants', 'military', 'militate', 'militated', 'militates', 'militia', 'militias', 'milk', 'milked', 'milken', 'milker', 'milkier', 'milkiest', 'milkiness', 'milking', 'milkmaid', 'milkmaids', 'milkman', 'milkmen', 'milks', 'milkshake', 'milksop', 'milksops', 'milkweed', 'milkweeds', 'milky', 'mill', 'millage', 'millard', 'millay', 'milled', 'millennia', 'millepede', 'miller', 'millers', 'millet', 'millicent', 'millie', 'milligram', 'millikan', 'milliner', 'milliners', 'millinery', 'milling', 'million', 'millions', 'millionth', 'millipede', 'millrace', 'millraces', 'mills', 'millstone', 'milne', 'milo', 'milosevic', 'mils', 'miltiades', 'milton', 'miltonic', 'miltown', 'milwaukee', 'mime', 'mimed', 'mimes', 'mimetic', 'mimi', 'mimic', 'mimicked', 'mimicking', 'mimicries', 'mimicry', 'mimics', 'miming', 'mimosa', 'mimosas', 'minamoto', 'minaret', 'minarets', 'minatory', 'mince', 'minced', 'mincemeat', 'minces', 'mincing', 'mind', 'mindanao', 'minded', 'mindful', 'mindfully', 'minding', 'mindless', 'mindoro', 'minds', 'mindy', 'mine', 'mined', 'minefield', 'miner', 'mineral', 'minerals', 'miners', 'minerva', 'mines', 'ming', 'mingle', 'mingled', 'mingles', 'mingling', 'mingus', 'mini', 'miniature', 'minibike', 'minibikes', 'minibus', 'minibuses', 'minicam', 'minicams', 'minim', 'minima', 'minimal', 'minimally', 'minimize', 'minimized', 'minimizes', 'minims', 'minimum', 'minimums', 'mining', 'minion', 'minions', 'minis', 'miniscule', 'miniskirt', 'minister', 'ministers', 'ministry', 'minivan', 'minivans', 'mink', 'minks', 'minnelli', 'minnesota', 'minnie', 'minnow', 'minnows', 'minoan', 'minoans', 'minolta', 'minor', 'minored', 'minoring', 'minority', 'minors', 'minos', 'minot', 'minotaur', 'minsk', 'minsky', 'minster', 'minstrel', 'minstrels', 'mint', 'mintaka', 'minted', 'mintier', 'mintiest', 'minting', 'mints', 'minty', 'minuend', 'minuends', 'minuet', 'minuets', 'minuit', 'minus', 'minuscule', 'minuses', 'minute', 'minuted', 'minutely', 'minuteman', 'minutemen', 'minuter', 'minutes', 'minutest', 'minutia', 'minutiae', 'minuting', 'minx', 'minxes', 'miocene', 'mir', 'mira', 'mirabeau', 'mirach', 'miracle', 'miracles', 'mirage', 'mirages', 'miranda', 'mire', 'mired', 'mires', 'mirfak', 'miriam', 'miring', 'miro', 'mirror', 'mirrored', 'mirroring', 'mirrors', 'mirth', 'mirthful', 'mirthless', 'mirzam', 'misapply', 'misbehave', 'miscall', 'miscalled', 'miscalls', 'miscarry', 'miscast', 'miscasts', 'mischance', 'mischief', 'miscount', 'miscounts', 'miscreant', 'miscue', 'miscued', 'miscues', 'miscuing', 'misdeal', 'misdeals', 'misdealt', 'misdeed', 'misdeeds', 'misdid', 'misdirect', 'misdo', 'misdoes', 'misdoing', 'misdoings', 'misdone', 'miser', 'miserable', 'miserably', 'miseries', 'miserly', 'misers', 'misery', 'misfire', 'misfired', 'misfires', 'misfiring', 'misfit', 'misfits', 'misfitted', 'misgiving', 'misgovern', 'misguide', 'misguided', 'misguides', 'mishandle', 'mishap', 'mishaps', 'mishmash', 'misinform', 'misjudge', 'misjudged', 'misjudges', 'miskito', 'mislaid', 'mislay', 'mislaying', 'mislays', 'mislead', 'misleads', 'misled', 'mismanage', 'mismatch', 'misnomer', 'misnomers', 'misogyny', 'misplace', 'misplaced', 'misplaces', 'misplay', 'misplayed', 'misplays', 'misprint', 'misprints', 'misquote', 'misquoted', 'misquotes', 'misread', 'misreads', 'misrule', 'misruled', 'misrules', 'misruling', 'miss', 'missal', 'missals', 'missed', 'misses', 'misshapen', 'missile', 'missilery', 'missiles', 'missing', 'mission', 'missions', 'missive', 'missives', 'missouri', 'misspell', 'misspells', 'misspelt', 'misspend', 'misspends', 'misspent', 'misstate', 'misstated', 'misstates', 'misstep', 'missteps', 'missy', 'mist', 'mistake', 'mistaken', 'mistakes', 'mistaking', 'misted', 'mister', 'misters', 'mistier', 'mistiest', 'mistily', 'mistime', 'mistimed', 'mistimes', 'mistiming', 'mistiness', 'misting', 'mistletoe', 'mistook', 'mistreat', 'mistreats', 'mistress', 'mistrial', 'mistrials', 'mistrust', 'mistrusts', 'mists', 'misty', 'mistype', 'mistypes', 'mistyping', 'misuse', 'misused', 'misuses', 'misusing', 'mit', 'mitch', 'mitchel', 'mitchell', 'mite', 'miter', 'mitered', 'mitering', 'miters', 'mites', 'mitford', 'mithra', 'mitigate', 'mitigated', 'mitigates', 'mitosis', 'mitt', 'mitten', 'mittens', 'mitts', 'mitty', 'mitzi', 'mix', 'mixed', 'mixer', 'mixers', 'mixes', 'mixing', 'mixtec', 'mixture', 'mixtures', 'mizar', 'mizzen', 'mizzens', 'mkay', 'mnemonic', 'mnemonics', 'mnemosyne', 'moan', 'moaned', 'moaning', 'moans', 'moat', 'moats', 'mob', 'mobbed', 'mobbing', 'mobil', 'mobile', 'mobiles', 'mobility', 'mobilize', 'mobilized', 'mobilizes', 'mobs', 'mobster', 'mobsters', 'mobutu', 'moccasin', 'moccasins', 'mocha', 'mochas', 'mock', 'mocked', 'mocker', 'mockeries', 'mockers', 'mockery', 'mocking', 'mockingly', 'mocks', 'mod', 'modal', 'modals', 'mode', 'model', 'modeled', 'modeling', 'modelings', 'modelled', 'modelling', 'modem', 'modems', 'moderate', 'moderated', 'moderates', 'moderator', 'modern', 'modernism', 'modernist', 'modernity', 'modernize', 'moderns', 'modes', 'modest', 'modestly', 'modesto', 'modesty', 'modicum', 'modicums', 'modified', 'modifier', 'modifiers', 'modifies', 'modify', 'modifying', 'modish', 'modishly', 'mods', 'modular', 'modulate', 'modulated', 'modulates', 'modulator', 'module', 'modules', 'modulus', 'moe', 'moet', 'mogadishu', 'mogul', 'moguls', 'mohacs', 'mohair', 'mohamed', 'mohammad', 'mohammed', 'mohawk', 'mohawks', 'mohican', 'mohicans', 'moho', 'moieties', 'moiety', 'moira', 'moire', 'moires', 'moises', 'moiseyev', 'moist', 'moisten', 'moistened', 'moistens', 'moister', 'moistest', 'moistly', 'moistness', 'moisture', 'mojave', 'molar', 'molars', 'molasses', 'mold', 'moldavia', 'molded', 'molder', 'moldered', 'moldering', 'molders', 'moldier', 'moldiest', 'moldiness', 'molding', 'moldings', 'moldova', 'molds', 'moldy', 'mole', 'molecular', 'molecule', 'molecules', 'molehill', 'molehills', 'moles', 'moleskin', 'molest', 'molested', 'molester', 'molesters', 'molesting', 'molests', 'moliere', 'molina', 'moll', 'mollie', 'mollified', 'mollifies', 'mollify', 'molls', 'mollusc', 'molluscs', 'mollusk', 'mollusks', 'molly', 'molnar', 'moloch', 'molokai', 'molotov', 'molt', 'molted', 'molten', 'molting', 'molts', 'moluccas', 'mom', 'mombasa', 'moment', 'momentary', 'momentous', 'moments', 'momentum', 'momma', 'mommas', 'mommies', 'mommy', 'moms', 'mona', 'monaco', 'monarch', 'monarchic', 'monarchs', 'monarchy', 'monastery', 'monastic', 'monastics', 'monaural', 'mondale', 'monday', 'mondays', 'mondrian', 'monera', 'monet', 'monetary', 'monetize', 'monetized', 'monetizes', 'money', 'moneybag', 'moneybags', 'moneyed', 'mongeese', 'monger', 'mongered', 'mongering', 'mongers', 'mongol', 'mongolia', 'mongolian', 'mongolism', 'mongoloid', 'mongols', 'mongoose', 'mongooses', 'mongrel', 'mongrels', 'monica', 'monicker', 'monickers', 'monied', 'monies', 'moniker', 'monikers', 'monique', 'monitor', 'monitored', 'monitors', 'monk', 'monkey', 'monkeyed', 'monkeying', 'monkeys', 'monks', 'monmouth', 'mono', 'monocle', 'monocles', 'monogamy', 'monogram', 'monograms', 'monograph', 'monolith', 'monoliths', 'monolog', 'monologs', 'monologue', 'monomania', 'monopoly', 'monorail', 'monorails', 'monotone', 'monotones', 'monotonic', 'monotony', 'monoxide', 'monoxides', 'monroe', 'monrovia', 'mons', 'monsanto', 'monsieur', 'monsignor', 'monsoon', 'monsoons', 'monster', 'monsters', 'monstrous', 'montage', 'montages', 'montague', 'montaigne', 'montana', 'montanan', 'montanans', 'montcalm', 'monte', 'monterrey', 'montezuma', 'month', 'monthlies', 'monthly', 'months', 'montoya', 'montreal', 'monty', 'monument', 'monuments', 'moo', 'mooch', 'mooched', 'moocher', 'moochers', 'mooches', 'mooching', 'mood', 'moodier', 'moodiest', 'moodily', 'moodiness', 'moods', 'moody', 'mooed', 'moog', 'mooing', 'moon', 'moonbeam', 'moonbeams', 'mooned', 'mooney', 'mooning', 'moonlight', 'moonlit', 'moons', 'moonscape', 'moonshine', 'moonshot', 'moonshots', 'moonstone', 'moor', 'moore', 'moored', 'mooring', 'moorings', 'moorish', 'moorland', 'moors', 'moos', 'moose', 'moot', 'mooted', 'mooting', 'moots', 'mop', 'mope', 'moped', 'mopeds', 'mopes', 'moping', 'mopped', 'moppet', 'moppets', 'mopping', 'mops', 'moraine', 'moraines', 'moral', 'morale', 'morales', 'moralist', 'moralists', 'morality', 'moralize', 'moralized', 'moralizes', 'morally', 'morals', 'moran', 'morass', 'morasses', 'moratoria', 'moravia', 'moravian', 'moray', 'morays', 'morbid', 'morbidity', 'morbidly', 'mordant', 'mordants', 'mordred', 'more', 'moreno', 'moreover', 'mores', 'morgan', 'morgue', 'morgues', 'moriarty', 'moribund', 'morin', 'morison', 'morita', 'morley', 'mormon', 'mormonism', 'mormons', 'morn', 'morning', 'mornings', 'morns', 'moro', 'moroccan', 'moroccans', 'morocco', 'moron', 'moroni', 'moronic', 'morons', 'morose', 'morosely', 'morpheme', 'morphemes', 'morpheus', 'morphine', 'morphy', 'morris', 'morrison', 'morrow', 'morrows', 'morse', 'morsel', 'morsels', 'mort', 'mortal', 'mortality', 'mortally', 'mortals', 'mortar', 'mortared', 'mortaring', 'mortars', 'mortgage', 'mortgaged', 'mortgagee', 'mortgager', 'mortgages', 'mortgagor', 'mortice', 'morticed', 'mortices', 'mortician', 'morticing', 'mortified', 'mortifies', 'mortify', 'mortimer', 'mortise', 'mortised', 'mortises', 'mortising', 'morton', 'mortuary', 'mosaic', 'mosaics', 'moscow', 'moseley', 'moselle', 'moses', 'mosey', 'moseyed', 'moseying', 'moseys', 'moslem', 'moslems', 'mosley', 'mosque', 'mosques', 'mosquito', 'mosquitos', 'moss', 'mosses', 'mossier', 'mossiest', 'mossy', 'most', 'mostly', 'mosul', 'mote', 'motel', 'motels', 'motes', 'moth', 'mothball', 'mothballs', 'mother', 'mothered', 'mothering', 'motherly', 'mothers', 'moths', 'motif', 'motifs', 'motile', 'motiles', 'motility', 'motion', 'motioned', 'motioning', 'motions', 'motivate', 'motivated', 'motivates', 'motivator', 'motive', 'motives', 'motley', 'motleys', 'motlier', 'motliest', 'motocross', 'motor', 'motorbike', 'motorboat', 'motorcade', 'motorcar', 'motorcars', 'motored', 'motoring', 'motorist', 'motorists', 'motorize', 'motorized', 'motorizes', 'motorman', 'motormen', 'motorola', 'motors', 'motorway', 'motorways', 'motown', 'motrin', 'mott', 'mottle', 'mottled', 'mottles', 'mottling', 'motto', 'mottoes', 'mottos', 'mound', 'mounded', 'mounding', 'mounds', 'mount', 'mountain', 'mountains', 'mounted', 'mountie', 'mounties', 'mounting', 'mountings', 'mounts', 'mourn', 'mourned', 'mourner', 'mourners', 'mournful', 'mourning', 'mourns', 'mouse', 'moused', 'mouser', 'mousers', 'mouses', 'mousetrap', 'mousey', 'mousier', 'mousiest', 'mousiness', 'mousing', 'mousse', 'moussed', 'mousses', 'moussing', 'moustache', 'mousy', 'mouth', 'mouthe', 'mouthed', 'mouthful', 'mouthfuls', 'mouthing', 'mouths', 'mouthwash', 'mouton', 'movable', 'movables', 'move', 'moveable', 'moveables', 'moved', 'movement', 'movements', 'mover', 'movers', 'moves', 'movie', 'movies', 'moving', 'movingly', 'mow', 'mowed', 'mower', 'mowers', 'mowgli', 'mowing', 'mown', 'mows', 'mozart', 'mozilla', 'muawiya', 'mubarak', 'much', 'mucilage', 'muck', 'mucked', 'muckier', 'muckiest', 'mucking', 'muckrake', 'muckraked', 'muckraker', 'muckrakes', 'mucks', 'mucky', 'mucous', 'mucus', 'mud', 'muddied', 'muddier', 'muddies', 'muddiest', 'muddiness', 'muddle', 'muddled', 'muddles', 'muddling', 'muddy', 'muddying', 'mudguard', 'mudguards', 'mudslide', 'mudslides', 'mueller', 'muenster', 'muesli', 'muezzin', 'muezzins', 'muff', 'muffed', 'muffin', 'muffing', 'muffins', 'muffle', 'muffled', 'muffler', 'mufflers', 'muffles', 'muffling', 'muffs', 'mufti', 'muftis', 'mug', 'mugabe', 'mugged', 'mugger', 'muggers', 'muggier', 'muggiest', 'mugginess', 'mugging', 'muggings', 'muggle', 'muggles', 'muggy', 'mugs', 'muhammad', 'muir', 'mujib', 'mukluk', 'mukluks', 'mulatto', 'mulattoes', 'mulattos', 'mulberry', 'mulch', 'mulched', 'mulches', 'mulching', 'mulder', 'mule', 'mules', 'muleteer', 'muleteers', 'mulish', 'mulishly', 'mull', 'mullah', 'mullahs', 'mulled', 'mullen', 'muller', 'mullet', 'mullets', 'mulligan', 'mullikan', 'mulling', 'mullins', 'mullion', 'mullions', 'mulls', 'mulroney', 'multan', 'multi', 'multiple', 'multiples', 'multiplex', 'multiply', 'multitude', 'mum', 'mumbai', 'mumble', 'mumbled', 'mumbler', 'mumblers', 'mumbles', 'mumbling', 'mumford', 'mummer', 'mummers', 'mummery', 'mummies', 'mummified', 'mummifies', 'mummify', 'mummy', 'mumps', 'munch', 'munched', 'munches', 'munchies', 'munching', 'mundane', 'mundanely', 'munich', 'municipal', 'munition', 'munitions', 'munoz', 'munro', 'muppet', 'mural', 'muralist', 'muralists', 'murals', 'murasaki', 'murat', 'murchison', 'murder', 'murdered', 'murderer', 'murderers', 'murderess', 'murdering', 'murderous', 'murders', 'murdoch', 'muriel', 'murillo', 'murine', 'murk', 'murkier', 'murkiest', 'murkily', 'murkiness', 'murks', 'murky', 'murmansk', 'murmur', 'murmured', 'murmuring', 'murmurs', 'murphy', 'murray', 'murrow', 'muscat', 'muscatel', 'muscatels', 'muscle', 'muscled', 'muscles', 'muscling', 'muscovite', 'muscovy', 'muscular', 'muse', 'mused', 'muses', 'museum', 'museums', 'mush', 'musharraf', 'mushed', 'mushes', 'mushier', 'mushiest', 'mushiness', 'mushing', 'mushroom', 'mushrooms', 'mushy', 'musial', 'music', 'musical', 'musicale', 'musicales', 'musically', 'musicals', 'musician', 'musicians', 'musing', 'musings', 'musk', 'musket', 'musketeer', 'musketry', 'muskets', 'muskier', 'muskiest', 'muskiness', 'muskmelon', 'muskogee', 'muskrat', 'muskrats', 'musky', 'muslim', 'muslims', 'muslin', 'muss', 'mussed', 'mussel', 'mussels', 'musses', 'mussier', 'mussiest', 'mussing', 'mussolini', 'mussy', 'must', 'mustache', 'mustaches', 'mustang', 'mustangs', 'mustard', 'muster', 'mustered', 'mustering', 'musters', 'mustier', 'mustiest', 'mustiness', 'musts', 'musty', 'mutable', 'mutant', 'mutants', 'mutate', 'mutated', 'mutates', 'mutating', 'mutation', 'mutations', 'mute', 'muted', 'mutely', 'muteness', 'muter', 'mutes', 'mutest', 'mutilate', 'mutilated', 'mutilates', 'mutineer', 'mutineers', 'muting', 'mutinied', 'mutinies', 'mutinous', 'mutiny', 'mutinying', 'mutsuhito', 'mutt', 'mutter', 'muttered', 'muttering', 'mutters', 'mutton', 'mutts', 'mutual', 'mutuality', 'mutually', 'muumuu', 'muumuus', 'muzak', 'muzzle', 'muzzled', 'muzzles', 'muzzling', 'myanmar', 'mycenae', 'mycenaean', 'myers', 'mylar', 'mylars', 'myles', 'myna', 'mynah', 'mynahes', 'mynahs', 'mynas', 'myopia', 'myopic', 'myra', 'myrdal', 'myriad', 'myriads', 'myrna', 'myron', 'myrrh', 'myrtle', 'myrtles', 'myself', 'mysore', 'myspace', 'myst', 'mysteries', 'mystery', 'mystic', 'mystical', 'mysticism', 'mystics', 'mystified', 'mystifies', 'mystify', 'mystique', 'myth', 'mythic', 'mythical', 'mythology', 'myths', 'nab', 'nabbed', 'nabbing', 'nabisco', 'nabob', 'nabobs', 'nabokov', 'nabs', 'nacho', 'nachos', 'nacre', 'nader', 'nadia', 'nadine', 'nadir', 'nadirs', 'nag', 'nagasaki', 'nagged', 'nagging', 'nagoya', 'nagpur', 'nags', 'nagy', 'nahuatl', 'nahum', 'naiad', 'naiades', 'naiads', 'nail', 'nailbrush', 'nailed', 'nailing', 'nails', 'naipaul', 'nair', 'nairobi', 'naismith', 'naive', 'naively', 'naiver', 'naivest', 'naivety', 'naked', 'nakedly', 'nakedness', 'nam', 'namath', 'name', 'named', 'nameless', 'namely', 'names', 'namesake', 'namesakes', 'namibia', 'namibian', 'namibians', 'naming', 'nan', 'nanak', 'nanchang', 'nancy', 'nanette', 'nanjing', 'nanking', 'nankings', 'nannie', 'nannies', 'nanny', 'nanook', 'nansen', 'nantes', 'nantucket', 'naomi', 'nap', 'napalm', 'napalmed', 'napalming', 'napalms', 'nape', 'napes', 'naphtali', 'naphtha', 'napier', 'napkin', 'napkins', 'naples', 'napoleon', 'napped', 'nappier', 'nappies', 'nappiest', 'napping', 'nappy', 'naps', 'napster', 'narc', 'narcissi', 'narcissus', 'narcosis', 'narcotic', 'narcotics', 'narcs', 'nark', 'narked', 'narking', 'narks', 'narmada', 'narnia', 'narrate', 'narrated', 'narrates', 'narrating', 'narration', 'narrative', 'narrator', 'narrators', 'narrow', 'narrowed', 'narrower', 'narrowest', 'narrowing', 'narrowly', 'narrows', 'narwhal', 'narwhals', 'nary', 'nasal', 'nasalize', 'nasalized', 'nasalizes', 'nasally', 'nasals', 'nascar', 'nascent', 'nash', 'nashua', 'nashville', 'nassau', 'nasser', 'nastier', 'nastiest', 'nastily', 'nastiness', 'nasty', 'nat', 'natal', 'natalia', 'natalie', 'natasha', 'natchez', 'nate', 'nathan', 'nathaniel', 'nathans', 'nation', 'national', 'nationals', 'nations', 'natives', 'nativity', 'nattier', 'nattiest', 'nattily', 'natty', 'natural', 'naturally', 'naturals', 'nature', 'natures', 'naugahyde', 'naught', 'naughtier', 'naughtily', 'naughts', 'naughty', 'nauru', 'nausea', 'nauseate', 'nauseated', 'nauseates', 'nauseous', 'nautical', 'nautili', 'nautilus', 'navaho', 'navahoes', 'navahos', 'navajo', 'navajoes', 'navajos', 'naval', 'navarre', 'navarro', 'nave', 'navel', 'navels', 'naves', 'navies', 'navigable', 'navigate', 'navigated', 'navigates', 'navigator', 'navy', 'nay', 'nays', 'naysayer', 'naysayers', 'nazarene', 'nazareth', 'nazca', 'nazi', 'naziism', 'naziisms', 'nazis', 'nazism', 'nazisms', 'ndjamena', 'neal', 'near', 'nearby', 'neared', 'nearer', 'nearest', 'nearing', 'nearly', 'nearness', 'nears', 'neat', 'neater', 'neatest', 'neath', 'neatly', 'neatness', 'nebraska', 'nebraskan', 'nebula', 'nebulae', 'nebular', 'nebulas', 'nebulous', 'necessary', 'necessity', 'neck', 'necked', 'necking', 'necklace', 'necklaces', 'neckline', 'necklines', 'necks', 'necktie', 'neckties', 'necrosis', 'nectar', 'nectarine', 'ned', 'need', 'needed', 'needful', 'needier', 'neediest', 'neediness', 'needing', 'needle', 'needled', 'needles', 'needless', 'needling', 'needs', 'needy', 'nefarious', 'nefertiti', 'negate', 'negated', 'negates', 'negating', 'negation', 'negations', 'negative', 'negatived', 'negatives', 'negev', 'neglect', 'neglected', 'neglects', 'neglig', 'negligee', 'negligees', 'negligent', 'negligs', 'negotiate', 'negro', 'negroes', 'negroid', 'negroids', 'negros', 'nehemiah', 'nehru', 'neigh', 'neighbor', 'neighbors', 'neighed', 'neighing', 'neighs', 'neil', 'neither', 'nelda', 'nell', 'nellie', 'nelly', 'nelsen', 'nelson', 'nematode', 'nematodes', 'nembutal', 'nemeses', 'nemesis', 'neocon', 'neocons', 'neodymium', 'neogene', 'neolithic', 'neologism', 'neon', 'neonatal', 'neonate', 'neonates', 'neophyte', 'neophytes', 'neoprene', 'nepal', 'nepalese', 'nepali', 'nephew', 'nephews', 'nephritis', 'nepotism', 'neptune', 'neptunium', 'nerd', 'nerdier', 'nerdiest', 'nerds', 'nerdy', 'nereid', 'nerf', 'nero', 'neruda', 'nerve', 'nerved', 'nerveless', 'nerves', 'nervier', 'nerviest', 'nerving', 'nervous', 'nervously', 'nervy', 'nescafe', 'nest', 'nested', 'nesting', 'nestle', 'nestled', 'nestles', 'nestling', 'nestlings', 'nestor', 'nestorius', 'nests', 'net', 'netbook', 'netbooks', 'netflix', 'nether', 'nets', 'netscape', 'netted', 'nettie', 'netting', 'nettle', 'nettled', 'nettles', 'nettling', 'network', 'networked', 'networks', 'neural', 'neuralgia', 'neuralgic', 'neuritis', 'neurology', 'neuron', 'neurons', 'neuroses', 'neurosis', 'neurotic', 'neurotics', 'neuter', 'neutered', 'neutering', 'neuters', 'neutral', 'neutrally', 'neutrals', 'neutrino', 'neutrinos', 'neutron', 'neutrons', 'neva', 'nevada', 'nevadan', 'nevadans', 'never', 'nevermore', 'nevis', 'nevsky', 'newark', 'newbie', 'newbies', 'newborn', 'newborns', 'newcastle', 'newcomer', 'newcomers', 'newel', 'newels', 'newer', 'newest', 'newly', 'newlywed', 'newlyweds', 'newman', 'newness', 'newport', 'news', 'newsboy', 'newsboys', 'newscast', 'newscasts', 'newsflash', 'newsier', 'newsiest', 'newsman', 'newsmen', 'newspaper', 'newsprint', 'newsreel', 'newsreels', 'newsstand', 'newsweek', 'newsy', 'newt', 'newton', 'newtonian', 'newtons', 'newts', 'nexis', 'next', 'nexus', 'nexuses', 'ngaliema', 'nguyen', 'niacin', 'niagara', 'niamey', 'nib', 'nibble', 'nibbled', 'nibbler', 'nibblers', 'nibbles', 'nibbling', 'nibelung', 'nibs', 'nicaea', 'nicaragua', 'niccolo', 'nice', 'nicely', 'nicene', 'niceness', 'nicer', 'nicest', 'niceties', 'nicety', 'niche', 'niches', 'nichiren', 'nicholas', 'nichole', 'nichols', 'nicholson', 'nick', 'nicked', 'nickel', 'nickels', 'nicking', 'nicklaus', 'nicknack', 'nicknacks', 'nickname', 'nicknamed', 'nicknames', 'nickolas', 'nicks', 'nicobar', 'nicodemus', 'nicola', 'nicolas', 'nicole', 'nicosia', 'nicotine', 'niebuhr', 'niece', 'nieces', 'nielsen', 'nietzsche', 'nieves', 'niftier', 'niftiest', 'nifty', 'nigel', 'niger', 'nigeria', 'nigerian', 'nigerians', 'nigga', 'niggard', 'niggardly', 'niggards', 'niggas', 'niggaz', 'nigger', 'niggers', 'niggle', 'niggled', 'niggles', 'niggling', 'nigh', 'nigher', 'nighest', 'night', 'nightcap', 'nightcaps', 'nightclub', 'nightfall', 'nightgown', 'nighthawk', 'nightie', 'nighties', 'nightlife', 'nightly', 'nightmare', 'nights', 'nighttime', 'nighty', 'nihilism', 'nihilist', 'nihilists', 'nijinsky', 'nike', 'nikita', 'nikkei', 'nikki', 'nikolai', 'nikolayev', 'nikon', 'nil', 'nile', 'nimbi', 'nimble', 'nimbler', 'nimblest', 'nimbly', 'nimbus', 'nimbuses', 'nimitz', 'nimrod', 'nina', 'nine', 'ninepin', 'ninepins', 'nines', 'nineteen', 'nineteens', 'nineties', 'ninetieth', 'ninety', 'nineveh', 'ninja', 'ninjas', 'ninnies', 'ninny', 'nintendo', 'ninth', 'ninths', 'niobe', 'nip', 'nipped', 'nipper', 'nippers', 'nippier', 'nippiest', 'nipping', 'nipple', 'nipples', 'nippon', 'nippy', 'nips', 'nirenberg', 'nirvana', 'nisan', 'nisei', 'nissan', 'nit', 'nita', 'nite', 'niter', 'nites', 'nitpick', 'nitpicked', 'nitpicker', 'nitpicks', 'nitrate', 'nitrated', 'nitrates', 'nitrating', 'nitrogen', 'nits', 'nitwit', 'nitwits', 'nivea', 'nix', 'nixed', 'nixes', 'nixing', 'nixon', 'nkrumah', 'noah', 'nobel', 'nobelist', 'nobelists', 'nobility', 'noble', 'nobleman', 'noblemen', 'nobleness', 'nobler', 'nobles', 'noblest', 'nobly', 'nobodies', 'nobody', 'nocturnal', 'nocturne', 'nocturnes', 'nod', 'nodal', 'nodded', 'nodding', 'noddy', 'node', 'nodes', 'nodoz', 'nods', 'nodular', 'nodule', 'nodules', 'noe', 'noel', 'noelle', 'noels', 'noemi', 'noes', 'noggin', 'noggins', 'noh', 'noise', 'noised', 'noiseless', 'noises', 'noisier', 'noisiest', 'noisily', 'noisiness', 'noising', 'noisome', 'noisy', 'nokia', 'nola', 'nolan', 'nomad', 'nomadic', 'nomads', 'nome', 'nominal', 'nominally', 'nominate', 'nominated', 'nominates', 'nominee', 'nominees', 'non', 'nona', 'nonce', 'noncom', 'noncoms', 'nondairy', 'none', 'nonempty', 'nonentity', 'nonesuch', 'nonevent', 'nonevents', 'nonexempt', 'nonfat', 'nonfatal', 'nonhuman', 'nonliving', 'nonmember', 'nonpareil', 'nonplus', 'nonplused', 'nonpluses', 'nonprofit', 'nonrigid', 'nonsense', 'nonsexist', 'nonskid', 'nonsmoker', 'nonstick', 'nonstop', 'nontoxic', 'nonunion', 'nonuser', 'nonusers', 'nonverbal', 'nonvoting', 'nonwhite', 'nonwhites', 'nonzero', 'noodle', 'noodled', 'noodles', 'noodling', 'nook', 'nooks', 'noon', 'noonday', 'noontime', 'noose', 'nooses', 'nootka', 'nope', 'nor', 'nora', 'norad', 'norbert', 'norberto', 'nordic', 'nordics', 'noreen', 'norfolk', 'noriega', 'norm', 'norma', 'normal', 'normalcy', 'normality', 'normalize', 'normally', 'norman', 'normand', 'normandy', 'normans', 'normative', 'norms', 'norplant', 'norris', 'norse', 'norseman', 'norsemen', 'north', 'northeast', 'northerly', 'northern', 'northrop', 'northrup', 'norths', 'northward', 'northwest', 'norton', 'norway', 'norwegian', 'norwich', 'nose', 'nosebleed', 'nosed', 'nosedive', 'nosedived', 'nosedives', 'nosedove', 'nosegay', 'nosegays', 'noses', 'nosey', 'nosferatu', 'nosh', 'noshed', 'noshes', 'noshing', 'nosier', 'nosiest', 'nosiness', 'nosing', 'nostalgia', 'nostalgic', 'nostril', 'nostrils', 'nostrum', 'nostrums', 'nosy', 'notable', 'notables', 'notably', 'notaries', 'notarize', 'notarized', 'notarizes', 'notary', 'notation', 'notations', 'notch', 'notched', 'notches', 'notching', 'note', 'notebook', 'notebooks', 'noted', 'notepad', 'notepaper', 'notes', 'nothing', 'nothings', 'notice', 'noticed', 'notices', 'noticing', 'notified', 'notifies', 'notifying', 'noting', 'notion', 'notional', 'notions', 'notoriety', 'notorious', 'nougat', 'nougats', 'nought', 'noughts', 'noumea', 'noun', 'nouns', 'nourish', 'nourished', 'nourishes', 'nous', 'nova', 'novae', 'novartis', 'novas', 'novel', 'novelette', 'novelist', 'novelists', 'novella', 'novellas', 'novelle', 'novels', 'novelties', 'novelty', 'november', 'novembers', 'novgorod', 'novice', 'novices', 'novitiate', 'novocain', 'novocaine', 'now', 'nowadays', 'noway', 'nowhere', 'nowise', 'noxious', 'noxzema', 'noyce', 'noyes', 'nozzle', 'nozzles', 'nsa', 'nth', 'nuance', 'nuanced', 'nuances', 'nub', 'nubia', 'nubian', 'nubile', 'nubs', 'nuclear', 'nuclei', 'nucleic', 'nucleus', 'nucleuses', 'nude', 'nuder', 'nudes', 'nudest', 'nudge', 'nudged', 'nudges', 'nudging', 'nudism', 'nudist', 'nudists', 'nudity', 'nugget', 'nuggets', 'nuisance', 'nuisances', 'nuke', 'nuked', 'nukes', 'nuking', 'nukualofa', 'nullified', 'nullifies', 'nullify', 'nullity', 'nulls', 'numb', 'numbed', 'numbered', 'numbering', 'numbers', 'numbest', 'numbing', 'numbly', 'numbness', 'numbs', 'numbskull', 'numeracy', 'numeral', 'numerals', 'numerate', 'numerated', 'numerates', 'numerator', 'numeric', 'numerical', 'numerous', 'numskull', 'numskulls', 'nun', 'nunavut', 'nuncio', 'nuncios', 'nunez', 'nunki', 'nunneries', 'nunnery', 'nuns', 'nuptial', 'nuptials', 'nuremberg', 'nureyev', 'nurse', 'nursed', 'nursemaid', 'nurseries', 'nursery', 'nurses', 'nursing', 'nurture', 'nurtured', 'nurtures', 'nurturing', 'nut', 'nuthatch', 'nutmeat', 'nutmeats', 'nutmeg', 'nutmegs', 'nutria', 'nutrias', 'nutrient', 'nutrients', 'nutriment', 'nutrition', 'nutritive', 'nuts', 'nutshell', 'nutshells', 'nutted', 'nuttier', 'nuttiest', 'nuttiness', 'nutting', 'nutty', 'nuzzle', 'nuzzled', 'nuzzles', 'nuzzling', 'nyasa', 'nyerere', 'nylon', 'nylons', 'nymph', 'nymphs', 'nyquil', 'oaf', 'oafish', 'oafs', 'oahu', 'oak', 'oaken', 'oakland', 'oakley', 'oaks', 'oakum', 'oar', 'oared', 'oaring', 'oarlock', 'oarlocks', 'oars', 'oarsman', 'oarsmen', 'oases', 'oasis', 'oat', 'oaten', 'oates', 'oath', 'oaths', 'oatmeal', 'oats', 'oaxaca', 'obadiah', 'obama', 'obamacare', 'obduracy', 'obdurate', 'obedience', 'obedient', 'obeisance', 'obeisant', 'obelisk', 'obelisks', 'oberlin', 'oberon', 'obese', 'obesity', 'obey', 'obeyed', 'obeying', 'obeys', 'obfuscate', 'obit', 'obits', 'obituary', 'objected', 'objecting', 'objection', 'objective', 'objector', 'objectors', 'objects', 'oblate', 'oblation', 'oblations', 'obligate', 'obligated', 'obligates', 'oblige', 'obliged', 'obliges', 'obliging', 'oblique', 'obliquely', 'obliques', 'oblivion', 'oblivious', 'oblong', 'oblongs', 'obloquy', 'obnoxious', 'oboe', 'oboes', 'oboist', 'oboists', 'obscene', 'obscenely', 'obscener', 'obscenest', 'obscenity', 'obscure', 'obscured', 'obscurely', 'obscurer', 'obscures', 'obscurest', 'obscuring', 'obscurity', 'obsequies', 'obsequy', 'observant', 'observe', 'observed', 'observer', 'observers', 'observes', 'observing', 'obsess', 'obsessed', 'obsesses', 'obsessing', 'obsession', 'obsessive', 'obsidian', 'obsolete', 'obsoleted', 'obsoletes', 'obstacle', 'obstacles', 'obstetric', 'obstinacy', 'obstinate', 'obstruct', 'obstructs', 'obtain', 'obtained', 'obtaining', 'obtains', 'obtrude', 'obtruded', 'obtrudes', 'obtruding', 'obtrusive', 'obtuse', 'obtusely', 'obtuser', 'obtusest', 'obverse', 'obverses', 'obviate', 'obviated', 'obviates', 'obviating', 'obvious', 'obviously', 'ocarina', 'ocarinas', 'occam', 'occasion', 'occasions', 'occident', 'occlude', 'occluded', 'occludes', 'occluding', 'occlusion', 'occlusive', 'occult', 'occupancy', 'occupant', 'occupants', 'occupied', 'occupies', 'occupy', 'occupying', 'occur', 'occurred', 'occurring', 'occurs', 'ocean', 'oceania', 'oceanic', 'oceans', 'oceanus', 'ocelot', 'ocelots', 'ocher', 'ochoa', 'ochre', 'oct', 'octagon', 'octagonal', 'octagons', 'octal', 'octane', 'octave', 'octaves', 'octavia', 'octavio', 'octet', 'octets', 'octette', 'octettes', 'october', 'octobers', 'octopi', 'octopus', 'octopuses', 'ocular', 'oculars', 'oculist', 'oculists', 'odd', 'oddball', 'oddballs', 'odder', 'oddest', 'oddities', 'oddity', 'oddly', 'oddness', 'odds', 'ode', 'odell', 'oder', 'odes', 'odessa', 'odets', 'odin', 'odious', 'odiously', 'odis', 'odium', 'odom', 'odometer', 'odometers', 'odor', 'odorless', 'odorous', 'odors', 'odysseus', 'odyssey', 'odysseys', 'oedipal', 'oedipus', 'oersted', 'ofelia', 'off', 'offal', 'offbeat', 'offbeats', 'offed', 'offenbach', 'offend', 'offended', 'offender', 'offenders', 'offending', 'offends', 'offense', 'offenses', 'offensive', 'offer', 'offered', 'offering', 'offerings', 'offers', 'offertory', 'offhand', 'office', 'officemax', 'officer', 'officers', 'offices', 'official', 'officials', 'officiate', 'officious', 'offing', 'offings', 'offload', 'offloaded', 'offloads', 'offs', 'offset', 'offsets', 'offshoot', 'offshoots', 'offshore', 'offside', 'offspring', 'offstage', 'offstages', 'oft', 'often', 'oftener', 'oftenest', 'ogbomosho', 'ogden', 'ogilvy', 'ogle', 'ogled', 'ogles', 'ogling', 'ogre', 'ogres', 'ohio', 'ohioan', 'ohioans', 'ohm', 'ohms', 'oho', 'ohs', 'ohsa', 'oil', 'oilcloth', 'oilcloths', 'oiled', 'oilfield', 'oilfields', 'oilier', 'oiliest', 'oiliness', 'oiling', 'oils', 'oilskin', 'oily', 'oink', 'oinked', 'oinking', 'oinks', 'ointment', 'ointments', 'oise', 'ojibwa', 'ojibwas', 'okay', 'okayed', 'okaying', 'okays', 'oked', 'okhotsk', 'okinawa', 'oking', 'oklahoma', 'oklahoman', 'okra', 'okras', 'oks', 'ola', 'olaf', 'olajuwon', 'olav', 'old', 'olden', 'oldenburg', 'older', 'oldest', 'oldfield', 'oldie', 'oldies', 'olduvai', 'oleander', 'oleanders', 'olen', 'olenek', 'oleo', 'olfactory', 'olga', 'oligarch', 'oligarchs', 'oligarchy', 'oligocene', 'olin', 'olive', 'oliver', 'olives', 'olivetti', 'olivia', 'olivier', 'ollie', 'olmec', 'olmsted', 'olsen', 'olson', 'olympia', 'olympiad', 'olympiads', 'olympian', 'olympians', 'olympias', 'olympic', 'olympics', 'olympus', 'omaha', 'omahas', 'oman', 'omar', 'omayyad', 'ombudsman', 'ombudsmen', 'omdurman', 'omega', 'omegas', 'omelet', 'omelets', 'omelette', 'omelettes', 'omen', 'omens', 'ominous', 'ominously', 'omission', 'omissions', 'omit', 'omits', 'omitted', 'omitting', 'omnibus', 'omnibuses', 'omnivore', 'omnivores', 'omsk', 'onassis', 'once', 'oncology', 'oncoming', 'one', 'oneal', 'onega', 'onegin', 'oneida', 'oneness', 'onerous', 'ones', 'oneself', 'onetime', 'ongoing', 'onion', 'onions', 'onionskin', 'online', 'onlooker', 'onlookers', 'only', 'ono', 'onondaga', 'onrush', 'onrushes', 'onrushing', 'onsager', 'onset', 'onsets', 'onshore', 'onslaught', 'ontario', 'onto', 'onus', 'onuses', 'onward', 'onwards', 'onyx', 'onyxes', 'oodles', 'oops', 'oort', 'ooze', 'oozed', 'oozes', 'oozing', 'opacity', 'opal', 'opals', 'opaque', 'opaqued', 'opaquely', 'opaquer', 'opaques', 'opaquest', 'opaquing', 'opel', 'opened', 'opener', 'openers', 'openest', 'opening', 'openings', 'openly', 'openness', 'opens', 'openwork', 'opera', 'operable', 'operand', 'operands', 'operas', 'operate', 'operated', 'operates', 'operatic', 'operating', 'operation', 'operative', 'operators', 'operetta', 'operettas', 'ophelia', 'ophiuchus', 'opiate', 'opiates', 'opine', 'opined', 'opines', 'opining', 'opinion', 'opinions', 'opium', 'opossum', 'opossums', 'opponent', 'opponents', 'opportune', 'oppose', 'opposed', 'opposes', 'opposing', 'opposite', 'opposites', 'oppress', 'oppressed', 'oppresses', 'oppressor', 'oprah', 'opt', 'opted', 'optic', 'optical', 'optically', 'optician', 'opticians', 'optics', 'optima', 'optimal', 'optimism', 'optimist', 'optimists', 'optimize', 'optimized', 'optimizer', 'optimizes', 'optimum', 'optimums', 'opting', 'option', 'optional', 'optioned', 'optioning', 'options', 'optometry', 'opts', 'opulence', 'opulent', 'opus', 'opuses', 'ora', 'oracle', 'oracles', 'oracular', 'oral', 'orally', 'orals', 'oran', 'orange', 'orangeade', 'oranges', 'orangutan', 'orate', 'orated', 'orates', 'orating', 'oration', 'orations', 'orator', 'oratories', 'oratorio', 'oratorios', 'orators', 'oratory', 'orb', 'orbison', 'orbit', 'orbital', 'orbitals', 'orbited', 'orbiting', 'orbits', 'orbs', 'orc', 'orchard', 'orchards', 'orchestra', 'orchid', 'orchids', 'orcs', 'ordain', 'ordained', 'ordaining', 'ordains', 'ordeal', 'ordeals', 'order', 'ordered', 'ordering', 'orderings', 'orderlies', 'orderly', 'orders', 'ordinal', 'ordinals', 'ordinance', 'ordinary', 'ordnance', 'ordure', 'ore', 'oregano', 'oregon', 'oregonian', 'oreo', 'ores', 'orestes', 'organ', 'organdie', 'organdy', 'organelle', 'organic', 'organics', 'organism', 'organisms', 'organist', 'organists', 'organize', 'organized', 'organizer', 'organizes', 'organs', 'orgasm', 'orgasmic', 'orgasms', 'orgiastic', 'orgies', 'orgy', 'orient', 'oriental', 'orientals', 'orientate', 'oriented', 'orienting', 'orients', 'orifice', 'orifices', 'origami', 'origin', 'original', 'originals', 'originate', 'origins', 'orin', 'orinoco', 'oriole', 'orioles', 'orion', 'oriya', 'orizaba', 'orkney', 'orlando', 'orleans', 'orlon', 'orlons', 'orly', 'ormolu', 'ornament', 'ornaments', 'ornate', 'ornately', 'ornerier', 'orneriest', 'ornery', 'orotund', 'orphan', 'orphanage', 'orphaned', 'orphaning', 'orphans', 'orpheus', 'orphic', 'orr', 'ortega', 'orthodox', 'orthodoxy', 'ortiz', 'orval', 'orville', 'orwell', 'orwellian', 'osage', 'osaka', 'osbert', 'osborn', 'osborne', 'oscar', 'oscars', 'osceola', 'oscillate', 'osgood', 'oshawa', 'oshkosh', 'osier', 'osiers', 'osiris', 'oslo', 'osman', 'osmosis', 'osmotic', 'osprey', 'ospreys', 'ossified', 'ossifies', 'ossify', 'ossifying', 'osteopath', 'ostracism', 'ostracize', 'ostrich', 'ostriches', 'ostrogoth', 'ostwald', 'osvaldo', 'oswald', 'othello', 'other', 'others', 'otherwise', 'otiose', 'otis', 'ottawa', 'ottawas', 'otter', 'otters', 'otto', 'ottoman', 'ottomans', 'ouch', 'ought', 'ouija', 'ounce', 'ounces', 'our', 'ours', 'ourselves', 'oust', 'ousted', 'ouster', 'ousters', 'ousting', 'ousts', 'outage', 'outages', 'outback', 'outbacks', 'outbid', 'outbids', 'outbound', 'outbreak', 'outbreaks', 'outburst', 'outbursts', 'outcast', 'outcasts', 'outclass', 'outcome', 'outcomes', 'outcries', 'outcrop', 'outcrops', 'outcry', 'outdated', 'outdid', 'outdo', 'outdoes', 'outdoing', 'outdone', 'outdoor', 'outdoors', 'outed', 'outer', 'outermost', 'outfield', 'outfields', 'outfit', 'outfits', 'outfitted', 'outfitter', 'outflank', 'outflanks', 'outfox', 'outfoxed', 'outfoxes', 'outfoxing', 'outgo', 'outgoes', 'outgoing', 'outgrew', 'outgrow', 'outgrown', 'outgrows', 'outgrowth', 'outhouse', 'outhouses', 'outing', 'outings', 'outlaid', 'outlast', 'outlasted', 'outlasts', 'outlaw', 'outlawed', 'outlawing', 'outlaws', 'outlay', 'outlaying', 'outlays', 'outlet', 'outlets', 'outline', 'outlined', 'outlines', 'outlining', 'outlive', 'outlived', 'outlives', 'outliving', 'outlook', 'outlooks', 'outlying', 'outmoded', 'outnumber', 'outplay', 'outplayed', 'outplays', 'outpost', 'outposts', 'output', 'outputs', 'outputted', 'outrage', 'outraged', 'outrages', 'outraging', 'outran', 'outrank', 'outranked', 'outranks', 'outreach', 'outrider', 'outriders', 'outrigger', 'outright', 'outrun', 'outruns', 'outs', 'outsell', 'outsells', 'outset', 'outsets', 'outshine', 'outshined', 'outshines', 'outshone', 'outside', 'outsider', 'outsiders', 'outsides', 'outsize', 'outsized', 'outsizes', 'outskirt', 'outskirts', 'outsmart', 'outsmarts', 'outsold', 'outsource', 'outspoken', 'outspread', 'outstay', 'outstayed', 'outstays', 'outstrip', 'outstrips', 'outstript', 'outtake', 'outtakes', 'outvote', 'outvoted', 'outvotes', 'outvoting', 'outward', 'outwardly', 'outwards', 'outwear', 'outwears', 'outweigh', 'outweighs', 'outwit', 'outwits', 'outwitted', 'outwore', 'outworn', 'ova', 'oval', 'ovals', 'ovarian', 'ovaries', 'ovary', 'ovation', 'ovations', 'oven', 'ovens', 'over', 'overact', 'overacted', 'overacts', 'overage', 'overages', 'overall', 'overalls', 'overate', 'overawe', 'overawed', 'overawes', 'overawing', 'overbear', 'overbears', 'overbite', 'overbites', 'overblown', 'overboard', 'overbook', 'overbooks', 'overbore', 'overborne', 'overcame', 'overcast', 'overcasts', 'overcoat', 'overcoats', 'overcome', 'overcomes', 'overcook', 'overcooks', 'overcrowd', 'overdid', 'overdo', 'overdoes', 'overdoing', 'overdone', 'overdose', 'overdosed', 'overdoses', 'overdraft', 'overdraw', 'overdrawn', 'overdraws', 'overdress', 'overdrew', 'overdrive', 'overdue', 'overeager', 'overeat', 'overeaten', 'overeats', 'overflow', 'overflows', 'overfull', 'overgrew', 'overgrow', 'overgrown', 'overgrows', 'overhand', 'overhands', 'overhang', 'overhangs', 'overhaul', 'overhauls', 'overhead', 'overheads', 'overhear', 'overheard', 'overhears', 'overheat', 'overheats', 'overhung', 'overjoy', 'overjoyed', 'overjoys', 'overkill', 'overlaid', 'overlain', 'overland', 'overlap', 'overlaps', 'overlay', 'overlays', 'overlie', 'overlies', 'overload', 'overloads', 'overlong', 'overlook', 'overlooks', 'overlord', 'overlords', 'overly', 'overlying', 'overmuch', 'overnight', 'overpaid', 'overpass', 'overpay', 'overpays', 'overplay', 'overplays', 'overpower', 'overprice', 'overprint', 'overran', 'overrate', 'overrated', 'overrates', 'overreach', 'overreact', 'overrides', 'overripe', 'overrode', 'overrule', 'overruled', 'overrules', 'overrun', 'overruns', 'overs', 'oversaw', 'overseas', 'oversee', 'overseen', 'overseer', 'overseers', 'oversees', 'oversell', 'oversells', 'oversexed', 'overshare', 'overshoe', 'overshoes', 'overshoot', 'overshot', 'oversight', 'oversize', 'oversized', 'oversleep', 'overslept', 'oversold', 'overspend', 'overspent', 'overspill', 'overstate', 'overstay', 'overstays', 'overstep', 'oversteps', 'overstock', 'overt', 'overtake', 'overtaken', 'overtakes', 'overtax', 'overtaxed', 'overtaxes', 'overthink', 'overthrew', 'overthrow', 'overtime', 'overtimes', 'overtly', 'overtone', 'overtones', 'overtook', 'overture', 'overtures', 'overturn', 'overturns', 'overuse', 'overused', 'overuses', 'overusing', 'overview', 'overviews', 'overwhelm', 'overwork', 'overworks', 'overwrite', 'ovid', 'oviduct', 'oviducts', 'oviparous', 'ovoid', 'ovoids', 'ovulate', 'ovulated', 'ovulates', 'ovulating', 'ovulation', 'ovule', 'ovules', 'ovum', 'owe', 'owed', 'owen', 'owens', 'owes', 'owing', 'owl', 'owlet', 'owlets', 'owlish', 'owls', 'own', 'owned', 'owner', 'owners', 'ownership', 'owning', 'owns', 'oxbow', 'oxbows', 'oxen', 'oxford', 'oxfords', 'oxidation', 'oxide', 'oxides', 'oxidize', 'oxidized', 'oxidizer', 'oxidizers', 'oxidizes', 'oxidizing', 'oxnard', 'oxonian', 'oxus', 'oxycontin', 'oxygen', 'oxygenate', 'oxymora', 'oxymoron', 'oxymorons', 'oyster', 'oysters', 'ozark', 'ozarks', 'ozone', 'ozzie', 'paar', 'pablo', 'pablum', 'pabst', 'pace', 'paced', 'pacemaker', 'paces', 'pacheco', 'pachyderm', 'pacific', 'pacified', 'pacifier', 'pacifiers', 'pacifies', 'pacifism', 'pacifist', 'pacifists', 'pacify', 'pacifying', 'pacing', 'pacino', 'pack', 'packaged', 'packages', 'packaging', 'packard', 'packed', 'packer', 'packers', 'packet', 'packets', 'packing', 'packs', 'pact', 'pacts', 'pad', 'padded', 'paddies', 'padding', 'paddle', 'paddled', 'paddles', 'paddling', 'paddock', 'paddocked', 'paddocks', 'paddy', 'padilla', 'padlock', 'padlocked', 'padlocks', 'padre', 'padres', 'pads', 'paean', 'paeans', 'pagan', 'paganini', 'paganism', 'pagans', 'page', 'pageant', 'pageantry', 'pageants', 'paged', 'pager', 'pagers', 'pages', 'paginate', 'paginated', 'paginates', 'paging', 'paglia', 'pagoda', 'pagodas', 'pahlavi', 'paid', 'paige', 'pail', 'pailful', 'pailfuls', 'pails', 'pailsful', 'pain', 'paine', 'pained', 'painful', 'painfully', 'paining', 'painless', 'pains', 'paint', 'painted', 'painter', 'painters', 'painting', 'paintings', 'paints', 'paintwork', 'pair', 'paired', 'pairing', 'pairs', 'pairwise', 'paisley', 'paisleys', 'pajamas', 'pakistan', 'pakistani', 'pal', 'palace', 'palaces', 'palatable', 'palatal', 'palatals', 'palate', 'palates', 'palatial', 'palau', 'palaver', 'palavered', 'palavers', 'palazzi', 'palazzo', 'pale', 'paled', 'paleface', 'palefaces', 'palembang', 'paleness', 'paleocene', 'paleogene', 'paleozoic', 'paler', 'palermo', 'pales', 'palest', 'palestine', 'palette', 'palettes', 'paley', 'palikir', 'palimony', 'paling', 'palings', 'palisade', 'palisades', 'pall', 'palladio', 'palladium', 'palled', 'pallet', 'pallets', 'palliate', 'palliated', 'palliates', 'pallid', 'palling', 'pallor', 'palls', 'palm', 'palmed', 'palmer', 'palmetto', 'palmettos', 'palmier', 'palmiest', 'palming', 'palmist', 'palmistry', 'palmists', 'palmolive', 'palms', 'palmy', 'palmyra', 'palomar', 'palomino', 'palominos', 'palpable', 'palpably', 'palpate', 'palpated', 'palpates', 'palpating', 'palpation', 'palpitate', 'pals', 'palsied', 'palsies', 'palsy', 'palsying', 'paltrier', 'paltriest', 'paltry', 'pam', 'pamela', 'pamirs', 'pampas', 'pamper', 'pampered', 'pampering', 'pampers', 'pamphlet', 'pamphlets', 'pan', 'panacea', 'panaceas', 'panache', 'panama', 'panamas', 'panasonic', 'pancake', 'pancaked', 'pancakes', 'pancaking', 'pancreas', 'panda', 'pandas', 'pandemic', 'pandemics', 'pander', 'pandered', 'panderer', 'panderers', 'pandering', 'panders', 'pandora', 'pane', 'panegyric', 'panel', 'paneled', 'paneling', 'panelings', 'panelist', 'panelists', 'panelled', 'panelling', 'panels', 'panes', 'pang', 'pangaea', 'pangs', 'panhandle', 'panic', 'panicked', 'panicking', 'panicky', 'panics', 'panier', 'paniers', 'pankhurst', 'panmunjom', 'panned', 'pannier', 'panniers', 'panning', 'panoplies', 'panoply', 'panorama', 'panoramas', 'panoramic', 'pans', 'pansies', 'pansy', 'pant', 'pantaloon', 'panted', 'pantheism', 'pantheist', 'pantheon', 'pantheons', 'panther', 'panthers', 'pantie', 'panties', 'panting', 'pantomime', 'pantries', 'pantry', 'pants', 'pantsuit', 'pantsuits', 'panty', 'pantyhose', 'panza', 'pap', 'papa', 'papacies', 'papacy', 'papal', 'papas', 'papaw', 'papaws', 'papaya', 'papayas', 'paper', 'paperback', 'paperboy', 'paperboys', 'papered', 'papergirl', 'papering', 'papers', 'paperwork', 'papery', 'papilla', 'papillae', 'papoose', 'papooses', 'paprika', 'paps', 'papyri', 'papyrus', 'papyruses', 'par', 'parable', 'parables', 'parabola', 'parabolas', 'parabolic', 'parachute', 'paraclete', 'parade', 'paraded', 'parades', 'paradigm', 'paradigms', 'parading', 'paradise', 'paradises', 'paradox', 'paradoxes', 'paraffin', 'paragon', 'paragons', 'paragraph', 'paraguay', 'parakeet', 'parakeets', 'paralegal', 'parallax', 'parallel', 'parallels', 'paralyses', 'paralysis', 'paralytic', 'paralyze', 'paralyzed', 'paralyzes', 'paramecia', 'paramedic', 'parameter', 'paramount', 'paramour', 'paramours', 'paranoia', 'paranoid', 'paranoids', 'parapet', 'parapets', 'parasite', 'parasites', 'parasitic', 'parasol', 'parasols', 'parboil', 'parboiled', 'parboils', 'parcel', 'parceled', 'parceling', 'parcelled', 'parcels', 'parch', 'parched', 'parcheesi', 'parches', 'parching', 'parchment', 'pardon', 'pardoned', 'pardoning', 'pardons', 'pare', 'pared', 'parent', 'parentage', 'parental', 'parented', 'parenting', 'parents', 'pares', 'pareto', 'parfait', 'parfaits', 'pariah', 'pariahs', 'paring', 'parings', 'paris', 'parish', 'parishes', 'parisian', 'parisians', 'parity', 'park', 'parka', 'parkas', 'parked', 'parker', 'parking', 'parkinson', 'parkman', 'parkour', 'parks', 'parkway', 'parkways', 'parlance', 'parlay', 'parlayed', 'parlaying', 'parlays', 'parley', 'parleyed', 'parleying', 'parleys', 'parlor', 'parlors', 'parmesan', 'parmesans', 'parnassus', 'parnell', 'parochial', 'parodied', 'parodies', 'parody', 'parodying', 'parole', 'paroled', 'parolee', 'parolees', 'paroles', 'paroling', 'paroxysm', 'paroxysms', 'parquet', 'parqueted', 'parquetry', 'parquets', 'parr', 'parrakeet', 'parred', 'parricide', 'parried', 'parries', 'parring', 'parrish', 'parrot', 'parroted', 'parroting', 'parrots', 'parry', 'parrying', 'pars', 'parse', 'parsec', 'parsecs', 'parsed', 'parser', 'parses', 'parsi', 'parsifal', 'parsimony', 'parsing', 'parsley', 'parsnip', 'parsnips', 'parson', 'parsonage', 'parsons', 'part', 'partake', 'partaken', 'partaker', 'partakers', 'partakes', 'partaking', 'parted', 'parterre', 'parterres', 'parthenon', 'parthia', 'partial', 'partially', 'partials', 'particle', 'particles', 'partied', 'parties', 'parting', 'partings', 'partisan', 'partisans', 'partition', 'partizan', 'partizans', 'partly', 'partner', 'partnered', 'partners', 'partook', 'partridge', 'parts', 'partway', 'party', 'partying', 'parvenu', 'parvenus', 'pas', 'pasadena', 'pascal', 'paschal', 'pasha', 'pashas', 'pasquale', 'passable', 'passably', 'passage', 'passages', 'passbook', 'passbooks', 'passed', 'passel', 'passels', 'passenger', 'passer', 'passerby', 'passersby', 'passes', 'passing', 'passion', 'passions', 'passive', 'passively', 'passives', 'passivity', 'passkey', 'passkeys', 'passover', 'passovers', 'passport', 'passports', 'password', 'passwords', 'past', 'pasta', 'pastas', 'paste', 'pasted', 'pastel', 'pastels', 'pastern', 'pasternak', 'pasterns', 'pastes', 'pasteur', 'pastiche', 'pastiches', 'pastier', 'pasties', 'pastiest', 'pastime', 'pastimes', 'pasting', 'pastor', 'pastoral', 'pastorals', 'pastorate', 'pastors', 'pastrami', 'pastries', 'pastry', 'pasts', 'pasturage', 'pasture', 'pastured', 'pastures', 'pasturing', 'pasty', 'pat', 'patagonia', 'patch', 'patched', 'patches', 'patchier', 'patchiest', 'patching', 'patchwork', 'patchy', 'pate', 'patel', 'patella', 'patellae', 'patellas', 'patent', 'patented', 'patenting', 'patently', 'patents', 'paternal', 'paternity', 'paterson', 'pates', 'path', 'pathetic', 'pathogen', 'pathogens', 'pathology', 'pathos', 'paths', 'pathway', 'pathways', 'patience', 'patient', 'patienter', 'patiently', 'patients', 'patina', 'patinae', 'patinas', 'patine', 'patio', 'patios', 'patna', 'patois', 'patriarch', 'patrica', 'patrice', 'patricia', 'patrician', 'patricide', 'patrick', 'patrimony', 'patriot', 'patriotic', 'patriots', 'patrol', 'patrolled', 'patrolman', 'patrolmen', 'patrols', 'patron', 'patronage', 'patronize', 'patrons', 'pats', 'patsies', 'patsy', 'patted', 'patter', 'pattered', 'pattering', 'pattern', 'patterned', 'patterns', 'patters', 'patterson', 'patti', 'patties', 'patting', 'patton', 'patty', 'paucity', 'paul', 'paula', 'paulette', 'pauli', 'pauline', 'pauling', 'paunch', 'paunches', 'paunchier', 'paunchy', 'pauper', 'pauperism', 'pauperize', 'paupers', 'pause', 'paused', 'pauses', 'pausing', 'pavarotti', 'pave', 'paved', 'pavement', 'pavements', 'paves', 'pavilion', 'pavilions', 'paving', 'pavings', 'pavlov', 'pavlova', 'pavlovian', 'paw', 'pawed', 'pawing', 'pawl', 'pawls', 'pawn', 'pawned', 'pawnee', 'pawning', 'pawns', 'pawnshop', 'pawnshops', 'pawpaw', 'pawpaws', 'paws', 'pay', 'payable', 'paycheck', 'paychecks', 'payday', 'paydays', 'payed', 'payee', 'payees', 'payer', 'payers', 'paying', 'payload', 'payloads', 'paymaster', 'payment', 'payments', 'payne', 'payoff', 'payoffs', 'paypal', 'payroll', 'payrolls', 'pays', 'paywall', 'paywalls', 'pea', 'peabody', 'peace', 'peaceable', 'peaceably', 'peaceful', 'peaces', 'peacetime', 'peach', 'peaches', 'peacock', 'peacocks', 'peafowl', 'peafowls', 'peahen', 'peahens', 'peak', 'peaked', 'peaking', 'peaks', 'peal', 'peale', 'pealed', 'pealing', 'peals', 'peanut', 'peanuts', 'pear', 'pearl', 'pearled', 'pearlie', 'pearlier', 'pearliest', 'pearling', 'pearls', 'pearly', 'pears', 'pearson', 'peary', 'peas', 'peasant', 'peasantry', 'peasants', 'pease', 'peat', 'pebble', 'pebbled', 'pebbles', 'pebbling', 'pebbly', 'pecan', 'pecans', 'peccaries', 'peccary', 'pechora', 'peck', 'pecked', 'pecking', 'peckinpah', 'pecks', 'pecos', 'pecs', 'pectin', 'pectoral', 'pectorals', 'peculiar', 'pecuniary', 'pedagog', 'pedagogic', 'pedagogs', 'pedagogue', 'pedagogy', 'pedal', 'pedaled', 'pedaling', 'pedalled', 'pedalling', 'pedals', 'pedant', 'pedantic', 'pedantry', 'pedants', 'peddle', 'peddled', 'peddler', 'peddlers', 'peddles', 'peddling', 'pederast', 'pederasts', 'pederasty', 'pedestal', 'pedestals', 'pediatric', 'pedicure', 'pedicured', 'pedicures', 'pedigree', 'pedigreed', 'pedigrees', 'pediment', 'pediments', 'pedlar', 'pedlars', 'pedometer', 'pedro', 'pee', 'peed', 'peeing', 'peek', 'peekaboo', 'peeked', 'peeking', 'peeks', 'peel', 'peeled', 'peeling', 'peelings', 'peels', 'peep', 'peeped', 'peeper', 'peepers', 'peephole', 'peepholes', 'peeping', 'peeps', 'peer', 'peerage', 'peerages', 'peered', 'peering', 'peerless', 'peers', 'pees', 'peeve', 'peeved', 'peeves', 'peeving', 'peevish', 'peevishly', 'peewee', 'peewees', 'peg', 'pegasus', 'pegasuses', 'pegged', 'pegging', 'peggy', 'pegs', 'pei', 'peiping', 'pekinese', 'pekineses', 'peking', 'pekingese', 'pekings', 'pekoe', 'pelagic', 'pele', 'pelee', 'pelican', 'pelicans', 'pellagra', 'pellet', 'pelleted', 'pelleting', 'pellets', 'pellucid', 'pelt', 'pelted', 'pelting', 'pelts', 'pelves', 'pelvic', 'pelvis', 'pelvises', 'pembroke', 'pen', 'pena', 'penal', 'penalize', 'penalized', 'penalizes', 'penalties', 'penalty', 'penance', 'penances', 'pence', 'penchant', 'penchants', 'pencil', 'penciled', 'penciling', 'pencilled', 'pencils', 'pendant', 'pendants', 'pended', 'pendent', 'pendents', 'pending', 'pends', 'pendulous', 'pendulum', 'pendulums', 'penelope', 'penes', 'penetrate', 'penguin', 'penguins', 'penile', 'peninsula', 'penis', 'penises', 'penitence', 'penitent', 'penitents', 'penknife', 'penknives', 'penlight', 'penlights', 'penlite', 'penlites', 'penn', 'pennant', 'pennants', 'penned', 'penney', 'pennies', 'penniless', 'penning', 'pennon', 'pennons', 'penny', 'pennzoil', 'penology', 'pens', 'pensacola', 'pension', 'pensioned', 'pensioner', 'pensions', 'pensive', 'pensively', 'pent', 'pentagon', 'pentagons', 'pentax', 'pentecost', 'penthouse', 'pentium', 'penurious', 'penury', 'peon', 'peonage', 'peonies', 'peons', 'peony', 'people', 'peopled', 'peoples', 'peopling', 'peoria', 'pep', 'pepin', 'pepped', 'pepper', 'peppered', 'peppering', 'pepperoni', 'peppers', 'peppery', 'peppier', 'peppiest', 'pepping', 'peppy', 'peps', 'pepsi', 'pepsin', 'peptic', 'peptics', 'pepys', 'pequot', 'per', 'percale', 'percales', 'perceive', 'perceived', 'perceives', 'percent', 'percents', 'perch', 'perchance', 'perched', 'percheron', 'perches', 'perching', 'percival', 'percolate', 'percy', 'perdition', 'perelman', 'perennial', 'perez', 'perfect', 'perfected', 'perfecter', 'perfectly', 'perfects', 'perfidies', 'perfidy', 'perforate', 'perforce', 'perform', 'performed', 'performer', 'performs', 'perfume', 'perfumed', 'perfumery', 'perfumes', 'perfuming', 'perhaps', 'periclean', 'pericles', 'perigee', 'perigees', 'perihelia', 'peril', 'periled', 'periling', 'perilled', 'perilling', 'perilous', 'perils', 'perimeter', 'period', 'periodic', 'periods', 'periphery', 'periscope', 'perish', 'perished', 'perishes', 'perishing', 'peritonea', 'periwig', 'periwigs', 'perjure', 'perjured', 'perjurer', 'perjurers', 'perjures', 'perjuries', 'perjuring', 'perjury', 'perk', 'perked', 'perkier', 'perkiest', 'perkiness', 'perking', 'perkins', 'perks', 'perky', 'perl', 'perm', 'permalloy', 'permanent', 'permeable', 'permeate', 'permeated', 'permeates', 'permed', 'permian', 'perming', 'permit', 'permits', 'permitted', 'perms', 'permute', 'permuted', 'permutes', 'permuting', 'pernod', 'peron', 'perot', 'peroxide', 'peroxided', 'peroxides', 'perpetual', 'perplex', 'perplexed', 'perplexes', 'perrier', 'perry', 'persecute', 'perseid', 'perseus', 'persevere', 'pershing', 'persia', 'persian', 'persians', 'persimmon', 'persist', 'persisted', 'persists', 'person', 'persona', 'personae', 'personage', 'personal', 'personals', 'personify', 'personnel', 'persons', 'perspire', 'perspired', 'perspires', 'persuade', 'persuaded', 'persuades', 'pert', 'pertain', 'pertained', 'pertains', 'perter', 'pertest', 'perth', 'pertinent', 'pertly', 'pertness', 'perturb', 'perturbed', 'perturbs', 'peru', 'perusal', 'perusals', 'peruse', 'perused', 'peruses', 'perusing', 'peruvian', 'peruvians', 'pervade', 'pervaded', 'pervades', 'pervading', 'pervasive', 'perverse', 'pervert', 'perverted', 'perverts', 'peseta', 'pesetas', 'peshawar', 'peskier', 'peskiest', 'pesky', 'peso', 'pesos', 'pessimism', 'pessimist', 'pest', 'pester', 'pestered', 'pestering', 'pesters', 'pesticide', 'pestilent', 'pestle', 'pestled', 'pestles', 'pestling', 'pests', 'pet', 'petal', 'petals', 'petard', 'petards', 'pete', 'peter', 'petered', 'petering', 'peters', 'petersen', 'peterson', 'petiole', 'petioles', 'petite', 'petites', 'petition', 'petitions', 'petra', 'petrarch', 'petrel', 'petrels', 'petrified', 'petrifies', 'petrify', 'petrol', 'petroleum', 'pets', 'petted', 'petticoat', 'pettier', 'pettiest', 'pettifog', 'pettifogs', 'pettily', 'pettiness', 'petting', 'petty', 'petulance', 'petulant', 'petunia', 'petunias', 'peugeot', 'pew', 'pewee', 'pewees', 'pews', 'pewter', 'pewters', 'peyote', 'pfizer', 'phaedra', 'phaethon', 'phalanges', 'phalanx', 'phalanxes', 'phalli', 'phallic', 'phallus', 'phalluses', 'phantasm', 'phantasms', 'phantasy', 'phantom', 'phantoms', 'pharaoh', 'pharaohs', 'pharisee', 'pharisees', 'pharmacy', 'pharynges', 'pharynx', 'pharynxes', 'phase', 'phased', 'phases', 'phasing', 'pheasant', 'pheasants', 'phekda', 'phelps', 'phenomena', 'phenotype', 'pheromone', 'phial', 'phials', 'phidias', 'philander', 'philately', 'philby', 'philip', 'philippe', 'philippic', 'philips', 'phillip', 'phillipa', 'phillips', 'philly', 'philology', 'philter', 'philters', 'phipps', 'phish', 'phished', 'phisher', 'phishers', 'phishing', 'phlebitis', 'phlegm', 'phloem', 'phlox', 'phloxes', 'phobia', 'phobias', 'phobic', 'phobics', 'phobos', 'phoebe', 'phoebes', 'phoenicia', 'phoenix', 'phoenixes', 'phone', 'phoned', 'phoneme', 'phonemes', 'phonemic', 'phones', 'phonetic', 'phonetics', 'phoney', 'phoneyed', 'phoneying', 'phoneys', 'phonic', 'phonics', 'phonied', 'phonier', 'phonies', 'phoniest', 'phoniness', 'phoning', 'phonology', 'phony', 'phonying', 'phooey', 'phosphate', 'phosphor', 'phosphors', 'photo', 'photocopy', 'photoed', 'photoing', 'photon', 'photons', 'photos', 'photostat', 'phrasal', 'phrase', 'phrased', 'phrases', 'phrasing', 'phrasings', 'phrygia', 'phyla', 'phyllis', 'phylum', 'physic', 'physical', 'physicals', 'physician', 'physicist', 'physicked', 'physics', 'physique', 'physiques', 'piaf', 'piaget', 'pianist', 'pianists', 'piano', 'pianola', 'pianos', 'piazza', 'piazzas', 'piazze', 'pica', 'picante', 'picasso', 'picayune', 'piccolo', 'piccolos', 'pick', 'pickaback', 'pickax', 'pickaxe', 'pickaxed', 'pickaxes', 'pickaxing', 'picked', 'picker', 'pickerel', 'pickerels', 'pickering', 'pickers', 'picket', 'picketed', 'picketing', 'pickets', 'pickett', 'pickford', 'pickier', 'pickiest', 'picking', 'pickings', 'pickle', 'pickled', 'pickles', 'pickling', 'picks', 'pickup', 'pickups', 'pickwick', 'picky', 'picnic', 'picnicked', 'picnicker', 'picnics', 'pict', 'pictorial', 'picture', 'pictured', 'pictures', 'picturing', 'piddle', 'piddled', 'piddles', 'piddling', 'pidgin', 'pidgins', 'pie', 'piebald', 'piebalds', 'piece', 'pieced', 'piecemeal', 'pieces', 'piecework', 'piecing', 'pied', 'piedmont', 'pieing', 'pier', 'pierce', 'pierced', 'pierces', 'piercing', 'piercings', 'pierre', 'pierrot', 'piers', 'pies', 'piety', 'piffle', 'pig', 'pigeon', 'pigeons', 'pigged', 'piggier', 'piggies', 'piggiest', 'pigging', 'piggish', 'piggy', 'piggyback', 'pigheaded', 'piglet', 'piglets', 'pigment', 'pigments', 'pigmies', 'pigmy', 'pigpen', 'pigpens', 'pigs', 'pigskin', 'pigskins', 'pigsties', 'pigsty', 'pigtail', 'pigtails', 'piing', 'pike', 'piked', 'piker', 'pikers', 'pikes', 'piking', 'pilaf', 'pilaff', 'pilaffs', 'pilafs', 'pilaster', 'pilasters', 'pilate', 'pilates', 'pilau', 'pilaus', 'pilaw', 'pilaws', 'pilchard', 'pilchards', 'pilcomayo', 'pile', 'piled', 'piles', 'pileup', 'pileups', 'pilfer', 'pilfered', 'pilferer', 'pilferers', 'pilfering', 'pilfers', 'pilgrim', 'pilgrims', 'piling', 'pilings', 'pill', 'pillage', 'pillaged', 'pillages', 'pillaging', 'pillar', 'pillars', 'pillbox', 'pillboxes', 'pilled', 'pilling', 'pillion', 'pillions', 'pilloried', 'pillories', 'pillory', 'pillow', 'pillowed', 'pillowing', 'pillows', 'pills', 'pillsbury', 'pilot', 'piloted', 'piloting', 'pilots', 'pimento', 'pimentos', 'pimiento', 'pimientos', 'pimp', 'pimped', 'pimpernel', 'pimping', 'pimple', 'pimples', 'pimplier', 'pimpliest', 'pimply', 'pimps', 'pin', 'pinafore', 'pinafores', 'pinatubo', 'pinball', 'pincer', 'pincers', 'pinch', 'pinched', 'pinches', 'pinching', 'pincus', 'pindar', 'pine', 'pineapple', 'pined', 'pines', 'ping', 'pinged', 'pinging', 'pings', 'pinhead', 'pinheads', 'pinhole', 'pinholes', 'pining', 'pinion', 'pinioned', 'pinioning', 'pinions', 'pink', 'pinked', 'pinker', 'pinkerton', 'pinkest', 'pinkeye', 'pinkie', 'pinkies', 'pinking', 'pinkish', 'pinks', 'pinky', 'pinnacle', 'pinnacles', 'pinnate', 'pinned', 'pinning', 'pinocchio', 'pinochet', 'pinochle', 'pinpoint', 'pinpoints', 'pinprick', 'pinpricks', 'pins', 'pinstripe', 'pint', 'pinter', 'pinto', 'pintoes', 'pintos', 'pints', 'pinup', 'pinups', 'pinwheel', 'pinwheels', 'pioneer', 'pioneered', 'pioneers', 'pious', 'piously', 'pip', 'pipe', 'piped', 'pipeline', 'pipelines', 'piper', 'pipers', 'pipes', 'piping', 'pipit', 'pipits', 'pipped', 'pippin', 'pipping', 'pippins', 'pips', 'pipsqueak', 'piquancy', 'piquant', 'pique', 'piqued', 'piques', 'piquing', 'piracy', 'piraeus', 'piranha', 'piranhas', 'pirate', 'pirated', 'pirates', 'piratical', 'pirating', 'pirouette', 'pis', 'pisa', 'pisces', 'piss', 'pissaro', 'pissed', 'pisses', 'pissing', 'pistachio', 'pistil', 'pistils', 'pistol', 'pistols', 'piston', 'pistons', 'pit', 'pita', 'pitcairn', 'pitch', 'pitched', 'pitcher', 'pitchers', 'pitches', 'pitchfork', 'pitching', 'pitchman', 'pitchmen', 'piteous', 'piteously', 'pitfall', 'pitfalls', 'pith', 'pithier', 'pithiest', 'pithily', 'pithy', 'pitiable', 'pitiably', 'pitied', 'pities', 'pitiful', 'pitifully', 'pitiless', 'piton', 'pitons', 'pits', 'pitt', 'pittance', 'pittances', 'pitted', 'pitting', 'pittman', 'pitts', 'pituitary', 'pity', 'pitying', 'pius', 'pivot', 'pivotal', 'pivoted', 'pivoting', 'pivots', 'pixel', 'pixels', 'pixie', 'pixies', 'pixy', 'pizarro', 'pizazz', 'pizza', 'pizzas', 'pizzazz', 'pizzeria', 'pizzerias', 'pizzicati', 'pizzicato', 'placard', 'placarded', 'placards', 'placate', 'placated', 'placates', 'placating', 'placation', 'place', 'placebo', 'placebos', 'placed', 'placement', 'placenta', 'placentae', 'placental', 'placentas', 'placer', 'placers', 'places', 'placid', 'placidity', 'placidly', 'placing', 'placket', 'plackets', 'plague', 'plagued', 'plagues', 'plaguing', 'plaice', 'plaid', 'plaids', 'plain', 'plainer', 'plainest', 'plainly', 'plainness', 'plains', 'plaint', 'plaintiff', 'plaintive', 'plaints', 'plait', 'plaited', 'plaiting', 'plaits', 'plan', 'planar', 'planck', 'plane', 'planed', 'planes', 'planet', 'planetary', 'planets', 'plangent', 'planing', 'plank', 'planked', 'planking', 'planks', 'plankton', 'planned', 'planner', 'planners', 'planning', 'plannings', 'plans', 'plant', 'plantain', 'plantains', 'planted', 'planter', 'planters', 'planting', 'plantings', 'plants', 'plaque', 'plaques', 'plasma', 'plaster', 'plastered', 'plasterer', 'plasters', 'plastic', 'plastics', 'plastique', 'plataea', 'plate', 'plateau', 'plateaued', 'plateaus', 'plateaux', 'plated', 'plateful', 'platefuls', 'platelet', 'platelets', 'platen', 'platens', 'plates', 'platform', 'platforms', 'plath', 'plating', 'platinum', 'platitude', 'plato', 'platonic', 'platonism', 'platonist', 'platoon', 'platooned', 'platoons', 'platte', 'platter', 'platters', 'platypi', 'platypus', 'plaudit', 'plaudits', 'plausible', 'plausibly', 'plautus', 'play', 'playable', 'playact', 'playacted', 'playacts', 'playback', 'playbacks', 'playbill', 'playbills', 'playboy', 'playboys', 'played', 'player', 'players', 'playful', 'playfully', 'playgoer', 'playgoers', 'playhouse', 'playing', 'playlist', 'playlists', 'playmate', 'playmates', 'playoff', 'playoffs', 'playpen', 'playpens', 'playroom', 'playrooms', 'plays', 'playtex', 'plaything', 'plaza', 'plazas', 'plea', 'plead', 'pleaded', 'pleader', 'pleaders', 'pleading', 'pleads', 'pleas', 'pleasant', 'please', 'pleased', 'pleases', 'pleasing', 'pleasings', 'pleasure', 'pleasured', 'pleasures', 'pleat', 'pleated', 'pleating', 'pleats', 'plebeian', 'plebeians', 'plectra', 'plectrum', 'plectrums', 'pled', 'pledge', 'pledged', 'pledges', 'pledging', 'pleiades', 'plenaries', 'plenary', 'plenitude', 'plenteous', 'plentiful', 'plenty', 'plethora', 'pleurisy', 'plexiglas', 'plexus', 'plexuses', 'pliable', 'pliancy', 'pliant', 'plied', 'pliers', 'plies', 'plight', 'plighted', 'plighting', 'plights', 'plinth', 'plinths', 'pliny', 'pliocene', 'plod', 'plodded', 'plodder', 'plodders', 'plodding', 'ploddings', 'plods', 'plop', 'plopped', 'plopping', 'plops', 'plot', 'plots', 'plotted', 'plotter', 'plotters', 'plotting', 'plough', 'ploughed', 'ploughing', 'ploughs', 'plover', 'plovers', 'plow', 'plowed', 'plowing', 'plowman', 'plowmen', 'plows', 'plowshare', 'ploy', 'ploys', 'pluck', 'plucked', 'pluckier', 'pluckiest', 'plucking', 'plucks', 'plucky', 'plug', 'plugged', 'plugging', 'plugin', 'plugins', 'plugs', 'plum', 'plumage', 'plumb', 'plumbed', 'plumber', 'plumbers', 'plumbing', 'plumbs', 'plume', 'plumed', 'plumes', 'pluming', 'plummet', 'plummeted', 'plummets', 'plump', 'plumped', 'plumper', 'plumpest', 'plumping', 'plumpness', 'plumps', 'plums', 'plunder', 'plundered', 'plunderer', 'plunders', 'plunge', 'plunged', 'plunger', 'plungers', 'plunges', 'plunging', 'plunk', 'plunked', 'plunking', 'plunks', 'plural', 'pluralism', 'plurality', 'pluralize', 'plurals', 'plus', 'pluses', 'plush', 'plusher', 'plushest', 'plushier', 'plushiest', 'plushy', 'plusses', 'plutarch', 'pluto', 'plutocrat', 'plutonium', 'ply', 'plying', 'plymouth', 'plywood', 'pneumatic', 'pneumonia', 'poach', 'poached', 'poacher', 'poachers', 'poaches', 'poaching', 'pock', 'pocked', 'pocket', 'pocketed', 'pocketful', 'pocketing', 'pockets', 'pocking', 'pockmark', 'pockmarks', 'pocks', 'pocono', 'poconos', 'pod', 'podcast', 'podcasts', 'podded', 'podding', 'podgorica', 'podhoretz', 'podia', 'podiatry', 'podium', 'podiums', 'pods', 'podunk', 'poe', 'poem', 'poems', 'poesy', 'poet', 'poetess', 'poetesses', 'poetic', 'poetical', 'poetry', 'poets', 'pogo', 'pogrom', 'pogroms', 'poi', 'poignancy', 'poignant', 'point', 'pointed', 'pointedly', 'pointer', 'pointers', 'pointier', 'pointiest', 'pointing', 'pointless', 'points', 'pointy', 'poiret', 'poirot', 'poise', 'poised', 'poises', 'poising', 'poison', 'poisoned', 'poisoner', 'poisoners', 'poisoning', 'poisonous', 'poisons', 'poisson', 'poitier', 'poke', 'poked', 'poker', 'pokers', 'pokes', 'pokey', 'pokeys', 'pokier', 'pokiest', 'poking', 'poky', 'pol', 'poland', 'polanski', 'polar', 'polaris', 'polarity', 'polarize', 'polarized', 'polarizes', 'polaroid', 'polaroids', 'pole', 'polecat', 'polecats', 'poled', 'polemic', 'polemical', 'polemics', 'poles', 'polestar', 'polestars', 'police', 'policed', 'policeman', 'policemen', 'polices', 'policies', 'policing', 'policy', 'poling', 'polio', 'polios', 'polish', 'polished', 'polisher', 'polishers', 'polishes', 'polishing', 'politburo', 'polite', 'politely', 'politer', 'politesse', 'politest', 'politic', 'political', 'politico', 'politicos', 'politics', 'polities', 'polity', 'polk', 'polka', 'polkaed', 'polkaing', 'polkas', 'poll', 'pollard', 'polled', 'pollen', 'pollinate', 'polling', 'polliwog', 'polliwogs', 'pollock', 'polls', 'pollster', 'pollsters', 'pollutant', 'pollute', 'polluted', 'polluter', 'polluters', 'pollutes', 'polluting', 'pollution', 'pollux', 'polly', 'pollyanna', 'pollywog', 'pollywogs', 'polo', 'polonaise', 'polonium', 'pols', 'poltava', 'poltroon', 'poltroons', 'polyamory', 'polyester', 'polygamy', 'polyglot', 'polyglots', 'polygon', 'polygonal', 'polygons', 'polygraph', 'polyhedra', 'polymath', 'polymaths', 'polymer', 'polymeric', 'polymers', 'polynesia', 'polyp', 'polyphony', 'polyps', 'polythene', 'pomade', 'pomaded', 'pomades', 'pomading', 'pomerania', 'pommel', 'pommeled', 'pommeling', 'pommelled', 'pommels', 'pomona', 'pomp', 'pompadour', 'pompeii', 'pompey', 'pompom', 'pompoms', 'pompon', 'pompons', 'pomposity', 'pompous', 'pompously', 'ponce', 'poncho', 'ponchos', 'pond', 'ponder', 'pondered', 'pondering', 'ponderous', 'ponders', 'ponds', 'pone', 'pones', 'poniard', 'poniards', 'ponies', 'pontiac', 'pontianak', 'pontiff', 'pontiffs', 'pontoon', 'pontoons', 'pony', 'ponytail', 'ponytails', 'pooch', 'pooched', 'pooches', 'pooching', 'poodle', 'poodles', 'pooh', 'poohed', 'poohing', 'poohs', 'pool', 'poole', 'pooled', 'pooling', 'pools', 'poona', 'poop', 'pooped', 'pooping', 'poops', 'poor', 'poorer', 'poorest', 'poorhouse', 'poorly', 'pop', 'popcorn', 'pope', 'popes', 'popeye', 'popgun', 'popguns', 'popinjay', 'popinjays', 'poplar', 'poplars', 'poplin', 'popover', 'popovers', 'poppa', 'poppas', 'popped', 'popper', 'poppies', 'popping', 'poppins', 'poppy', 'poppycock', 'pops', 'popsicle', 'populace', 'populaces', 'popular', 'popularly', 'populate', 'populated', 'populates', 'populism', 'populist', 'populists', 'populous', 'porcelain', 'porch', 'porches', 'porcine', 'porcupine', 'pore', 'pored', 'pores', 'porfirio', 'poring', 'pork', 'porn', 'porno', 'porosity', 'porous', 'porphyry', 'porpoise', 'porpoised', 'porpoises', 'porridge', 'porrima', 'porringer', 'porsche', 'port', 'portable', 'portables', 'portage', 'portaged', 'portages', 'portaging', 'portal', 'portals', 'ported', 'portend', 'portended', 'portends', 'portent', 'portents', 'porter', 'porters', 'portfolio', 'porthole', 'portholes', 'portia', 'portico', 'porticoes', 'porticos', 'porting', 'portion', 'portioned', 'portions', 'portland', 'portlier', 'portliest', 'portly', 'portrait', 'portraits', 'portray', 'portrayal', 'portrayed', 'portrays', 'ports', 'portugal', 'pose', 'posed', 'poseidon', 'poser', 'posers', 'poses', 'poseur', 'poseurs', 'posh', 'posher', 'poshest', 'posies', 'posing', 'posit', 'posited', 'positing', 'position', 'positions', 'positive', 'positives', 'positron', 'positrons', 'posits', 'posse', 'posses', 'possess', 'possessed', 'possesses', 'possessor', 'possible', 'possibles', 'possibly', 'possum', 'possums', 'post', 'postage', 'postal', 'postbox', 'postcard', 'postcards', 'postcode', 'postcodes', 'postdate', 'postdated', 'postdates', 'postdoc', 'posted', 'poster', 'posterior', 'posterity', 'posters', 'posthaste', 'posting', 'postlude', 'postludes', 'postman', 'postmark', 'postmarks', 'postmen', 'postnatal', 'postpaid', 'postpone', 'postponed', 'postpones', 'posts', 'postulate', 'posture', 'postured', 'postures', 'posturing', 'postwar', 'posy', 'pot', 'potable', 'potables', 'potash', 'potassium', 'potato', 'potatoes', 'potbelly', 'potboiler', 'potemkin', 'potency', 'potent', 'potentate', 'potential', 'potful', 'potfuls', 'potholder', 'pothole', 'potholes', 'pothook', 'pothooks', 'potion', 'potions', 'potluck', 'potlucks', 'potomac', 'potpie', 'potpies', 'potpourri', 'pots', 'potsdam', 'potsherd', 'potsherds', 'potshot', 'potshots', 'pottage', 'potted', 'potter', 'pottered', 'potteries', 'pottering', 'potters', 'pottery', 'pottier', 'potties', 'pottiest', 'potting', 'potts', 'potty', 'pouch', 'pouched', 'pouches', 'pouching', 'poultice', 'poulticed', 'poultices', 'poultry', 'pounce', 'pounced', 'pounces', 'pouncing', 'pound', 'pounded', 'pounding', 'pounds', 'pour', 'poured', 'pouring', 'pours', 'poussin', 'pout', 'pouted', 'pouting', 'pouts', 'poverty', 'powder', 'powdered', 'powdering', 'powders', 'powdery', 'powell', 'power', 'powerboat', 'powered', 'powerful', 'powering', 'powerless', 'powerpc', 'powers', 'powhatan', 'powwow', 'powwowed', 'powwowing', 'powwows', 'pox', 'poxes', 'poznan', 'practical', 'practice', 'practiced', 'practices', 'practise', 'practised', 'practises', 'prada', 'prado', 'pragmatic', 'prague', 'praia', 'prairie', 'prairies', 'praise', 'praised', 'praises', 'praising', 'prakrit', 'praline', 'pralines', 'pram', 'prance', 'pranced', 'prancer', 'prancers', 'prances', 'prancing', 'prank', 'pranks', 'prankster', 'pratchett', 'prate', 'prated', 'prates', 'pratfall', 'pratfalls', 'prating', 'pratt', 'prattle', 'prattled', 'prattles', 'prattling', 'pravda', 'prawn', 'prawned', 'prawning', 'prawns', 'pray', 'prayed', 'prayer', 'prayers', 'praying', 'prays', 'preach', 'preached', 'preacher', 'preachers', 'preaches', 'preachier', 'preaching', 'preachy', 'preakness', 'preamble', 'preambled', 'preambles', 'precede', 'preceded', 'precedent', 'precedes', 'preceding', 'precept', 'preceptor', 'precepts', 'precinct', 'precincts', 'precious', 'precipice', 'precise', 'precisely', 'preciser', 'precises', 'precisest', 'precision', 'preclude', 'precluded', 'precludes', 'precocity', 'precursor', 'predate', 'predated', 'predates', 'predating', 'predator', 'predators', 'predatory', 'predicate', 'predict', 'predicted', 'predictor', 'predicts', 'preempt', 'preempted', 'preempts', 'preen', 'preened', 'preening', 'preens', 'preexist', 'preexists', 'prefab', 'prefabbed', 'prefabs', 'preface', 'prefaced', 'prefaces', 'prefacing', 'prefatory', 'prefect', 'prefects', 'prefer', 'preferred', 'prefers', 'prefigure', 'prefix', 'prefixed', 'prefixes', 'prefixing', 'pregnancy', 'pregnant', 'preheat', 'preheated', 'preheats', 'prejudge', 'prejudged', 'prejudges', 'prejudice', 'prelate', 'prelates', 'prelude', 'preludes', 'premature', 'premier', 'premiere', 'premiered', 'premieres', 'premiers', 'preminger', 'premise', 'premised', 'premises', 'premising', 'premiss', 'premisses', 'premium', 'premiums', 'premyslid', 'prenatal', 'prensa', 'prentice', 'prenup', 'prenups', 'preoccupy', 'preordain', 'prep', 'prepaid', 'prepare', 'prepared', 'prepares', 'preparing', 'prepay', 'prepaying', 'prepays', 'prepped', 'preppie', 'preppier', 'preppies', 'preppiest', 'prepping', 'preppy', 'preps', 'prequel', 'prequels', 'prerecord', 'presage', 'presaged', 'presages', 'presaging', 'preschool', 'prescient', 'prescott', 'prescribe', 'presence', 'presences', 'present', 'presented', 'presenter', 'presently', 'presents', 'preserve', 'preserved', 'preserver', 'preserves', 'preset', 'presets', 'preshrank', 'preshrink', 'preshrunk', 'preside', 'presided', 'president', 'presides', 'presiding', 'presley', 'press', 'pressed', 'presses', 'pressing', 'pressings', 'pressman', 'pressmen', 'pressure', 'pressured', 'pressures', 'prestige', 'presto', 'preston', 'prestos', 'presume', 'presumed', 'presumes', 'presuming', 'preteen', 'preteens', 'pretence', 'pretences', 'pretend', 'pretended', 'pretender', 'pretends', 'pretense', 'pretenses', 'preterit', 'preterite', 'preterits', 'pretext', 'pretexts', 'pretoria', 'prettied', 'prettier', 'pretties', 'prettiest', 'prettify', 'prettily', 'pretty', 'prettying', 'pretzel', 'pretzels', 'prevail', 'prevailed', 'prevails', 'prevalent', 'prevent', 'prevented', 'prevents', 'preview', 'previewed', 'previewer', 'previews', 'previous', 'prevue', 'prevues', 'prewar', 'prey', 'preyed', 'preying', 'preys', 'priam', 'pribilof', 'price', 'priced', 'priceless', 'prices', 'pricey', 'pricier', 'priciest', 'pricing', 'prick', 'pricked', 'pricking', 'prickle', 'prickled', 'prickles', 'pricklier', 'prickling', 'prickly', 'pricks', 'pricy', 'pride', 'prided', 'prides', 'priding', 'pried', 'pries', 'priest', 'priestess', 'priestley', 'priestly', 'priests', 'prig', 'priggish', 'prigs', 'prim', 'primacy', 'primaeval', 'primal', 'primaries', 'primarily', 'primary', 'primate', 'primates', 'prime', 'primed', 'primer', 'primers', 'primes', 'primeval', 'priming', 'primitive', 'primly', 'primmer', 'primmest', 'primness', 'primp', 'primped', 'primping', 'primps', 'primrose', 'primroses', 'prince', 'princely', 'princes', 'princess', 'princeton', 'principal', 'principe', 'principle', 'print', 'printable', 'printed', 'printer', 'printers', 'printing', 'printings', 'printout', 'printouts', 'prints', 'prior', 'prioress', 'priories', 'priority', 'priors', 'priory', 'priscilla', 'prism', 'prismatic', 'prisms', 'prison', 'prisoner', 'prisoners', 'prisons', 'prissier', 'prissiest', 'prissy', 'pristine', 'prithee', 'prius', 'privacy', 'privateer', 'privately', 'privater', 'privates', 'privatest', 'privation', 'privatize', 'privet', 'privets', 'privier', 'privies', 'priviest', 'privilege', 'privy', 'prize', 'prized', 'prizes', 'prizing', 'pro', 'proactive', 'probable', 'probables', 'probably', 'probate', 'probated', 'probates', 'probating', 'probation', 'probe', 'probed', 'probes', 'probing', 'probity', 'problem', 'problems', 'proboscis', 'procedure', 'proceed', 'proceeded', 'proceeds', 'process', 'processed', 'processes', 'processor', 'proclaim', 'proclaims', 'procreate', 'procter', 'proctor', 'proctored', 'proctors', 'procure', 'procured', 'procurer', 'procurers', 'procures', 'procuring', 'procyon', 'prod', 'prodded', 'prodding', 'prodigal', 'prodigals', 'prodigies', 'prodigy', 'prods', 'produce', 'produced', 'producer', 'producers', 'produces', 'producing', 'product', 'products', 'prof', 'profane', 'profaned', 'profanely', 'profanes', 'profaning', 'profanity', 'profess', 'professed', 'professes', 'professor', 'proffer', 'proffered', 'proffers', 'profile', 'profiled', 'profiles', 'profiling', 'profit', 'profited', 'profiteer', 'profiting', 'profits', 'proforma', 'profound', 'profs', 'profuse', 'profusely', 'profusion', 'progeny', 'prognoses', 'prognosis', 'program', 'programed', 'programer', 'programme', 'programs', 'progress', 'prohibit', 'prohibits', 'project', 'projected', 'projector', 'projects', 'prokofiev', 'prolific', 'prolix', 'prolixity', 'prolog', 'prologs', 'prologue', 'prologues', 'prolong', 'prolonged', 'prolongs', 'prom', 'promenade', 'prominent', 'promise', 'promised', 'promises', 'promising', 'promo', 'promos', 'promote', 'promoted', 'promoter', 'promoters', 'promotes', 'promoting', 'promotion', 'prompt', 'prompted', 'prompter', 'prompters', 'promptest', 'prompting', 'promptly', 'prompts', 'proms', 'prone', 'proneness', 'prong', 'pronged', 'pronghorn', 'prongs', 'pronoun', 'pronounce', 'pronouns', 'pronto', 'proof', 'proofed', 'proofing', 'proofread', 'proofs', 'prop', 'propagate', 'propane', 'propel', 'propelled', 'propeller', 'propels', 'proper', 'properer', 'properest', 'properly', 'prophecy', 'prophesy', 'prophet', 'prophetic', 'prophets', 'proponent', 'proposal', 'proposals', 'propose', 'proposed', 'proposer', 'proposes', 'proposing', 'propound', 'propounds', 'propped', 'propping', 'propriety', 'props', 'prorate', 'prorated', 'prorates', 'prorating', 'pros', 'prosaic', 'proscenia', 'proscribe', 'prose', 'prosecute', 'proselyte', 'prosier', 'prosiest', 'prosodies', 'prosody', 'prospect', 'prospects', 'prosper', 'prospered', 'prospers', 'prostate', 'prostates', 'prostrate', 'prosy', 'protean', 'protect', 'protector', 'protects', 'protein', 'proteins', 'protest', 'protested', 'protester', 'protestor', 'protests', 'proteus', 'protocol', 'protocols', 'proton', 'protons', 'prototype', 'protozoa', 'protozoan', 'protozoon', 'protract', 'protracts', 'protrude', 'protruded', 'protrudes', 'proud', 'prouder', 'proudest', 'proudhon', 'proudly', 'proust', 'provable', 'provably', 'prove', 'proved', 'proven', 'provence', 'provender', 'proverb', 'proverbs', 'proves', 'provide', 'provided', 'provident', 'provider', 'providers', 'provides', 'providing', 'province', 'provinces', 'proving', 'provision', 'proviso', 'provisoes', 'provisos', 'provo', 'provoke', 'provoked', 'provokes', 'provoking', 'provost', 'provosts', 'prow', 'prowess', 'prowl', 'prowled', 'prowler', 'prowlers', 'prowling', 'prowls', 'prows', 'proxies', 'proximity', 'proxy', 'prozac', 'prude', 'prudence', 'prudent', 'prudently', 'prudery', 'prudes', 'prudish', 'prudishly', 'pruitt', 'prune', 'pruned', 'prunes', 'pruning', 'prurience', 'prurient', 'prussia', 'prussian', 'prut', 'pry', 'prying', 'pryor', 'psalm', 'psalmist', 'psalmists', 'psalms', 'psalter', 'psalters', 'pseudo', 'pseudonym', 'pshaw', 'pshaws', 'psoriasis', 'psst', 'psych', 'psyche', 'psyched', 'psyches', 'psychic', 'psychical', 'psychics', 'psyching', 'psycho', 'psychos', 'psychoses', 'psychosis', 'psychotic', 'psychs', 'ptah', 'ptarmigan', 'ptolemaic', 'ptolemies', 'ptolemy', 'ptomaine', 'ptomaines', 'pub', 'puberty', 'pubescent', 'pubic', 'publican', 'publicans', 'publicist', 'publicity', 'publicize', 'publicly', 'publish', 'published', 'publisher', 'publishes', 'pubs', 'puccini', 'puck', 'pucker', 'puckered', 'puckering', 'puckers', 'puckett', 'puckish', 'pucks', 'pudding', 'puddings', 'puddle', 'puddled', 'puddles', 'puddling', 'pudgier', 'pudgiest', 'pudgy', 'puebla', 'pueblo', 'pueblos', 'puerile', 'puerility', 'puerto', 'puff', 'puffball', 'puffballs', 'puffed', 'puffer', 'puffier', 'puffiest', 'puffin', 'puffiness', 'puffing', 'puffins', 'puffs', 'puffy', 'pug', 'puget', 'pugh', 'pugilism', 'pugilist', 'pugilists', 'pugnacity', 'pugs', 'puke', 'puked', 'pukes', 'puking', 'pulaski', 'pulitzer', 'pull', 'pullback', 'pullbacks', 'pulled', 'puller', 'pullers', 'pullet', 'pullets', 'pulley', 'pulleys', 'pulling', 'pullman', 'pullmans', 'pullout', 'pullouts', 'pullover', 'pullovers', 'pulls', 'pulmonary', 'pulp', 'pulped', 'pulpier', 'pulpiest', 'pulping', 'pulpit', 'pulpits', 'pulps', 'pulpy', 'pulsar', 'pulsars', 'pulsate', 'pulsated', 'pulsates', 'pulsating', 'pulsation', 'pulse', 'pulsed', 'pulses', 'pulsing', 'pulverize', 'puma', 'pumas', 'pumice', 'pumices', 'pummel', 'pummeled', 'pummeling', 'pummelled', 'pummels', 'pump', 'pumped', 'pumper', 'pumpers', 'pumping', 'pumpkin', 'pumpkins', 'pumps', 'pun', 'punch', 'punched', 'punches', 'punchier', 'punchiest', 'punching', 'punchline', 'punchy', 'punctual', 'punctuate', 'puncture', 'punctured', 'punctures', 'pundit', 'pundits', 'pungency', 'pungent', 'pungently', 'punic', 'punier', 'puniest', 'punish', 'punished', 'punishes', 'punishing', 'punitive', 'punjab', 'punjabi', 'punk', 'punker', 'punkest', 'punks', 'punned', 'punning', 'puns', 'punster', 'punsters', 'punt', 'punted', 'punter', 'punters', 'punting', 'punts', 'puny', 'pup', 'pupa', 'pupae', 'pupal', 'pupas', 'pupil', 'pupils', 'pupped', 'puppet', 'puppeteer', 'puppetry', 'puppets', 'puppies', 'pupping', 'puppy', 'pups', 'purana', 'purblind', 'purcell', 'purchase', 'purchased', 'purchaser', 'purchases', 'purdue', 'pure', 'purebred', 'purebreds', 'puree', 'pureed', 'pureeing', 'purees', 'purely', 'pureness', 'purer', 'purest', 'purgative', 'purgatory', 'purge', 'purged', 'purges', 'purging', 'purified', 'purifier', 'purifiers', 'purifies', 'purify', 'purifying', 'purim', 'purims', 'purina', 'purism', 'purist', 'purists', 'puritan', 'puritans', 'purity', 'purl', 'purled', 'purling', 'purloin', 'purloined', 'purloins', 'purls', 'purple', 'purpler', 'purples', 'purplest', 'purplish', 'purport', 'purported', 'purports', 'purpose', 'purposed', 'purposely', 'purposes', 'purposing', 'purr', 'purred', 'purring', 'purrs', 'purse', 'pursed', 'purser', 'pursers', 'purses', 'pursing', 'pursuance', 'pursuant', 'pursue', 'pursued', 'pursuer', 'pursuers', 'pursues', 'pursuing', 'pursuit', 'pursuits', 'purulence', 'purulent', 'purus', 'purvey', 'purveyed', 'purveying', 'purveyor', 'purveyors', 'purveys', 'purview', 'pus', 'pusan', 'pusey', 'push', 'pushcart', 'pushcarts', 'pushed', 'pusher', 'pushers', 'pushes', 'pushier', 'pushiest', 'pushiness', 'pushing', 'pushkin', 'pushover', 'pushovers', 'pushtu', 'pushup', 'pushups', 'pushy', 'puss', 'pusses', 'pussier', 'pussies', 'pussiest', 'pussy', 'pussycat', 'pussycats', 'pussyfoot', 'pustule', 'pustules', 'put', 'putative', 'putin', 'putnam', 'putrefied', 'putrefies', 'putrefy', 'putrid', 'puts', 'putsch', 'putsches', 'putt', 'putted', 'putter', 'puttered', 'puttering', 'putters', 'puttied', 'putties', 'putting', 'putts', 'putty', 'puttying', 'puzo', 'puzzle', 'puzzled', 'puzzler', 'puzzlers', 'puzzles', 'puzzling', 'pwn', 'pwned', 'pwning', 'pwns', 'pygmalion', 'pygmies', 'pygmy', 'pyle', 'pylon', 'pylons', 'pym', 'pynchon', 'pyongyang', 'pyorrhea', 'pyotr', 'pyramid', 'pyramidal', 'pyramided', 'pyramids', 'pyre', 'pyrenees', 'pyres', 'pyrex', 'pyrexes', 'pyrite', 'pyromania', 'pyrrhic', 'pythias', 'python', 'pythons', 'pyx', 'pyxes', 'qaddafi', 'qantas', 'qatar', 'qingdao', 'qiqihar', 'qom', 'qua', 'quaalude', 'quack', 'quacked', 'quackery', 'quacking', 'quacks', 'quad', 'quadrant', 'quadrants', 'quadratic', 'quadrille', 'quadruped', 'quadruple', 'quads', 'quaff', 'quaffed', 'quaffing', 'quaffs', 'quagmire', 'quagmires', 'quahaug', 'quahaugs', 'quahog', 'quahogs', 'quail', 'quailed', 'quailing', 'quails', 'quaint', 'quainter', 'quaintest', 'quaintly', 'quake', 'quaked', 'quaker', 'quakers', 'quakes', 'quaking', 'qualified', 'qualifier', 'qualifies', 'qualify', 'qualities', 'quality', 'qualm', 'qualms', 'quandary', 'quanta', 'quantify', 'quantity', 'quantum', 'quaoar', 'quark', 'quarks', 'quarrel', 'quarreled', 'quarrels', 'quarried', 'quarries', 'quarry', 'quarrying', 'quart', 'quarter', 'quartered', 'quarterly', 'quarters', 'quartet', 'quartets', 'quartette', 'quarto', 'quartos', 'quarts', 'quartz', 'quasar', 'quasars', 'quash', 'quashed', 'quashes', 'quashing', 'quasi', 'quasimodo', 'quatrain', 'quatrains', 'quaver', 'quavered', 'quavering', 'quavers', 'quavery', 'quay', 'quayle', 'quays', 'queasier', 'queasiest', 'queasily', 'queasy', 'quebec', 'quechua', 'queen', 'queened', 'queening', 'queenlier', 'queenly', 'queens', 'queer', 'queered', 'queerer', 'queerest', 'queering', 'queerly', 'queerness', 'queers', 'quell', 'quelled', 'quelling', 'quells', 'quench', 'quenched', 'quenches', 'quenching', 'quentin', 'queried', 'queries', 'querulous', 'query', 'querying', 'quest', 'quested', 'questing', 'question', 'questions', 'quests', 'queue', 'queued', 'queues', 'queuing', 'quezon', 'quibble', 'quibbled', 'quibbler', 'quibblers', 'quibbles', 'quibbling', 'quiche', 'quiches', 'quick', 'quicken', 'quickened', 'quickens', 'quicker', 'quickest', 'quickie', 'quickies', 'quicklime', 'quickly', 'quickness', 'quicksand', 'quid', 'quids', 'quiescent', 'quiet', 'quieted', 'quieter', 'quietest', 'quieting', 'quietly', 'quietness', 'quiets', 'quietude', 'quietus', 'quietuses', 'quill', 'quills', 'quilt', 'quilted', 'quilter', 'quilters', 'quilting', 'quilts', 'quince', 'quinces', 'quincy', 'quinine', 'quinn', 'quintet', 'quintets', 'quinton', 'quintuple', 'quip', 'quipped', 'quipping', 'quips', 'quire', 'quires', 'quirinal', 'quirk', 'quirked', 'quirkier', 'quirkiest', 'quirking', 'quirks', 'quirky', 'quisling', 'quislings', 'quit', 'quite', 'quito', 'quits', 'quitted', 'quitter', 'quitters', 'quitting', 'quiver', 'quivered', 'quivering', 'quivers', 'quixote', 'quixotic', 'quixotism', 'quiz', 'quizzed', 'quizzes', 'quizzical', 'quizzing', 'qumran', 'quoit', 'quoited', 'quoiting', 'quoits', 'quondam', 'quonset', 'quorum', 'quorums', 'quota', 'quotable', 'quotas', 'quotation', 'quote', 'quoted', 'quotes', 'quoth', 'quotidian', 'quotient', 'quotients', 'quoting', 'quran', 'rabat', 'rabbi', 'rabbinate', 'rabbis', 'rabbit', 'rabbited', 'rabbiting', 'rabbits', 'rabble', 'rabbles', 'rabelais', 'rabid', 'rabies', 'rabin', 'raccoon', 'raccoons', 'race', 'raced', 'racehorse', 'raceme', 'racemes', 'racer', 'racers', 'races', 'racetrack', 'raceway', 'raceways', 'rachael', 'rachel', 'rachelle', 'racial', 'racially', 'racier', 'raciest', 'racily', 'racine', 'raciness', 'racing', 'racism', 'racist', 'racists', 'rack', 'racked', 'racket', 'racketed', 'racketeer', 'racketing', 'rackets', 'racking', 'racks', 'raconteur', 'racoon', 'racoons', 'racquet', 'racquets', 'racy', 'radar', 'radars', 'radcliffe', 'radial', 'radially', 'radials', 'radiance', 'radiant', 'radiantly', 'radiate', 'radiated', 'radiates', 'radiating', 'radiation', 'radiator', 'radiators', 'radical', 'radically', 'radicals', 'radii', 'radio', 'radioed', 'radiogram', 'radioing', 'radiology', 'radios', 'radish', 'radishes', 'radium', 'radius', 'radiuses', 'radon', 'rae', 'rafael', 'raffia', 'raffish', 'raffle', 'raffled', 'raffles', 'raffling', 'raft', 'rafted', 'rafter', 'rafters', 'rafting', 'rafts', 'rag', 'raga', 'ragas', 'rage', 'raged', 'rages', 'ragged', 'raggeder', 'raggedest', 'raggedier', 'raggedly', 'raggedy', 'ragging', 'raging', 'raglan', 'raglans', 'ragout', 'ragouts', 'rags', 'ragtag', 'ragtags', 'ragtime', 'ragweed', 'raid', 'raided', 'raider', 'raiders', 'raiding', 'raids', 'rail', 'railed', 'railing', 'railings', 'raillery', 'railroad', 'railroads', 'rails', 'railway', 'railways', 'raiment', 'rain', 'rainbow', 'rainbows', 'raincoat', 'raincoats', 'raindrop', 'raindrops', 'rained', 'rainfall', 'rainfalls', 'rainier', 'rainiest', 'raining', 'rainmaker', 'rains', 'rainstorm', 'rainwater', 'rainy', 'raised', 'raises', 'raisin', 'raising', 'raisins', 'raja', 'rajah', 'rajahs', 'rajas', 'rake', 'raked', 'rakes', 'raking', 'rakish', 'rakishly', 'raleigh', 'rallied', 'rallies', 'rally', 'rallying', 'ralph', 'ram', 'rama', 'ramada', 'ramadan', 'ramadans', 'ramanujan', 'ramayana', 'ramble', 'rambled', 'rambler', 'ramblers', 'rambles', 'rambling', 'rambo', 'ramified', 'ramifies', 'ramify', 'ramifying', 'ramirez', 'ramiro', 'rammed', 'ramming', 'ramon', 'ramona', 'ramos', 'ramp', 'rampage', 'rampaged', 'rampages', 'rampaging', 'rampant', 'rampantly', 'rampart', 'ramparts', 'ramps', 'ramrod', 'ramrodded', 'ramrods', 'rams', 'ramsay', 'ramses', 'ramsey', 'ran', 'ranch', 'ranched', 'rancher', 'ranchers', 'ranches', 'ranching', 'rancid', 'rancidity', 'rancor', 'rancorous', 'rand', 'randal', 'randall', 'randell', 'randi', 'randier', 'randiest', 'randolph', 'random', 'randomize', 'randomly', 'randy', 'rang', 'range', 'ranged', 'ranger', 'rangers', 'ranges', 'rangier', 'rangiest', 'ranginess', 'ranging', 'rangoon', 'rangy', 'rank', 'ranked', 'ranker', 'rankest', 'rankin', 'rankine', 'ranking', 'rankings', 'rankle', 'rankled', 'rankles', 'rankling', 'rankness', 'ranks', 'ransack', 'ransacked', 'ransacks', 'ransom', 'ransomed', 'ransoming', 'ransoms', 'rant', 'ranted', 'ranter', 'ranting', 'rants', 'raoul', 'rap', 'rapacious', 'rapacity', 'rape', 'raped', 'rapes', 'raphael', 'rapid', 'rapider', 'rapidest', 'rapidity', 'rapidly', 'rapids', 'rapier', 'rapiers', 'rapine', 'raping', 'rapist', 'rapists', 'rapped', 'rapper', 'rappers', 'rapping', 'rapport', 'rapports', 'raps', 'rapt', 'rapture', 'raptures', 'rapturous', 'rapunzel', 'raquel', 'rare', 'rared', 'rarefied', 'rarefies', 'rarefy', 'rarefying', 'rarely', 'rareness', 'rarer', 'rares', 'rarest', 'raring', 'rarities', 'rarity', 'rascal', 'rascally', 'rascals', 'rash', 'rasher', 'rashers', 'rashes', 'rashest', 'rashly', 'rashness', 'rasmussen', 'rasp', 'raspberry', 'rasped', 'raspier', 'raspiest', 'rasping', 'rasps', 'rasputin', 'raspy', 'rasta', 'rastaban', 'raster', 'rat', 'ratchet', 'ratcheted', 'ratchets', 'rate', 'rated', 'rates', 'rather', 'ratified', 'ratifies', 'ratify', 'ratifying', 'rating', 'ratings', 'ratio', 'ration', 'rational', 'rationale', 'rationals', 'rationed', 'rationing', 'rations', 'ratios', 'ratliff', 'rats', 'rattan', 'rattans', 'ratted', 'rattier', 'rattiest', 'ratting', 'rattle', 'rattled', 'rattler', 'rattlers', 'rattles', 'rattling', 'rattlings', 'rattrap', 'rattraps', 'ratty', 'raucous', 'raucously', 'raul', 'raunchier', 'raunchy', 'ravage', 'ravaged', 'ravages', 'ravaging', 'rave', 'raved', 'ravel', 'raveled', 'raveling', 'ravelled', 'ravelling', 'ravels', 'raven', 'ravened', 'ravening', 'ravenous', 'ravens', 'raves', 'ravine', 'ravines', 'raving', 'ravings', 'ravioli', 'raviolis', 'ravish', 'ravished', 'ravishes', 'ravishing', 'raw', 'rawboned', 'rawer', 'rawest', 'rawhide', 'rawness', 'ray', 'rayban', 'rayburn', 'rayleigh', 'raymond', 'raymundo', 'rayon', 'rays', 'raze', 'razed', 'razes', 'razing', 'razor', 'razors', 'razz', 'razzed', 'razzes', 'razzing', 'rca', 'reach', 'reachable', 'reached', 'reaches', 'reaching', 'react', 'reacted', 'reacting', 'reaction', 'reactions', 'reactive', 'reactor', 'reactors', 'reacts', 'read', 'readable', 'reader', 'readers', 'readied', 'readier', 'readies', 'readiest', 'readily', 'readiness', 'reading', 'readings', 'readjust', 'readjusts', 'readmit', 'readmits', 'readout', 'readouts', 'reads', 'ready', 'readying', 'reaffirm', 'reaffirms', 'reagan', 'reagent', 'reagents', 'real', 'realer', 'reales', 'realest', 'realign', 'realism', 'realist', 'realistic', 'realists', 'realities', 'reality', 'realize', 'realized', 'realizes', 'realizing', 'really', 'realm', 'realms', 'reals', 'realtor', 'realtors', 'realty', 'ream', 'reamed', 'reamer', 'reamers', 'reaming', 'reams', 'reanimate', 'reap', 'reaped', 'reaper', 'reapers', 'reaping', 'reappear', 'reappears', 'reapplied', 'reapplies', 'reapply', 'reappoint', 'reaps', 'rear', 'reared', 'rearing', 'rearm', 'rearmed', 'rearming', 'rearmost', 'rearms', 'rearrange', 'rears', 'rearward', 'rearwards', 'reason', 'reasoned', 'reasoner', 'reasoning', 'reasons', 'reassert', 'reasserts', 'reassess', 'reassign', 'reassigns', 'reassure', 'reassured', 'reassures', 'reawaken', 'reawakens', 'reba', 'rebate', 'rebated', 'rebates', 'rebating', 'rebecca', 'rebekah', 'rebel', 'rebelled', 'rebelling', 'rebellion', 'rebels', 'rebind', 'rebinding', 'rebinds', 'rebirth', 'rebirths', 'reborn', 'rebound', 'rebounded', 'rebounds', 'rebuff', 'rebuffed', 'rebuffing', 'rebuffs', 'rebuild', 'rebuilds', 'rebuilt', 'rebuke', 'rebuked', 'rebukes', 'rebuking', 'rebus', 'rebuses', 'rebut', 'rebuts', 'rebuttal', 'rebuttals', 'rebutted', 'rebutting', 'recall', 'recalled', 'recalling', 'recalls', 'recant', 'recanted', 'recanting', 'recants', 'recap', 'recapped', 'recapping', 'recaps', 'recapture', 'recast', 'recasting', 'recasts', 'recede', 'receded', 'recedes', 'receding', 'receipt', 'receipted', 'receipts', 'receive', 'received', 'receivers', 'receives', 'receiving', 'recent', 'recenter', 'recentest', 'recently', 'reception', 'receptive', 'receptor', 'receptors', 'recess', 'recessed', 'recesses', 'recessing', 'recession', 'recessive', 'recharge', 'recharged', 'recharges', 'recheck', 'rechecked', 'rechecks', 'recife', 'recipe', 'recipes', 'recipient', 'recital', 'recitals', 'recite', 'recited', 'recites', 'reciting', 'reckless', 'reckon', 'reckoned', 'reckoning', 'reckons', 'reclaim', 'reclaimed', 'reclaims', 'recline', 'reclined', 'recliner', 'recliners', 'reclines', 'reclining', 'recluse', 'recluses', 'reclusive', 'recognize', 'recoil', 'recoiled', 'recoiling', 'recoils', 'recollect', 'recombine', 'recommend', 'recompile', 'reconcile', 'recondite', 'reconnect', 'reconquer', 'reconvene', 'recopied', 'recopies', 'recopy', 'recopying', 'record', 'recorded', 'recorder', 'recorders', 'recording', 'records', 'recount', 'recounted', 'recounts', 'recoup', 'recouped', 'recouping', 'recoups', 'recourse', 'recover', 'recovered', 'recovers', 'recovery', 'recreant', 'recreants', 'recreate', 'recreated', 'recreates', 'recruit', 'recruited', 'recruiter', 'recruits', 'recta', 'rectal', 'rectangle', 'rectified', 'rectifier', 'rectifies', 'rectify', 'rectitude', 'rector', 'rectories', 'rectors', 'rectory', 'rectum', 'rectums', 'recumbent', 'recur', 'recurred', 'recurrent', 'recurring', 'recurs', 'recursion', 'recursive', 'recycle', 'recycled', 'recycles', 'recycling', 'red', 'redbreast', 'redcap', 'redcaps', 'redcoat', 'redcoats', 'redden', 'reddened', 'reddening', 'reddens', 'redder', 'reddest', 'reddish', 'redeem', 'redeemed', 'redeemer', 'redeemers', 'redeeming', 'redeems', 'redefine', 'redefined', 'redefines', 'redeploy', 'redeploys', 'redesign', 'redesigns', 'redevelop', 'redford', 'redgrave', 'redhead', 'redheaded', 'redheads', 'redid', 'redirect', 'redirects', 'redmond', 'redneck', 'rednecks', 'redness', 'redo', 'redoes', 'redoing', 'redolence', 'redolent', 'redone', 'redouble', 'redoubled', 'redoubles', 'redoubt', 'redoubts', 'redound', 'redounded', 'redounds', 'redraft', 'redrafted', 'redrafts', 'redraw', 'redrawing', 'redrawn', 'redraws', 'redress', 'redressed', 'redresses', 'redrew', 'reds', 'redskin', 'redskins', 'reduce', 'reduced', 'reduces', 'reducing', 'reduction', 'redundant', 'redwood', 'redwoods', 'reebok', 'reed', 'reedier', 'reediest', 'reeds', 'reeducate', 'reedy', 'reef', 'reefed', 'reefer', 'reefers', 'reefing', 'reefs', 'reek', 'reeked', 'reeking', 'reeks', 'reel', 'reelect', 'reelected', 'reelects', 'reeled', 'reeling', 'reels', 'reemerge', 'reemerged', 'reemerges', 'reenact', 'reenacted', 'reenacts', 'reenforce', 'reenlist', 'reenlists', 'reenter', 'reentered', 'reenters', 'reentries', 'reentry', 'reese', 'reeve', 'reeved', 'reeves', 'reeving', 'reexamine', 'ref', 'refashion', 'refectory', 'refer', 'referee', 'refereed', 'referees', 'reference', 'referenda', 'referent', 'referral', 'referrals', 'referred', 'referring', 'refers', 'reffed', 'reffing', 'refile', 'refiled', 'refiles', 'refiling', 'refill', 'refilled', 'refilling', 'refills', 'refinance', 'refine', 'refined', 'refiner', 'refiners', 'refinery', 'refines', 'refining', 'refinish', 'refit', 'refits', 'refitted', 'refitting', 'reflect', 'reflected', 'reflector', 'reflects', 'reflex', 'reflexes', 'reflexive', 'refocus', 'refocused', 'refocuses', 'reforest', 'reforests', 'reform', 'reformat', 'reformed', 'reformer', 'reformers', 'reforming', 'reforms', 'refract', 'refracted', 'refracts', 'refrain', 'refrained', 'refrains', 'refresh', 'refreshed', 'refresher', 'refreshes', 'refs', 'refuel', 'refueled', 'refueling', 'refuelled', 'refuels', 'refuge', 'refugee', 'refugees', 'refuges', 'refugio', 'refulgent', 'refund', 'refunded', 'refunding', 'refunds', 'refurbish', 'refurnish', 'refusal', 'refusals', 'refuse', 'refused', 'refuses', 'refusing', 'refute', 'refuted', 'refutes', 'refuting', 'regain', 'regained', 'regaining', 'regains', 'regal', 'regale', 'regaled', 'regales', 'regalia', 'regaling', 'regally', 'regard', 'regarded', 'regarding', 'regards', 'regatta', 'regattas', 'regencies', 'regency', 'regent', 'regents', 'reggae', 'reggie', 'regicide', 'regicides', 'regime', 'regimen', 'regimens', 'regiment', 'regiments', 'regimes', 'regina', 'reginae', 'reginald', 'region', 'regional', 'regions', 'register', 'registers', 'registrar', 'registry', 'regor', 'regress', 'regressed', 'regresses', 'regret', 'regretful', 'regrets', 'regretted', 'regroup', 'regrouped', 'regroups', 'regular', 'regularly', 'regulars', 'regulate', 'regulated', 'regulates', 'regulator', 'regulus', 'rehab', 'rehabbed', 'rehabbing', 'rehabs', 'rehash', 'rehashed', 'rehashes', 'rehashing', 'rehearsal', 'rehearse', 'rehearsed', 'rehearses', 'reheat', 'reheated', 'reheating', 'reheats', 'rehire', 'rehired', 'rehires', 'rehiring', 'rehnquist', 'reich', 'reichstag', 'reid', 'reign', 'reigned', 'reigning', 'reigns', 'reilly', 'reimburse', 'reimpose', 'reimposed', 'reimposes', 'rein', 'reinaldo', 'reindeer', 'reindeers', 'reined', 'reinforce', 'reinhardt', 'reinhold', 'reining', 'reins', 'reinsert', 'reinserts', 'reinstall', 'reinstate', 'reinvent', 'reinvents', 'reinvest', 'reinvests', 'reis', 'reissue', 'reissued', 'reissues', 'reissuing', 'reiterate', 'reject', 'rejected', 'rejecting', 'rejection', 'rejects', 'rejoice', 'rejoiced', 'rejoices', 'rejoicing', 'rejoin', 'rejoinder', 'rejoined', 'rejoining', 'rejoins', 'rekindle', 'rekindled', 'rekindles', 'relabel', 'relabeled', 'relabels', 'relaid', 'relapse', 'relapsed', 'relapses', 'relapsing', 'relate', 'related', 'relates', 'relating', 'relation', 'relations', 'relative', 'relatives', 'relax', 'relaxant', 'relaxants', 'relaxed', 'relaxes', 'relaxing', 'relay', 'relayed', 'relaying', 'relays', 'relearn', 'relearned', 'relearns', 'release', 'released', 'releases', 'releasing', 'relegate', 'relegated', 'relegates', 'relent', 'relented', 'relenting', 'relents', 'relevance', 'relevancy', 'relevant', 'reliable', 'reliably', 'reliance', 'reliant', 'relic', 'relics', 'relied', 'relief', 'reliefs', 'relies', 'relieve', 'relieved', 'relieves', 'relieving', 'religion', 'religions', 'religious', 'relish', 'relished', 'relishes', 'relishing', 'relive', 'relived', 'relives', 'reliving', 'reload', 'reloaded', 'reloading', 'reloads', 'relocate', 'relocated', 'relocates', 'reluctant', 'rely', 'relying', 'remade', 'remain', 'remainder', 'remained', 'remaining', 'remains', 'remake', 'remakes', 'remaking', 'remand', 'remanded', 'remanding', 'remands', 'remark', 'remarked', 'remarking', 'remarks', 'remarque', 'remarried', 'remarries', 'remarry', 'rematch', 'rematches', 'rembrandt', 'remedial', 'remedied', 'remedies', 'remedy', 'remedying', 'remember', 'remembers', 'remind', 'reminded', 'reminder', 'reminders', 'reminding', 'reminds', 'remington', 'reminisce', 'remiss', 'remission', 'remit', 'remits', 'remitted', 'remitting', 'remnant', 'remnants', 'remodel', 'remodeled', 'remodels', 'remorse', 'remote', 'remotely', 'remoter', 'remotes', 'remotest', 'remount', 'remounted', 'remounts', 'removable', 'removal', 'removals', 'remove', 'removed', 'remover', 'removers', 'removes', 'removing', 'remus', 'rena', 'renal', 'rename', 'renamed', 'renames', 'renaming', 'renascent', 'renault', 'rend', 'render', 'rendered', 'rendering', 'renders', 'rending', 'rendition', 'rends', 'rene', 'renee', 'renegade', 'renegaded', 'renegades', 'renege', 'reneged', 'reneges', 'reneging', 'renew', 'renewable', 'renewal', 'renewals', 'renewed', 'renewing', 'renews', 'rennet', 'reno', 'renoir', 'renounce', 'renounced', 'renounces', 'renovate', 'renovated', 'renovates', 'renovator', 'renown', 'renowned', 'rent', 'rental', 'rentals', 'rented', 'renter', 'renters', 'renting', 'rents', 'renumber', 'renumbers', 'reoccupy', 'reoccur', 'reoccurs', 'reopen', 'reopened', 'reopening', 'reopens', 'reorder', 'reordered', 'reorders', 'reorg', 'reorged', 'reorging', 'reorgs', 'rep', 'repackage', 'repaid', 'repaint', 'repainted', 'repaints', 'repair', 'repaired', 'repairing', 'repairman', 'repairmen', 'repairs', 'repartee', 'repast', 'repasts', 'repay', 'repayable', 'repaying', 'repayment', 'repays', 'repeal', 'repealed', 'repealing', 'repeals', 'repeat', 'repeated', 'repeater', 'repeaters', 'repeating', 'repeats', 'repel', 'repellant', 'repelled', 'repellent', 'repelling', 'repels', 'repent', 'repentant', 'repented', 'repenting', 'repents', 'repertory', 'rephrase', 'rephrased', 'rephrases', 'replace', 'replaced', 'replaces', 'replacing', 'replay', 'replayed', 'replaying', 'replays', 'replenish', 'replete', 'repleted', 'repletes', 'repleting', 'repletion', 'replica', 'replicas', 'replicate', 'replied', 'replies', 'reply', 'replying', 'report', 'reportage', 'reported', 'reporter', 'reporters', 'reporting', 'reports', 'repose', 'reposed', 'reposeful', 'reposes', 'reposing', 'repossess', 'reprehend', 'represent', 'repress', 'repressed', 'represses', 'reprieve', 'reprieved', 'reprieves', 'reprimand', 'reprint', 'reprinted', 'reprints', 'reprisal', 'reprisals', 'reprise', 'reprises', 'reprising', 'reprized', 'reproach', 'reprobate', 'reprocess', 'reproduce', 'reprogram', 'reproof', 'reproofed', 'reproofs', 'reprove', 'reproved', 'reproves', 'reproving', 'reps', 'reptile', 'reptiles', 'reptilian', 'republic', 'republics', 'republish', 'repudiate', 'repugnant', 'repulse', 'repulsed', 'repulses', 'repulsing', 'repulsion', 'repulsive', 'reputable', 'reputably', 'repute', 'reputed', 'reputedly', 'reputes', 'reputing', 'request', 'requested', 'requester', 'requests', 'requiem', 'requiems', 'require', 'required', 'requires', 'requiring', 'requisite', 'requital', 'requite', 'requited', 'requites', 'requiting', 'reran', 'reread', 'rereading', 'rereads', 'reroute', 'rerouted', 'reroutes', 'rerouting', 'rerun', 'rerunning', 'reruns', 'resale', 'resales', 'rescind', 'rescinded', 'rescinds', 'rescue', 'rescued', 'rescuer', 'rescuers', 'rescues', 'rescuing', 'research', 'resell', 'reselling', 'resells', 'resemble', 'resembled', 'resembles', 'resend', 'resent', 'resented', 'resentful', 'resenting', 'resents', 'reserve', 'reserved', 'reserves', 'reserving', 'reservist', 'reservoir', 'reset', 'resets', 'resetting', 'resettle', 'resettled', 'resettles', 'reshuffle', 'reside', 'resided', 'residence', 'residency', 'resident', 'residents', 'resides', 'residing', 'residual', 'residuals', 'residue', 'residues', 'resign', 'resigned', 'resigning', 'resigns', 'resilient', 'resin', 'resinous', 'resins', 'resist', 'resistant', 'resisted', 'resister', 'resisters', 'resisting', 'resistor', 'resistors', 'resists', 'resold', 'resolute', 'resolve', 'resolved', 'resolver', 'resolves', 'resolving', 'resonance', 'resonant', 'resonate', 'resonated', 'resonates', 'resonator', 'resort', 'resorted', 'resorting', 'resorts', 'resound', 'resounded', 'resounds', 'resource', 'resources', 'respect', 'respected', 'respects', 'respell', 'respelled', 'respells', 'respelt', 'respire', 'respired', 'respires', 'respiring', 'respite', 'respites', 'respond', 'responded', 'responds', 'response', 'responses', 'rest', 'restart', 'restarted', 'restarts', 'restate', 'restated', 'restates', 'restating', 'rested', 'restful', 'restfully', 'resting', 'restive', 'restively', 'restless', 'restock', 'restocked', 'restocks', 'restore', 'restored', 'restorer', 'restorers', 'restores', 'restoring', 'restrain', 'restrains', 'restraint', 'restrict', 'restricts', 'restroom', 'restrooms', 'rests', 'restudied', 'restudies', 'restudy', 'resubmit', 'resubmits', 'result', 'resultant', 'resulted', 'resulting', 'results', 'resume', 'resumed', 'resumes', 'resuming', 'resupply', 'resurface', 'resurgent', 'resurrect', 'retail', 'retailed', 'retailer', 'retailers', 'retailing', 'retails', 'retain', 'retained', 'retainer', 'retainers', 'retaining', 'retains', 'retake', 'retaken', 'retakes', 'retaking', 'retaliate', 'retard', 'retardant', 'retarded', 'retarding', 'retards', 'retch', 'retched', 'retches', 'retching', 'retell', 'retelling', 'retells', 'retention', 'retentive', 'rethink', 'rethinks', 'rethought', 'reticence', 'reticent', 'retina', 'retinae', 'retinal', 'retinas', 'retinue', 'retinues', 'retire', 'retired', 'retiree', 'retirees', 'retires', 'retiring', 'retold', 'retook', 'retool', 'retooled', 'retooling', 'retools', 'retort', 'retorted', 'retorting', 'retorts', 'retouch', 'retouched', 'retouches', 'retrace', 'retraced', 'retraces', 'retracing', 'retract', 'retracted', 'retracts', 'retrain', 'retrained', 'retrains', 'retread', 'retreaded', 'retreads', 'retreat', 'retreated', 'retreats', 'retrench', 'retrial', 'retrials', 'retried', 'retries', 'retrieval', 'retrieve', 'retrieved', 'retriever', 'retrieves', 'retrod', 'retrodden', 'retrofit', 'retrofits', 'retry', 'retrying', 'retweet', 'retweeted', 'retweets', 'retype', 'retyped', 'retypes', 'retyping', 'reuben', 'reunified', 'reunifies', 'reunify', 'reunion', 'reunions', 'reunite', 'reunited', 'reunites', 'reuniting', 'reusable', 'reuse', 'reused', 'reuses', 'reusing', 'reuters', 'reuther', 'rev', 'reva', 'revalue', 'revalued', 'revalues', 'revaluing', 'revamp', 'revamped', 'revamping', 'revamps', 'reveal', 'revealed', 'revealing', 'reveals', 'reveille', 'revel', 'reveled', 'reveler', 'revelers', 'reveling', 'revelled', 'reveller', 'revellers', 'revelling', 'revelries', 'revelry', 'revels', 'revenge', 'revenged', 'revenges', 'revenging', 'revenue', 'revenues', 'revere', 'revered', 'reverence', 'reverend', 'reverends', 'reverent', 'reveres', 'reverie', 'reveries', 'revering', 'reversal', 'reversals', 'reverse', 'reversed', 'reverses', 'reversing', 'reversion', 'revert', 'reverted', 'reverting', 'reverts', 'revery', 'review', 'reviewed', 'reviewer', 'reviewers', 'reviewing', 'reviews', 'revile', 'reviled', 'reviler', 'revilers', 'reviles', 'reviling', 'revise', 'revised', 'revises', 'revising', 'revision', 'revisions', 'revisit', 'revisited', 'revisits', 'revival', 'revivals', 'revive', 'revived', 'revives', 'revivify', 'reviving', 'revlon', 'revocable', 'revokable', 'revoke', 'revoked', 'revokes', 'revoking', 'revolt', 'revolted', 'revolting', 'revolts', 'revolve', 'revolved', 'revolver', 'revolvers', 'revolves', 'revolving', 'revs', 'revue', 'revues', 'revulsion', 'revved', 'revving', 'reward', 'rewarded', 'rewarding', 'rewards', 'rewind', 'rewinding', 'rewinds', 'rewire', 'rewired', 'rewires', 'rewiring', 'reword', 'reworded', 'rewording', 'rewords', 'rework', 'reworked', 'reworking', 'reworks', 'rewound', 'rewrite', 'rewrites', 'rewriting', 'rewritten', 'rewrote', 'rex', 'reyes', 'reykjavik', 'reyna', 'reynaldo', 'reynolds', 'rhapsodic', 'rhapsody', 'rhea', 'rheas', 'rhee', 'rheingau', 'rhenish', 'rheostat', 'rheostats', 'rhetoric', 'rheum', 'rheumatic', 'rheumy', 'rhiannon', 'rhine', 'rhineland', 'rhino', 'rhinoceri', 'rhinos', 'rhizome', 'rhizomes', 'rho', 'rhoda', 'rhode', 'rhodes', 'rhodesia', 'rhodium', 'rhombi', 'rhomboid', 'rhomboids', 'rhombus', 'rhombuses', 'rhonda', 'rhone', 'rhubarb', 'rhubarbs', 'rhyme', 'rhymed', 'rhymes', 'rhyming', 'rhythm', 'rhythmic', 'rhythms', 'rib', 'ribald', 'ribaldry', 'ribbed', 'ribbing', 'ribbon', 'ribbons', 'ribs', 'ricardo', 'rice', 'riced', 'rices', 'rich', 'richard', 'richards', 'richelieu', 'richer', 'riches', 'richest', 'richie', 'richly', 'richmond', 'richness', 'richter', 'ricing', 'rick', 'ricked', 'ricketier', 'rickets', 'rickety', 'rickey', 'rickie', 'ricking', 'rickover', 'ricks', 'ricksha', 'rickshas', 'rickshaw', 'rickshaws', 'ricky', 'rico', 'ricochet', 'ricochets', 'ricotta', 'rid', 'riddance', 'ridded', 'ridden', 'ridding', 'riddle', 'riddled', 'riddles', 'riddling', 'ride', 'rider', 'riders', 'rides', 'ridge', 'ridged', 'ridgepole', 'ridges', 'ridging', 'ridicule', 'ridiculed', 'ridicules', 'riding', 'rids', 'riel', 'riemann', 'riesling', 'rife', 'rifer', 'rifest', 'riff', 'riffed', 'riffing', 'riffle', 'riffled', 'riffles', 'riffling', 'riffraff', 'riffs', 'rifle', 'rifled', 'rifleman', 'riflemen', 'rifles', 'rifling', 'rift', 'rifted', 'rifting', 'rifts', 'rig', 'riga', 'rigel', 'rigged', 'rigging', 'riggs', 'right', 'righted', 'righteous', 'righter', 'rightest', 'rightful', 'righting', 'rightist', 'rightists', 'rightly', 'rightmost', 'rightness', 'rights', 'rigid', 'rigidity', 'rigidly', 'rigidness', 'rigmarole', 'rigoberto', 'rigoletto', 'rigor', 'rigorous', 'rigors', 'rigs', 'rile', 'riled', 'riles', 'riley', 'riling', 'rilke', 'rill', 'rills', 'rim', 'rimbaud', 'rime', 'rimed', 'rimes', 'riming', 'rimmed', 'rimming', 'rims', 'rind', 'rinds', 'ring', 'ringed', 'ringer', 'ringers', 'ringing', 'ringlet', 'ringlets', 'ringling', 'ringo', 'rings', 'ringside', 'ringtone', 'ringtones', 'ringworm', 'rink', 'rinks', 'rinse', 'rinsed', 'rinses', 'rinsing', 'rio', 'rios', 'riot', 'rioted', 'rioter', 'rioters', 'rioting', 'riotous', 'riots', 'rip', 'ripe', 'ripely', 'ripen', 'ripened', 'ripeness', 'ripening', 'ripens', 'riper', 'ripest', 'ripley', 'riposte', 'riposted', 'ripostes', 'riposting', 'ripped', 'ripper', 'rippers', 'ripping', 'ripple', 'rippled', 'ripples', 'rippling', 'rips', 'ripsaw', 'ripsaws', 'rise', 'risen', 'riser', 'risers', 'rises', 'risible', 'rising', 'risk', 'risked', 'riskier', 'riskiest', 'riskiness', 'risking', 'risks', 'risky', 'rita', 'ritalin', 'rite', 'rites', 'ritual', 'ritualism', 'ritually', 'rituals', 'ritz', 'ritzier', 'ritziest', 'ritzy', 'rival', 'rivaled', 'rivaling', 'rivalled', 'rivalling', 'rivalries', 'rivalry', 'rivals', 'rivas', 'riven', 'river', 'rivera', 'riverbed', 'riverbeds', 'rivers', 'riverside', 'rivet', 'riveted', 'riveter', 'riveters', 'riveting', 'rivets', 'rivetted', 'rivetting', 'riviera', 'rivieras', 'rivulet', 'rivulets', 'riyadh', 'rizal', 'roach', 'roaches', 'road', 'roadbed', 'roadbeds', 'roadblock', 'roadhouse', 'roadkill', 'roads', 'roadshow', 'roadside', 'roadsides', 'roadster', 'roadsters', 'roadway', 'roadways', 'roadwork', 'roam', 'roamed', 'roamer', 'roamers', 'roaming', 'roams', 'roan', 'roans', 'roar', 'roared', 'roaring', 'roars', 'roast', 'roasted', 'roaster', 'roasters', 'roasting', 'roasts', 'rob', 'robbed', 'robber', 'robberies', 'robbers', 'robbery', 'robbie', 'robbin', 'robbing', 'robbins', 'robby', 'robe', 'robed', 'roberson', 'robert', 'roberta', 'roberto', 'roberts', 'robertson', 'robes', 'robeson', 'robin', 'robing', 'robins', 'robinson', 'robles', 'robocall', 'robocalls', 'robot', 'robotic', 'robotics', 'robots', 'robs', 'robson', 'robt', 'robust', 'robuster', 'robustest', 'robustly', 'robyn', 'rocco', 'rocha', 'roche', 'rochelle', 'rochester', 'rock', 'rocked', 'rocker', 'rockers', 'rocket', 'rocketed', 'rocketing', 'rocketry', 'rockets', 'rockford', 'rockier', 'rockies', 'rockiest', 'rockiness', 'rocking', 'rockne', 'rocks', 'rockwell', 'rocky', 'rococo', 'rod', 'rode', 'rodent', 'rodents', 'rodeo', 'rodeos', 'roderick', 'rodger', 'rodgers', 'rodin', 'rodney', 'rodolfo', 'rodrick', 'rodrigo', 'rodriguez', 'rodriquez', 'rods', 'roe', 'roebuck', 'roebucks', 'roeg', 'roentgen', 'roentgens', 'roes', 'rogelio', 'roger', 'rogered', 'rogering', 'rogers', 'roget', 'rogue', 'roguery', 'rogues', 'roguish', 'roguishly', 'roil', 'roiled', 'roiling', 'roils', 'roister', 'roistered', 'roisterer', 'roisters', 'rojas', 'roku', 'rolaids', 'roland', 'rolando', 'role', 'roles', 'rolex', 'roll', 'rolland', 'rollback', 'rollbacks', 'rolled', 'roller', 'rollers', 'rollick', 'rollicked', 'rollicks', 'rolling', 'rollins', 'rolls', 'rolodex', 'rolvaag', 'romaine', 'roman', 'romance', 'romanced', 'romances', 'romancing', 'romania', 'romanian', 'romanians', 'romanies', 'romano', 'romanov', 'romans', 'romansh', 'romantic', 'romantics', 'romany', 'rome', 'romeo', 'romero', 'romes', 'rommel', 'romney', 'romp', 'romped', 'romper', 'rompers', 'romping', 'romps', 'romulus', 'ron', 'ronald', 'ronda', 'ronnie', 'ronny', 'ronstadt', 'rood', 'roods', 'roof', 'roofed', 'roofer', 'roofers', 'roofing', 'roofs', 'rooftop', 'rooftops', 'rook', 'rooked', 'rookeries', 'rookery', 'rookie', 'rookies', 'rooking', 'rooks', 'room', 'roomed', 'roomer', 'roomers', 'roomful', 'roomfuls', 'roomier', 'roomiest', 'roominess', 'rooming', 'roommate', 'roommates', 'rooms', 'roomy', 'rooney', 'roosevelt', 'roost', 'roosted', 'rooster', 'roosters', 'roosting', 'roosts', 'root', 'rooted', 'rooter', 'rooting', 'rootless', 'roots', 'rope', 'roped', 'ropes', 'roping', 'roquefort', 'rorschach', 'rory', 'rosa', 'rosales', 'rosalie', 'rosalind', 'rosalinda', 'rosalyn', 'rosanna', 'rosanne', 'rosaries', 'rosario', 'rosary', 'roscoe', 'rose', 'roseann', 'roseate', 'roseau', 'rosebud', 'rosebuds', 'rosebush', 'rosecrans', 'rosella', 'rosemarie', 'rosemary', 'rosenberg', 'rosendo', 'roses', 'rosetta', 'rosette', 'rosettes', 'rosewood', 'rosewoods', 'rosie', 'rosier', 'rosiest', 'rosily', 'rosin', 'rosined', 'rosiness', 'rosining', 'rosins', 'roslyn', 'ross', 'rossetti', 'rossini', 'rostand', 'roster', 'rosters', 'rostov', 'rostra', 'rostrum', 'rostrums', 'roswell', 'rosy', 'rot', 'rotarian', 'rotaries', 'rotary', 'rotate', 'rotated', 'rotates', 'rotating', 'rotation', 'rotations', 'rote', 'roth', 'rothko', 'rotor', 'rotors', 'rots', 'rotted', 'rotten', 'rottener', 'rottenest', 'rotterdam', 'rotting', 'rotund', 'rotunda', 'rotundas', 'rotundity', 'rouault', 'rouge', 'rouged', 'rouges', 'rough', 'roughage', 'roughed', 'roughen', 'roughened', 'roughens', 'rougher', 'roughest', 'roughing', 'roughly', 'roughneck', 'roughness', 'roughs', 'roughshod', 'rouging', 'roulette', 'roumania', 'round', 'rounded', 'roundelay', 'rounder', 'roundest', 'rounding', 'roundish', 'roundly', 'roundness', 'rounds', 'roundup', 'roundups', 'roundworm', 'rourke', 'rouse', 'roused', 'rouses', 'rousing', 'rousseau', 'rout', 'route', 'routed', 'routeing', 'router', 'routes', 'routine', 'routinely', 'routines', 'routing', 'routinize', 'routs', 'rove', 'roved', 'rover', 'rovers', 'roves', 'roving', 'row', 'rowboat', 'rowboats', 'rowdier', 'rowdies', 'rowdiest', 'rowdiness', 'rowdy', 'rowdyism', 'rowe', 'rowed', 'rowel', 'roweled', 'roweling', 'rowelled', 'rowelling', 'rowels', 'rowena', 'rower', 'rowers', 'rowing', 'rowland', 'rowling', 'rows', 'roxanne', 'roxie', 'roxy', 'roy', 'royal', 'royalist', 'royalists', 'royally', 'royals', 'royalties', 'royalty', 'royce', 'rozelle', 'rub', 'rubaiyat', 'rubbed', 'rubber', 'rubberize', 'rubbers', 'rubbery', 'rubbing', 'rubbish', 'rubbished', 'rubbishes', 'rubbishy', 'rubble', 'rubdown', 'rubdowns', 'rube', 'rubella', 'ruben', 'rubens', 'rubes', 'rubicon', 'rubicund', 'rubier', 'rubies', 'rubiest', 'rubik', 'rubin', 'ruble', 'rubles', 'rubric', 'rubrics', 'rubs', 'ruby', 'ruchbah', 'rucksack', 'rucksacks', 'ruckus', 'ruckuses', 'rudder', 'rudders', 'ruddier', 'ruddiest', 'ruddiness', 'ruddy', 'rude', 'rudely', 'rudeness', 'ruder', 'rudest', 'rudiment', 'rudiments', 'rudolf', 'rudolph', 'rudy', 'rudyard', 'rue', 'rued', 'rueful', 'ruefully', 'rues', 'ruff', 'ruffed', 'ruffian', 'ruffians', 'ruffing', 'ruffle', 'ruffled', 'ruffles', 'ruffling', 'ruffs', 'rufus', 'rug', 'rugby', 'rugged', 'ruggeder', 'ruggedest', 'ruggedly', 'rugrat', 'rugrats', 'rugs', 'ruhr', 'ruin', 'ruination', 'ruined', 'ruing', 'ruining', 'ruinous', 'ruinously', 'ruins', 'ruiz', 'rukeyser', 'rule', 'ruled', 'ruler', 'rulers', 'rules', 'ruling', 'rulings', 'rum', 'rumania', 'rumba', 'rumbaed', 'rumbaing', 'rumbas', 'rumble', 'rumbled', 'rumbles', 'rumbling', 'rumblings', 'ruminant', 'ruminants', 'ruminate', 'ruminated', 'ruminates', 'rummage', 'rummaged', 'rummages', 'rummaging', 'rummer', 'rummest', 'rummy', 'rumor', 'rumored', 'rumoring', 'rumors', 'rump', 'rumple', 'rumpled', 'rumples', 'rumpling', 'rumps', 'rumpus', 'rumpuses', 'rums', 'rumsfeld', 'run', 'runabout', 'runabouts', 'runaround', 'runaway', 'runaways', 'rundown', 'rundowns', 'rune', 'runes', 'rung', 'rungs', 'runnel', 'runnels', 'runner', 'runners', 'runnier', 'runniest', 'running', 'runny', 'runnymede', 'runoff', 'runoffs', 'runs', 'runt', 'runts', 'runway', 'runways', 'runyon', 'rupee', 'rupees', 'rupert', 'rupture', 'ruptured', 'ruptures', 'rupturing', 'rural', 'ruse', 'ruses', 'rush', 'rushdie', 'rushed', 'rushes', 'rushing', 'rushmore', 'rusk', 'ruskin', 'rusks', 'russel', 'russell', 'russet', 'russets', 'russia', 'russian', 'russians', 'russo', 'rust', 'rustbelt', 'rusted', 'rustic', 'rusticity', 'rustics', 'rustier', 'rustiest', 'rustiness', 'rusting', 'rustle', 'rustled', 'rustler', 'rustlers', 'rustles', 'rustling', 'rustproof', 'rusts', 'rusty', 'rut', 'rutabaga', 'rutabagas', 'rutan', 'rutgers', 'ruth', 'ruthie', 'ruthless', 'rutledge', 'ruts', 'rutted', 'rutting', 'rwanda', 'rwandan', 'rwandans', 'rwandas', 'ryan', 'rydberg', 'ryder', 'rye', 'ryukyu', 'saab', 'saar', 'saarinen', 'saatchi', 'sabbath', 'sabbaths', 'saber', 'sabers', 'sabik', 'sabin', 'sabina', 'sabine', 'sable', 'sables', 'sabotage', 'sabotaged', 'sabotages', 'saboteur', 'saboteurs', 'sabre', 'sabres', 'sabrina', 'sac', 'sacajawea', 'saccharin', 'sacco', 'sachem', 'sachems', 'sachet', 'sachets', 'sachs', 'sack', 'sackcloth', 'sacked', 'sackful', 'sackfuls', 'sacking', 'sacks', 'sacrament', 'sacred', 'sacredly', 'sacrifice', 'sacrilege', 'sacristan', 'sacristy', 'sacs', 'sad', 'sadat', 'saddam', 'sadden', 'saddened', 'saddening', 'saddens', 'sadder', 'saddest', 'saddle', 'saddlebag', 'saddled', 'saddles', 'saddling', 'sadducee', 'sade', 'sades', 'sadie', 'sadism', 'sadist', 'sadistic', 'sadists', 'sadly', 'sadness', 'sadr', 'safari', 'safaried', 'safariing', 'safaris', 'safavid', 'safe', 'safeguard', 'safely', 'safeness', 'safer', 'safes', 'safest', 'safeties', 'safety', 'safeway', 'safflower', 'saffron', 'saffrons', 'sag', 'saga', 'sagacious', 'sagacity', 'sagan', 'sagas', 'sage', 'sagebrush', 'sager', 'sages', 'sagest', 'sagged', 'sagging', 'saginaw', 'sago', 'sags', 'saguaro', 'saguaros', 'sahara', 'sahel', 'sahib', 'sahibs', 'said', 'saigon', 'sail', 'sailboard', 'sailboat', 'sailboats', 'sailcloth', 'sailed', 'sailfish', 'sailing', 'sailings', 'sailor', 'sailors', 'sails', 'saint', 'sainthood', 'saintlier', 'saintly', 'saints', 'saiph', 'saith', 'sakai', 'sake', 'sakha', 'sakhalin', 'sakharov', 'saki', 'saks', 'sal', 'salaam', 'salaamed', 'salaaming', 'salaams', 'salable', 'salacious', 'salad', 'saladin', 'salado', 'salads', 'salami', 'salamis', 'salaried', 'salaries', 'salary', 'salas', 'salazar', 'sale', 'saleable', 'salem', 'salerno', 'sales', 'salesgirl', 'salesman', 'salesmen', 'salience', 'salient', 'salients', 'salinas', 'saline', 'salines', 'salinger', 'salinity', 'salisbury', 'salish', 'saliva', 'salivary', 'salivate', 'salivated', 'salivates', 'salk', 'sallie', 'sallied', 'sallies', 'sallow', 'sallower', 'sallowest', 'sallust', 'sally', 'sallying', 'salmon', 'salmons', 'salome', 'salon', 'salons', 'saloon', 'saloons', 'salsa', 'salsas', 'salt', 'salted', 'salter', 'saltest', 'saltier', 'saltiest', 'saltine', 'saltines', 'saltiness', 'salting', 'salton', 'saltpeter', 'saltpetre', 'salts', 'saltwater', 'salty', 'salutary', 'salute', 'saluted', 'salutes', 'saluting', 'salvador', 'salvage', 'salvaged', 'salvages', 'salvaging', 'salvation', 'salvatore', 'salve', 'salved', 'salver', 'salvers', 'salves', 'salving', 'salvo', 'salvoes', 'salvos', 'salween', 'salyut', 'samantha', 'samar', 'samara', 'samaritan', 'samarkand', 'samba', 'sambaed', 'sambaing', 'sambas', 'same', 'sameness', 'sames', 'sammie', 'sammy', 'samoa', 'samoan', 'samoset', 'samovar', 'samovars', 'samoyed', 'sampan', 'sampans', 'sample', 'sampled', 'sampler', 'samplers', 'samples', 'sampling', 'samplings', 'sampson', 'samson', 'samsonite', 'samsung', 'samuel', 'samuelson', 'samurai', 'san', 'sana', 'sanatoria', 'sanchez', 'sancho', 'sancta', 'sanctify', 'sanction', 'sanctions', 'sanctity', 'sanctuary', 'sanctum', 'sanctums', 'sand', 'sandal', 'sandals', 'sandbag', 'sandbags', 'sandbank', 'sandbanks', 'sandbar', 'sandbars', 'sandblast', 'sandbox', 'sandboxes', 'sandburg', 'sanded', 'sander', 'sanders', 'sandhog', 'sandhogs', 'sandier', 'sandiest', 'sandiness', 'sanding', 'sandlot', 'sandlots', 'sandman', 'sandmen', 'sandoval', 'sandpaper', 'sandpiper', 'sandra', 'sands', 'sandstone', 'sandstorm', 'sandwich', 'sandy', 'sane', 'sanely', 'saner', 'sanest', 'sanford', 'sang', 'sanger', 'sangfroid', 'sanguine', 'sanhedrin', 'sanitaria', 'sanitary', 'sanitize', 'sanitized', 'sanitizes', 'sanity', 'sank', 'sanka', 'sankara', 'sans', 'sanserif', 'sanskrit', 'santa', 'santana', 'santayana', 'santeria', 'santiago', 'santos', 'sap', 'sapience', 'sapient', 'sapling', 'saplings', 'sapped', 'sapphire', 'sapphires', 'sappho', 'sappier', 'sappiest', 'sapping', 'sapporo', 'sappy', 'saps', 'sapsucker', 'sara', 'saracen', 'saracens', 'saragossa', 'sarah', 'sarajevo', 'saran', 'sarape', 'sarapes', 'sarasota', 'saratov', 'sarawak', 'sarcasm', 'sarcasms', 'sarcastic', 'sarcoma', 'sarcomas', 'sarcomata', 'sardine', 'sardines', 'sardinia', 'sardonic', 'saree', 'sarees', 'sargasso', 'sargent', 'sargon', 'sari', 'saris', 'sarnoff', 'sarong', 'sarongs', 'saroyan', 'sars', 'sarto', 'sartorial', 'sartre', 'sash', 'sasha', 'sashay', 'sashayed', 'sashaying', 'sashays', 'sashes', 'saskatoon', 'sasquatch', 'sass', 'sassafras', 'sassanian', 'sassed', 'sasses', 'sassier', 'sassiest', 'sassing', 'sassoon', 'sassy', 'sat', 'satan', 'satanic', 'satanism', 'satanist', 'satay', 'satchel', 'satchels', 'sate', 'sated', 'sateen', 'satellite', 'sates', 'satiate', 'satiated', 'satiates', 'satiating', 'satiety', 'satin', 'sating', 'satinwood', 'satiny', 'satire', 'satires', 'satirical', 'satirist', 'satirists', 'satirize', 'satirized', 'satirizes', 'satisfied', 'satisfies', 'satisfy', 'satrap', 'satraps', 'saturate', 'saturated', 'saturates', 'saturday', 'saturdays', 'saturn', 'saturnine', 'satyr', 'satyrs', 'sauce', 'sauced', 'saucepan', 'saucepans', 'saucer', 'saucers', 'sauces', 'saucier', 'sauciest', 'saucily', 'sauciness', 'saucing', 'saucy', 'saudi', 'saudis', 'saul', 'sauna', 'saunaed', 'saunaing', 'saunas', 'saunders', 'saundra', 'saunter', 'sauntered', 'saunters', 'sausage', 'sausages', 'saussure', 'sauted', 'sauterne', 'savage', 'savaged', 'savagely', 'savager', 'savagery', 'savages', 'savagest', 'savaging', 'savanna', 'savannah', 'savannahs', 'savannas', 'savant', 'savants', 'save', 'saved', 'saver', 'savers', 'saves', 'saving', 'savings', 'savior', 'saviors', 'saviour', 'saviours', 'savor', 'savored', 'savorier', 'savories', 'savoriest', 'savoring', 'savors', 'savory', 'savoy', 'savoyard', 'savvied', 'savvier', 'savvies', 'savviest', 'savvy', 'savvying', 'saw', 'sawdust', 'sawed', 'sawhorse', 'sawhorses', 'sawing', 'sawmill', 'sawmills', 'sawn', 'saws', 'sawyer', 'sawyers', 'sax', 'saxes', 'saxon', 'saxons', 'saxony', 'saxophone', 'say', 'sayers', 'saying', 'sayings', 'says', 'scab', 'scabbard', 'scabbards', 'scabbed', 'scabbier', 'scabbiest', 'scabbing', 'scabby', 'scabies', 'scabrous', 'scabs', 'scad', 'scads', 'scaffold', 'scaffolds', 'scala', 'scalar', 'scalars', 'scalawag', 'scalawags', 'scald', 'scalded', 'scalding', 'scalds', 'scale', 'scaled', 'scalene', 'scales', 'scalier', 'scaliest', 'scaling', 'scallion', 'scallions', 'scallop', 'scalloped', 'scallops', 'scallywag', 'scalp', 'scalped', 'scalpel', 'scalpels', 'scalper', 'scalpers', 'scalping', 'scalps', 'scaly', 'scam', 'scammed', 'scammer', 'scammers', 'scamming', 'scamp', 'scamper', 'scampered', 'scampers', 'scampi', 'scampies', 'scamps', 'scams', 'scan', 'scandal', 'scandals', 'scanned', 'scanner', 'scanners', 'scanning', 'scans', 'scansion', 'scant', 'scanted', 'scanter', 'scantest', 'scantier', 'scanties', 'scantiest', 'scantily', 'scanting', 'scants', 'scanty', 'scapegoat', 'scapula', 'scapulae', 'scapulas', 'scar', 'scarab', 'scarabs', 'scarce', 'scarcely', 'scarcer', 'scarcest', 'scarcity', 'scare', 'scarecrow', 'scared', 'scares', 'scarf', 'scarfed', 'scarfing', 'scarfs', 'scarier', 'scariest', 'scarified', 'scarifies', 'scarify', 'scaring', 'scarlatti', 'scarlet', 'scarred', 'scarring', 'scars', 'scarves', 'scary', 'scat', 'scathing', 'scats', 'scatted', 'scatter', 'scattered', 'scatters', 'scatting', 'scavenge', 'scavenged', 'scavenger', 'scavenges', 'scenario', 'scenarios', 'scene', 'scenery', 'scenes', 'scenic', 'scent', 'scented', 'scenting', 'scents', 'scepter', 'scepters', 'scheat', 'schedar', 'schedule', 'scheduled', 'scheduler', 'schedules', 'schelling', 'schema', 'schematic', 'scheme', 'schemed', 'schemer', 'schemers', 'schemes', 'scheming', 'scherzi', 'scherzo', 'scherzos', 'schick', 'schiller', 'schindler', 'schism', 'schisms', 'schist', 'schizoid', 'schizoids', 'schlemiel', 'schlep', 'schlepp', 'schlepped', 'schlepps', 'schleps', 'schlitz', 'schlock', 'schlocky', 'schmaltz', 'schmaltzy', 'schmalz', 'schmalzy', 'schmidt', 'schmooze', 'schmoozed', 'schmoozes', 'schmuck', 'schmucks', 'schnabel', 'schnapps', 'schnauzer', 'schneider', 'scholar', 'scholarly', 'scholars', 'school', 'schoolboy', 'schooled', 'schooling', 'schools', 'schooner', 'schooners', 'schrod', 'schrods', 'schroeder', 'schtick', 'schticks', 'schubert', 'schultz', 'schulz', 'schumann', 'schuss', 'schussed', 'schusses', 'schussing', 'schuyler', 'schwa', 'schwartz', 'schwas', 'schweppes', 'schwinger', 'schwinn', 'sciatic', 'sciatica', 'science', 'sciences', 'scientist', 'scimitar', 'scimitars', 'scintilla', 'scion', 'scions', 'scipio', 'scissor', 'scissors', 'sclerosis', 'sclerotic', 'scoff', 'scoffed', 'scoffing', 'scofflaw', 'scofflaws', 'scoffs', 'scold', 'scolded', 'scolding', 'scoldings', 'scolds', 'scoliosis', 'scollop', 'scolloped', 'scollops', 'sconce', 'sconces', 'scone', 'scones', 'scoop', 'scooped', 'scooping', 'scoops', 'scoot', 'scooted', 'scooter', 'scooters', 'scooting', 'scoots', 'scope', 'scoped', 'scopes', 'scoping', 'scorch', 'scorched', 'scorcher', 'scorchers', 'scorches', 'scorching', 'score', 'scorecard', 'scored', 'scoreless', 'scorer', 'scorers', 'scores', 'scoring', 'scorn', 'scorned', 'scornful', 'scorning', 'scorns', 'scorpio', 'scorpion', 'scorpions', 'scorpios', 'scorpius', 'scorsese', 'scot', 'scotch', 'scotched', 'scotches', 'scotching', 'scotchman', 'scotchmen', 'scotchs', 'scotia', 'scotland', 'scots', 'scotsman', 'scotsmen', 'scott', 'scottie', 'scottish', 'scotty', 'scoundrel', 'scour', 'scoured', 'scourge', 'scourged', 'scourges', 'scourging', 'scouring', 'scours', 'scout', 'scouted', 'scouting', 'scouts', 'scow', 'scowl', 'scowled', 'scowling', 'scowls', 'scows', 'scrabble', 'scrabbled', 'scrabbles', 'scraggly', 'scram', 'scramble', 'scrambled', 'scrambler', 'scrambles', 'scrammed', 'scramming', 'scrams', 'scranton', 'scrap', 'scrapbook', 'scrape', 'scraped', 'scraper', 'scrapers', 'scrapes', 'scraping', 'scrapped', 'scrappier', 'scrapping', 'scrappy', 'scraps', 'scratch', 'scratched', 'scratches', 'scratchy', 'scrawl', 'scrawled', 'scrawling', 'scrawls', 'scrawnier', 'scrawny', 'scream', 'screamed', 'screaming', 'screams', 'screech', 'screeched', 'screeches', 'screechy', 'screen', 'screened', 'screening', 'screens', 'screw', 'screwball', 'screwed', 'screwier', 'screwiest', 'screwing', 'screws', 'screwy', 'scriabin', 'scribble', 'scribbled', 'scribbler', 'scribbles', 'scribe', 'scribes', 'scribner', 'scrimmage', 'scrimp', 'scrimped', 'scrimping', 'scrimps', 'scrimshaw', 'scrip', 'scrips', 'script', 'scripted', 'scripting', 'scripts', 'scripture', 'scrod', 'scrods', 'scrofula', 'scroll', 'scrolled', 'scrolling', 'scrolls', 'scrooge', 'scrooges', 'scrota', 'scrotum', 'scrotums', 'scrounge', 'scrounged', 'scrounger', 'scrounges', 'scrub', 'scrubbed', 'scrubber', 'scrubbers', 'scrubbier', 'scrubbing', 'scrubby', 'scrubs', 'scruff', 'scruffier', 'scruffs', 'scruffy', 'scruggs', 'scrunch', 'scrunched', 'scrunches', 'scrunchie', 'scrunchy', 'scruple', 'scrupled', 'scruples', 'scrupling', 'scrutiny', 'scuba', 'scubaed', 'scubaing', 'scubas', 'scud', 'scudded', 'scudding', 'scuds', 'scuff', 'scuffed', 'scuffing', 'scuffle', 'scuffled', 'scuffles', 'scuffling', 'scuffs', 'scull', 'sculled', 'scullery', 'sculley', 'sculling', 'scullion', 'scullions', 'sculls', 'sculpt', 'sculpted', 'sculpting', 'sculptor', 'sculptors', 'sculpts', 'sculpture', 'scum', 'scumbag', 'scumbags', 'scummed', 'scummier', 'scummiest', 'scumming', 'scummy', 'scums', 'scupper', 'scuppered', 'scuppers', 'scurf', 'scurfy', 'scurried', 'scurries', 'scurry', 'scurrying', 'scurvier', 'scurviest', 'scurvy', 'scuttle', 'scuttled', 'scuttles', 'scuttling', 'scuzzier', 'scuzziest', 'scuzzy', 'scylla', 'scythe', 'scythed', 'scythes', 'scythia', 'scythian', 'scything', 'sea', 'seabed', 'seabeds', 'seabird', 'seabirds', 'seaboard', 'seaboards', 'seaborg', 'seacoast', 'seacoasts', 'seafarer', 'seafarers', 'seafaring', 'seafood', 'seagoing', 'seagram', 'seal', 'sealant', 'sealants', 'sealer', 'sealers', 'sealing', 'seals', 'sealskin', 'seam', 'seaman', 'seamed', 'seamen', 'seamier', 'seamiest', 'seaming', 'seamless', 'seams', 'seamy', 'sean', 'seaplane', 'seaplanes', 'seaport', 'seaports', 'sear', 'search', 'searched', 'searcher', 'searchers', 'searches', 'searching', 'seared', 'searing', 'sears', 'seas', 'seascape', 'seascapes', 'seashell', 'seashells', 'seashore', 'seashores', 'seasick', 'seaside', 'seasides', 'season', 'seasonal', 'seasoned', 'seasoning', 'seasons', 'seat', 'seated', 'seating', 'seats', 'seattle', 'seaward', 'seawards', 'seaway', 'seaways', 'seaweed', 'seaworthy', 'sebaceous', 'sebastian', 'secede', 'seceded', 'secedes', 'seceding', 'secession', 'seclude', 'secluded', 'secludes', 'secluding', 'seclusion', 'seclusive', 'seconal', 'second', 'secondary', 'seconded', 'seconding', 'secondly', 'seconds', 'secrecy', 'secret', 'secretary', 'secrete', 'secreted', 'secretes', 'secreting', 'secretion', 'secretive', 'secretly', 'secrets', 'secs', 'sect', 'sectarian', 'section', 'sectional', 'sectioned', 'sections', 'sector', 'sectors', 'sects', 'secular', 'secure', 'secured', 'securely', 'securer', 'secures', 'securest', 'securing', 'security', 'sedan', 'sedans', 'sedate', 'sedated', 'sedately', 'sedater', 'sedates', 'sedatest', 'sedating', 'sedation', 'sedative', 'sedatives', 'sedentary', 'seder', 'seders', 'sedge', 'sediment', 'sediments', 'sedition', 'seditious', 'sedna', 'seduce', 'seduced', 'seducer', 'seducers', 'seduces', 'seducing', 'seduction', 'seductive', 'sedulous', 'see', 'seebeck', 'seed', 'seeded', 'seedier', 'seediest', 'seediness', 'seeding', 'seedless', 'seedling', 'seedlings', 'seeds', 'seedy', 'seeger', 'seeing', 'seeings', 'seek', 'seeker', 'seekers', 'seeking', 'seeks', 'seem', 'seemed', 'seeming', 'seemingly', 'seemlier', 'seemliest', 'seemly', 'seems', 'seen', 'seep', 'seepage', 'seeped', 'seeping', 'seeps', 'seer', 'seers', 'sees', 'seesaw', 'seesawed', 'seesawing', 'seesaws', 'seethe', 'seethed', 'seethes', 'seething', 'sega', 'segment', 'segmented', 'segments', 'segovia', 'segre', 'segregate', 'segue', 'segued', 'segueing', 'segues', 'segundo', 'seiko', 'seine', 'seinfeld', 'seismic', 'seize', 'seized', 'seizes', 'seizing', 'seizure', 'seizures', 'sejong', 'selassie', 'seldom', 'select', 'selected', 'selecting', 'selection', 'selective', 'selectman', 'selectmen', 'selector', 'selectors', 'selectric', 'selects', 'selena', 'selenium', 'seleucid', 'seleucus', 'selfie', 'selfies', 'selfish', 'selfishly', 'selfless', 'selfsame', 'selim', 'seljuk', 'selkirk', 'sell', 'seller', 'sellers', 'selling', 'selloff', 'selloffs', 'sellout', 'sellouts', 'sells', 'selma', 'seltzer', 'selvage', 'selvages', 'selvedge', 'selvedges', 'selves', 'selznick', 'semantic', 'semantics', 'semaphore', 'semarang', 'semblance', 'semen', 'semester', 'semesters', 'semi', 'semicolon', 'semifinal', 'seminal', 'seminar', 'seminars', 'seminary', 'seminole', 'seminoles', 'semiotics', 'semiramis', 'semis', 'semite', 'semites', 'semitic', 'semitics', 'semitone', 'semitones', 'semtex', 'senate', 'senates', 'senator', 'senators', 'send', 'sendai', 'sender', 'senders', 'sending', 'sends', 'seneca', 'senecas', 'senegal', 'senghor', 'senile', 'senility', 'senior', 'seniority', 'seniors', 'senna', 'sennett', 'sensation', 'sense', 'sensed', 'senseless', 'senses', 'sensible', 'sensibly', 'sensing', 'sensitive', 'sensitize', 'sensor', 'sensors', 'sensory', 'sensual', 'sensually', 'sensuous', 'sent', 'sentence', 'sentenced', 'sentences', 'sentience', 'sentient', 'sentiment', 'sentinel', 'sentinels', 'sentries', 'sentry', 'seoul', 'sepal', 'sepals', 'separable', 'separate', 'separated', 'separates', 'separator', 'sephardi', 'sepia', 'sepoy', 'sepsis', 'septa', 'september', 'septet', 'septets', 'septette', 'septettes', 'septic', 'septum', 'septums', 'sepulcher', 'sequel', 'sequels', 'sequence', 'sequenced', 'sequencer', 'sequences', 'sequester', 'sequin', 'sequined', 'sequins', 'sequitur', 'sequoia', 'sequoias', 'sequoya', 'sera', 'seraglio', 'seraglios', 'serape', 'serapes', 'seraph', 'seraphic', 'seraphim', 'seraphs', 'serb', 'serbia', 'serbian', 'serbians', 'serbs', 'sere', 'serena', 'serenade', 'serenaded', 'serenades', 'serene', 'serenely', 'serener', 'serenest', 'serengeti', 'serenity', 'serer', 'serest', 'serf', 'serfdom', 'serfs', 'serge', 'sergeant', 'sergeants', 'sergei', 'sergio', 'serial', 'serialize', 'serially', 'serials', 'series', 'serious', 'seriously', 'sermon', 'sermonize', 'sermons', 'serous', 'serpens', 'serpent', 'serpents', 'serra', 'serrano', 'serrated', 'serried', 'serum', 'serums', 'servant', 'servants', 'serve', 'served', 'server', 'servers', 'serves', 'service', 'serviced', 'services', 'servicing', 'serviette', 'servile', 'servility', 'serving', 'servings', 'servitude', 'servo', 'servos', 'sesame', 'sesames', 'sessions', 'set', 'setback', 'setbacks', 'seth', 'seton', 'sets', 'settable', 'settee', 'settees', 'setter', 'setters', 'setting', 'settings', 'settle', 'settled', 'settler', 'settlers', 'settles', 'settling', 'setup', 'setups', 'seurat', 'seuss', 'seven', 'sevens', 'seventeen', 'seventh', 'sevenths', 'seventies', 'seventy', 'sever', 'several', 'severally', 'severance', 'severe', 'severed', 'severely', 'severer', 'severest', 'severing', 'severity', 'severn', 'severs', 'severus', 'seville', 'sew', 'sewage', 'seward', 'sewed', 'sewer', 'sewerage', 'sewers', 'sewing', 'sewn', 'sews', 'sex', 'sexed', 'sexes', 'sexier', 'sexiest', 'sexily', 'sexiness', 'sexing', 'sexism', 'sexist', 'sexists', 'sexless', 'sexpot', 'sexpots', 'sextans', 'sextant', 'sextants', 'sextet', 'sextets', 'sextette', 'sextettes', 'sexting', 'sexton', 'sextons', 'sexual', 'sexuality', 'sexually', 'sexy', 'seyfert', 'seymour', 'shabbier', 'shabbiest', 'shabbily', 'shabby', 'shack', 'shackle', 'shackled', 'shackles', 'shackling', 'shacks', 'shad', 'shade', 'shaded', 'shades', 'shadier', 'shadiest', 'shadiness', 'shading', 'shadings', 'shadow', 'shadowbox', 'shadowed', 'shadowier', 'shadowing', 'shadows', 'shadowy', 'shads', 'shady', 'shaffer', 'shaft', 'shafted', 'shafting', 'shafts', 'shag', 'shagged', 'shaggier', 'shaggiest', 'shagging', 'shaggy', 'shags', 'shah', 'shahs', 'shaikh', 'shaikhs', 'shaka', 'shake', 'shakedown', 'shaken', 'shaker', 'shakers', 'shakes', 'shakeup', 'shakeups', 'shakier', 'shakiest', 'shakily', 'shakiness', 'shaking', 'shaky', 'shale', 'shall', 'shallot', 'shallots', 'shallow', 'shallower', 'shallows', 'shalt', 'sham', 'shaman', 'shamans', 'shamble', 'shambled', 'shambles', 'shambling', 'shame', 'shamed', 'shameful', 'shameless', 'shames', 'shaming', 'shammed', 'shammies', 'shamming', 'shammy', 'shampoo', 'shampooed', 'shampoos', 'shamrock', 'shamrocks', 'shams', 'shana', 'shandy', 'shane', 'shanghai', 'shanghais', 'shank', 'shankara', 'shanks', 'shanna', 'shannon', 'shanties', 'shantung', 'shanty', 'shape', 'shaped', 'shapeless', 'shapelier', 'shapely', 'shapes', 'shaping', 'shapiro', 'sharable', 'shard', 'shards', 'share', 'shareable', 'shared', 'shares', 'shari', 'sharia', 'shariah', 'sharif', 'sharing', 'shark', 'sharked', 'sharking', 'sharks', 'sharkskin', 'sharlene', 'sharon', 'sharp', 'sharpe', 'sharped', 'sharpen', 'sharpened', 'sharpener', 'sharpens', 'sharper', 'sharpers', 'sharpest', 'sharping', 'sharply', 'sharpness', 'sharps', 'sharron', 'shasta', 'shat', 'shatter', 'shattered', 'shatters', 'shaula', 'shaun', 'shauna', 'shave', 'shaved', 'shaven', 'shaver', 'shavers', 'shaves', 'shavian', 'shaving', 'shavings', 'shavuot', 'shaw', 'shawl', 'shawls', 'shawn', 'shawna', 'shawnee', 'shaykh', 'shaykhs', 'she', 'shea', 'sheaf', 'shear', 'sheared', 'shearer', 'shearers', 'shearing', 'shears', 'sheath', 'sheathe', 'sheathed', 'sheathes', 'sheathing', 'sheaths', 'sheave', 'sheaves', 'sheba', 'shebang', 'shebangs', 'shebeli', 'shed', 'shedding', 'sheds', 'sheen', 'sheena', 'sheep', 'sheepdog', 'sheepdogs', 'sheepfold', 'sheepish', 'sheepskin', 'sheer', 'sheered', 'sheerer', 'sheerest', 'sheering', 'sheers', 'sheet', 'sheeting', 'sheetrock', 'sheets', 'sheffield', 'sheik', 'sheikdom', 'sheikdoms', 'sheikh', 'sheikhdom', 'sheikhs', 'sheiks', 'sheila', 'shekel', 'shekels', 'shelby', 'sheldon', 'shelf', 'shelia', 'shell', 'shellac', 'shellacs', 'shelled', 'sheller', 'shelley', 'shellfish', 'shelling', 'shells', 'shelly', 'shelter', 'sheltered', 'shelters', 'shelton', 'shelve', 'shelved', 'shelves', 'shelving', 'shenyang', 'sheol', 'shepard', 'shepherd', 'shepherds', 'sheppard', 'sheratan', 'sheraton', 'sherbert', 'sherberts', 'sherbet', 'sherbets', 'sherd', 'sherds', 'sheree', 'sheri', 'sheridan', 'sheriff', 'sheriffs', 'sherlock', 'sherman', 'sherpa', 'sherri', 'sherrie', 'sherries', 'sherry', 'sherwood', 'sheryl', 'shes', 'shetland', 'shetlands', 'shevat', 'shied', 'shield', 'shielded', 'shielding', 'shields', 'shies', 'shift', 'shifted', 'shiftier', 'shiftiest', 'shiftily', 'shifting', 'shiftless', 'shifts', 'shifty', 'shiitake', 'shiitakes', 'shikoku', 'shill', 'shillalah', 'shilled', 'shilling', 'shillings', 'shillong', 'shills', 'shiloh', 'shim', 'shimmed', 'shimmer', 'shimmered', 'shimmers', 'shimmery', 'shimmied', 'shimmies', 'shimming', 'shimmy', 'shimmying', 'shims', 'shin', 'shinbone', 'shinbones', 'shindig', 'shindigs', 'shine', 'shined', 'shiner', 'shiners', 'shines', 'shingle', 'shingled', 'shingles', 'shingling', 'shinier', 'shiniest', 'shininess', 'shining', 'shinned', 'shinnied', 'shinnies', 'shinning', 'shinny', 'shinnying', 'shins', 'shinto', 'shintoism', 'shintos', 'shiny', 'ship', 'shipboard', 'shipload', 'shiploads', 'shipmate', 'shipmates', 'shipment', 'shipments', 'shipped', 'shipper', 'shippers', 'shipping', 'ships', 'shipshape', 'shipwreck', 'shipyard', 'shipyards', 'shiraz', 'shire', 'shires', 'shirk', 'shirked', 'shirker', 'shirkers', 'shirking', 'shirks', 'shirley', 'shirr', 'shirred', 'shirring', 'shirrings', 'shirrs', 'shirt', 'shirted', 'shirting', 'shirts', 'shirttail', 'shit', 'shits', 'shittier', 'shittiest', 'shitting', 'shitty', 'shiva', 'shiver', 'shivered', 'shivering', 'shivers', 'shivery', 'shlemiel', 'shlemiels', 'shlep', 'shlepp', 'shlepped', 'shlepping', 'shlepps', 'shleps', 'shlock', 'shlocky', 'shoal', 'shoaled', 'shoaling', 'shoals', 'shock', 'shocked', 'shocker', 'shockers', 'shocking', 'shockley', 'shocks', 'shod', 'shodden', 'shoddier', 'shoddiest', 'shoddily', 'shoddy', 'shoe', 'shoed', 'shoehorn', 'shoehorns', 'shoeing', 'shoelace', 'shoelaces', 'shoemaker', 'shoes', 'shoeshine', 'shogun', 'shoguns', 'shone', 'shoo', 'shooed', 'shooing', 'shook', 'shoon', 'shoos', 'shoot', 'shooter', 'shooters', 'shooting', 'shootings', 'shootout', 'shootouts', 'shoots', 'shop', 'shoplift', 'shoplifts', 'shopped', 'shopper', 'shoppers', 'shopping', 'shops', 'shoptalk', 'shopworn', 'shore', 'shored', 'shoreline', 'shores', 'shoring', 'shorn', 'shortage', 'shortages', 'shortcake', 'shortcut', 'shortcuts', 'shorted', 'shorten', 'shortened', 'shortens', 'shorter', 'shortest', 'shortfall', 'shorthand', 'shorthorn', 'shorting', 'shortish', 'shortlist', 'shortly', 'shortness', 'shorts', 'shortstop', 'shortwave', 'shoshone', 'shot', 'shotgun', 'shotguns', 'shots', 'should', 'shoulder', 'shoulders', 'shout', 'shouted', 'shouting', 'shouts', 'shove', 'shoved', 'shovel', 'shoveled', 'shovelful', 'shoveling', 'shovelled', 'shovels', 'shoves', 'shoving', 'show', 'showbiz', 'showboat', 'showboats', 'showcase', 'showcased', 'showcases', 'showdown', 'showdowns', 'showed', 'shower', 'showered', 'showering', 'showers', 'showery', 'showgirl', 'showgirls', 'showier', 'showiest', 'showily', 'showiness', 'showing', 'showings', 'showman', 'showmen', 'shown', 'showoff', 'showoffs', 'showpiece', 'showplace', 'showroom', 'showrooms', 'shows', 'showy', 'shrank', 'shrapnel', 'shred', 'shredded', 'shredder', 'shredders', 'shredding', 'shreds', 'shrek', 'shrew', 'shrewd', 'shrewder', 'shrewdest', 'shrewdly', 'shrewish', 'shrews', 'shriek', 'shrieked', 'shrieking', 'shrieks', 'shrift', 'shrike', 'shrikes', 'shrill', 'shrilled', 'shriller', 'shrillest', 'shrilling', 'shrills', 'shrilly', 'shrimp', 'shrimped', 'shrimping', 'shrimps', 'shrine', 'shriner', 'shrines', 'shrink', 'shrinkage', 'shrinking', 'shrinks', 'shrive', 'shrived', 'shrivel', 'shriveled', 'shrivels', 'shriven', 'shrives', 'shriving', 'shroud', 'shrouded', 'shrouding', 'shrouds', 'shrove', 'shrub', 'shrubbery', 'shrubbier', 'shrubby', 'shrubs', 'shrug', 'shrugged', 'shrugging', 'shrugs', 'shrunk', 'shrunken', 'shtick', 'shticks', 'shtik', 'shtiks', 'shuck', 'shucked', 'shucking', 'shucks', 'shuckses', 'shudder', 'shuddered', 'shudders', 'shuffle', 'shuffled', 'shuffler', 'shufflers', 'shuffles', 'shuffling', 'shula', 'shun', 'shunned', 'shunning', 'shuns', 'shunt', 'shunted', 'shunting', 'shunts', 'shush', 'shushed', 'shushes', 'shushing', 'shut', 'shutdown', 'shutdowns', 'shuteye', 'shutout', 'shutouts', 'shuts', 'shutter', 'shuttered', 'shutters', 'shutting', 'shuttle', 'shuttled', 'shuttles', 'shuttling', 'shy', 'shyer', 'shyest', 'shying', 'shylock', 'shyly', 'shyness', 'shyster', 'shysters', 'siam', 'siamese', 'sian', 'sibelius', 'siberia', 'siberian', 'sibilant', 'sibilants', 'sibling', 'siblings', 'sibyl', 'sibyls', 'sic', 'sicilian', 'sicilians', 'sicily', 'sick', 'sickbed', 'sickbeds', 'sicked', 'sicken', 'sickened', 'sickening', 'sickens', 'sicker', 'sickest', 'sicking', 'sickle', 'sickles', 'sicklier', 'sickliest', 'sickly', 'sickness', 'sicks', 'sics', 'sid', 'side', 'sidearm', 'sidearms', 'sidebar', 'sidebars', 'sideboard', 'sideburns', 'sidecar', 'sidecars', 'sided', 'sidekick', 'sidekicks', 'sidelight', 'sideline', 'sidelined', 'sidelines', 'sidelong', 'sidereal', 'sides', 'sideshow', 'sideshows', 'sidestep', 'sidesteps', 'sideswipe', 'sidetrack', 'sidewalk', 'sidewalks', 'sidewall', 'sidewalls', 'sideways', 'sidewise', 'siding', 'sidings', 'sidle', 'sidled', 'sidles', 'sidling', 'sidney', 'siege', 'sieges', 'siegfried', 'siemens', 'sierra', 'sierras', 'siesta', 'siestas', 'sieve', 'sieved', 'sieves', 'sieving', 'sift', 'sifted', 'sifter', 'sifters', 'sifting', 'sifts', 'sigh', 'sighed', 'sighing', 'sighs', 'sight', 'sighted', 'sighting', 'sightings', 'sightless', 'sightread', 'sights', 'sightseer', 'sigismund', 'sigma', 'sigmund', 'sign', 'signal', 'signaled', 'signaling', 'signalize', 'signalled', 'signally', 'signals', 'signatory', 'signature', 'signboard', 'signed', 'signer', 'signers', 'signet', 'signets', 'signified', 'signifies', 'signify', 'signing', 'signings', 'signpost', 'signposts', 'signs', 'sigurd', 'sihanouk', 'sikh', 'sikhism', 'sikhs', 'sikkim', 'sikkimese', 'sikorsky', 'silage', 'silas', 'silence', 'silenced', 'silencer', 'silencers', 'silences', 'silencing', 'silent', 'silenter', 'silentest', 'silently', 'silents', 'silica', 'silicate', 'silicates', 'siliceous', 'silicious', 'silicon', 'silicone', 'silicosis', 'silk', 'silken', 'silkier', 'silkiest', 'silks', 'silkworm', 'silkworms', 'silky', 'sill', 'sillier', 'sillies', 'silliest', 'silliness', 'sills', 'silly', 'silo', 'silos', 'silt', 'silted', 'silting', 'silts', 'silurian', 'silva', 'silvan', 'silver', 'silvered', 'silvering', 'silvers', 'silvery', 'silvia', 'sim', 'simenon', 'simian', 'simians', 'similar', 'similarly', 'simile', 'similes', 'simmental', 'simmer', 'simmered', 'simmering', 'simmers', 'simmons', 'simon', 'simone', 'simpatico', 'simper', 'simpered', 'simpering', 'simpers', 'simple', 'simpler', 'simplest', 'simpleton', 'simplex', 'simplify', 'simply', 'simpson', 'simpsons', 'sims', 'simulate', 'simulated', 'simulates', 'simulator', 'simulcast', 'sin', 'sinai', 'sinatra', 'since', 'sincere', 'sincerely', 'sincerer', 'sincerest', 'sincerity', 'sinclair', 'sindbad', 'sindhi', 'sine', 'sinecure', 'sinecures', 'sinew', 'sinews', 'sinewy', 'sinful', 'sinfully', 'sing', 'singapore', 'singe', 'singed', 'singeing', 'singer', 'singers', 'singes', 'singh', 'singing', 'single', 'singled', 'singles', 'singleton', 'singling', 'singly', 'sings', 'singsong', 'singsongs', 'singular', 'singulars', 'sinhalese', 'sinister', 'sink', 'sinkable', 'sinker', 'sinkers', 'sinkhole', 'sinkholes', 'sinkiang', 'sinking', 'sinks', 'sinned', 'sinner', 'sinners', 'sinning', 'sins', 'sinuous', 'sinus', 'sinuses', 'sinusitis', 'sioux', 'sip', 'siphon', 'siphoned', 'siphoning', 'siphons', 'sipped', 'sipping', 'sips', 'sir', 'sire', 'sired', 'siren', 'sirens', 'sires', 'siring', 'sirius', 'sirloin', 'sirloins', 'sirocco', 'siroccos', 'sirs', 'sirup', 'sirups', 'sis', 'sisal', 'sises', 'sissier', 'sissies', 'sissiest', 'sissy', 'sister', 'sisterly', 'sisters', 'sistine', 'sisyphean', 'sisyphus', 'sit', 'sitar', 'sitars', 'sitcom', 'sitcoms', 'site', 'sited', 'sites', 'siting', 'sits', 'sitter', 'sitters', 'sitting', 'sittings', 'situate', 'situated', 'situates', 'situating', 'situation', 'siva', 'sivan', 'six', 'sixes', 'sixpence', 'sixpences', 'sixteen', 'sixteens', 'sixteenth', 'sixth', 'sixths', 'sixties', 'sixtieth', 'sixtieths', 'sixty', 'sizable', 'size', 'sizeable', 'sized', 'sizer', 'sizes', 'sizing', 'sizzle', 'sizzled', 'sizzles', 'sizzling', 'sjaelland', 'skate', 'skated', 'skater', 'skaters', 'skates', 'skating', 'skedaddle', 'skeet', 'skein', 'skeins', 'skeletal', 'skeleton', 'skeletons', 'skeptic', 'skeptical', 'skeptics', 'sketch', 'sketched', 'sketches', 'sketchier', 'sketching', 'sketchy', 'skew', 'skewed', 'skewer', 'skewered', 'skewering', 'skewers', 'skewing', 'skews', 'ski', 'skid', 'skidded', 'skidding', 'skids', 'skied', 'skier', 'skiers', 'skies', 'skiff', 'skiffs', 'skiing', 'skilful', 'skill', 'skilled', 'skillet', 'skillets', 'skillful', 'skills', 'skim', 'skimmed', 'skimming', 'skimp', 'skimped', 'skimpier', 'skimpiest', 'skimping', 'skimps', 'skimpy', 'skims', 'skin', 'skinflint', 'skinhead', 'skinheads', 'skinless', 'skinned', 'skinner', 'skinnier', 'skinniest', 'skinning', 'skinny', 'skins', 'skintight', 'skip', 'skipped', 'skipper', 'skippered', 'skippers', 'skipping', 'skippy', 'skips', 'skirmish', 'skirt', 'skirted', 'skirting', 'skirts', 'skis', 'skit', 'skits', 'skitter', 'skittered', 'skitters', 'skittish', 'skivvied', 'skivvies', 'skivvy', 'skivvying', 'skopje', 'skulk', 'skulked', 'skulking', 'skulks', 'skull', 'skullcap', 'skullcaps', 'skulls', 'skunk', 'skunked', 'skunking', 'skunks', 'sky', 'skycap', 'skycaps', 'skydive', 'skydived', 'skydiver', 'skydivers', 'skydives', 'skydiving', 'skydove', 'skye', 'skyed', 'skying', 'skyjack', 'skyjacked', 'skyjacker', 'skyjacks', 'skylab', 'skylark', 'skylarked', 'skylarks', 'skylight', 'skylights', 'skyline', 'skylines', 'skype', 'skyrocket', 'skyward', 'skywards', 'skywriter', 'slab', 'slabbed', 'slabbing', 'slabs', 'slack', 'slacked', 'slacken', 'slackened', 'slackens', 'slacker', 'slackers', 'slackest', 'slacking', 'slackly', 'slackness', 'slacks', 'slackware', 'slag', 'slags', 'slain', 'slake', 'slaked', 'slakes', 'slaking', 'slalom', 'slalomed', 'slaloming', 'slaloms', 'slam', 'slammed', 'slammer', 'slammers', 'slamming', 'slams', 'slander', 'slandered', 'slanderer', 'slanders', 'slang', 'slangier', 'slangiest', 'slangy', 'slant', 'slanted', 'slanting', 'slants', 'slantwise', 'slap', 'slapdash', 'slaphappy', 'slapped', 'slapping', 'slaps', 'slapstick', 'slash', 'slashdot', 'slashed', 'slashes', 'slashing', 'slat', 'slate', 'slated', 'slater', 'slates', 'slather', 'slathered', 'slathers', 'slating', 'slats', 'slattern', 'slatterns', 'slaughter', 'slav', 'slave', 'slaved', 'slaver', 'slavered', 'slavering', 'slavers', 'slavery', 'slaves', 'slavic', 'slaving', 'slavish', 'slavishly', 'slavonic', 'slavs', 'slaw', 'slay', 'slayer', 'slayers', 'slaying', 'slayings', 'slays', 'sleaze', 'sleazes', 'sleazier', 'sleaziest', 'sleazily', 'sleazy', 'sled', 'sledded', 'sledding', 'sledge', 'sledged', 'sledges', 'sledging', 'sleds', 'sleek', 'sleeked', 'sleeker', 'sleekest', 'sleeking', 'sleekly', 'sleekness', 'sleeks', 'sleep', 'sleeper', 'sleepers', 'sleepier', 'sleepiest', 'sleepily', 'sleeping', 'sleepless', 'sleeps', 'sleepwalk', 'sleepwear', 'sleepy', 'sleet', 'sleeted', 'sleeting', 'sleets', 'sleety', 'sleeve', 'sleeves', 'sleigh', 'sleighed', 'sleighing', 'sleighs', 'slender', 'slenderer', 'slept', 'sleuth', 'sleuths', 'slew', 'slewed', 'slewing', 'slews', 'slice', 'sliced', 'slicer', 'slicers', 'slices', 'slicing', 'slick', 'slicked', 'slicker', 'slickers', 'slickest', 'slicking', 'slickly', 'slickness', 'slicks', 'slid', 'slide', 'slider', 'sliders', 'slides', 'slideshow', 'sliding', 'slier', 'sliest', 'slight', 'slighted', 'slighter', 'slightest', 'slighting', 'slightly', 'slights', 'slily', 'slim', 'slime', 'slimier', 'slimiest', 'slimmed', 'slimmer', 'slimmest', 'slimming', 'slimness', 'slims', 'slimy', 'sling', 'slinging', 'slings', 'slingshot', 'slink', 'slinked', 'slinkier', 'slinkiest', 'slinking', 'slinks', 'slinky', 'slip', 'slipcover', 'slipknot', 'slipknots', 'slippage', 'slippages', 'slipped', 'slipper', 'slippers', 'slippery', 'slipping', 'slips', 'slipshod', 'slit', 'slither', 'slithered', 'slithers', 'slithery', 'slits', 'slitter', 'slitting', 'sliver', 'slivered', 'slivering', 'slivers', 'sloan', 'sloane', 'slob', 'slobber', 'slobbered', 'slobbers', 'slobs', 'slocum', 'sloe', 'sloes', 'slog', 'slogan', 'slogans', 'slogged', 'slogging', 'slogs', 'sloop', 'sloops', 'slop', 'slope', 'sloped', 'slopes', 'sloping', 'slopped', 'sloppier', 'sloppiest', 'sloppily', 'slopping', 'sloppy', 'slops', 'slosh', 'sloshed', 'sloshes', 'sloshing', 'slot', 'sloth', 'slothful', 'sloths', 'slots', 'slotted', 'slotting', 'slouch', 'slouched', 'slouches', 'slouchier', 'slouching', 'slouchy', 'slough', 'sloughed', 'sloughing', 'sloughs', 'slovak', 'slovakia', 'slovakian', 'slovaks', 'sloven', 'slovenia', 'slovenian', 'slovenly', 'slovens', 'slow', 'slowdown', 'slowdowns', 'slowed', 'slower', 'slowest', 'slowing', 'slowly', 'slowness', 'slowpoke', 'slowpokes', 'slows', 'sludge', 'slue', 'slued', 'slues', 'slug', 'sluggard', 'sluggards', 'slugged', 'slugger', 'sluggers', 'slugging', 'sluggish', 'slugs', 'sluice', 'sluiced', 'sluices', 'sluicing', 'sluing', 'slum', 'slumber', 'slumbered', 'slumbers', 'slumbrous', 'slumdog', 'slumdogs', 'slumlord', 'slumlords', 'slummed', 'slummer', 'slumming', 'slump', 'slumped', 'slumping', 'slumps', 'slums', 'slung', 'slunk', 'slur', 'slurp', 'slurped', 'slurpee', 'slurping', 'slurps', 'slurred', 'slurring', 'slurs', 'slush', 'slushier', 'slushiest', 'slushy', 'slut', 'sluts', 'sluttish', 'sly', 'slyer', 'slyest', 'slyly', 'slyness', 'smack', 'smacked', 'smacker', 'smackers', 'smacking', 'smacks', 'small', 'smaller', 'smallest', 'smallish', 'smallness', 'smallpox', 'smalls', 'smarmier', 'smarmiest', 'smarmy', 'smart', 'smarted', 'smarten', 'smartened', 'smartens', 'smarter', 'smartest', 'smarting', 'smartly', 'smartness', 'smarts', 'smash', 'smashed', 'smashes', 'smashing', 'smear', 'smeared', 'smearing', 'smears', 'smell', 'smelled', 'smellier', 'smelliest', 'smelling', 'smells', 'smelly', 'smelt', 'smelted', 'smelter', 'smelters', 'smelting', 'smelts', 'smetana', 'smidge', 'smidgen', 'smidgens', 'smidgeon', 'smidgeons', 'smidges', 'smidgin', 'smidgins', 'smile', 'smiled', 'smiles', 'smiling', 'smilingly', 'smirch', 'smirched', 'smirches', 'smirching', 'smirk', 'smirked', 'smirking', 'smirks', 'smirnoff', 'smit', 'smite', 'smites', 'smith', 'smithies', 'smiths', 'smithson', 'smithy', 'smiting', 'smitten', 'smock', 'smocked', 'smocking', 'smocks', 'smog', 'smoggier', 'smoggiest', 'smoggy', 'smoke', 'smoked', 'smokeless', 'smoker', 'smokers', 'smokes', 'smokey', 'smokier', 'smokiest', 'smokiness', 'smoking', 'smoky', 'smolder', 'smoldered', 'smolders', 'smolensk', 'smollett', 'smooch', 'smooched', 'smooches', 'smooching', 'smooth', 'smoothed', 'smoother', 'smoothes', 'smoothest', 'smoothie', 'smoothies', 'smoothing', 'smoothly', 'smooths', 'smoothy', 'smote', 'smother', 'smothered', 'smothers', 'smoulder', 'smoulders', 'smudge', 'smudged', 'smudges', 'smudgier', 'smudgiest', 'smudging', 'smudgy', 'smug', 'smugger', 'smuggest', 'smuggle', 'smuggled', 'smuggler', 'smugglers', 'smuggles', 'smuggling', 'smugly', 'smugness', 'smut', 'smuts', 'smuttier', 'smuttiest', 'smutty', 'snack', 'snacked', 'snacking', 'snacks', 'snaffle', 'snaffled', 'snaffles', 'snaffling', 'snafu', 'snafus', 'snag', 'snagged', 'snagging', 'snags', 'snail', 'snailed', 'snailing', 'snails', 'snake', 'snakebite', 'snaked', 'snakes', 'snakier', 'snakiest', 'snaking', 'snaky', 'snap', 'snapped', 'snapper', 'snappers', 'snappier', 'snappiest', 'snapping', 'snappish', 'snapple', 'snappy', 'snaps', 'snapshot', 'snapshots', 'snare', 'snared', 'snares', 'snaring', 'snarkier', 'snarkiest', 'snarky', 'snarl', 'snarled', 'snarling', 'snarls', 'snatch', 'snatched', 'snatches', 'snatching', 'snazzier', 'snazziest', 'snazzy', 'snead', 'sneak', 'sneaked', 'sneaker', 'sneakers', 'sneakier', 'sneakiest', 'sneaking', 'sneaks', 'sneaky', 'sneer', 'sneered', 'sneering', 'sneers', 'sneeze', 'sneezed', 'sneezes', 'sneezing', 'snell', 'snicker', 'snickered', 'snickers', 'snide', 'snider', 'snidest', 'sniff', 'sniffed', 'sniffing', 'sniffle', 'sniffled', 'sniffles', 'sniffling', 'sniffs', 'snifter', 'snifters', 'snigger', 'sniggered', 'sniggers', 'snip', 'snipe', 'sniped', 'sniper', 'snipers', 'snipes', 'sniping', 'snipped', 'snippet', 'snippets', 'snippier', 'snippiest', 'snipping', 'snippy', 'snips', 'snit', 'snitch', 'snitched', 'snitches', 'snitching', 'snits', 'snivel', 'sniveled', 'sniveling', 'snivelled', 'snivels', 'snob', 'snobbery', 'snobbier', 'snobbiest', 'snobbish', 'snobby', 'snobs', 'snooker', 'snoop', 'snooped', 'snooper', 'snoopers', 'snoopier', 'snoopiest', 'snooping', 'snoops', 'snoopy', 'snoot', 'snootier', 'snootiest', 'snoots', 'snooty', 'snooze', 'snoozed', 'snoozes', 'snoozing', 'snore', 'snored', 'snorer', 'snorers', 'snores', 'snoring', 'snorkel', 'snorkeled', 'snorkeler', 'snorkels', 'snort', 'snorted', 'snorting', 'snorts', 'snot', 'snots', 'snottier', 'snottiest', 'snotty', 'snout', 'snouts', 'snow', 'snowball', 'snowballs', 'snowbelt', 'snowboard', 'snowbound', 'snowdrift', 'snowdrop', 'snowdrops', 'snowed', 'snowfall', 'snowfalls', 'snowflake', 'snowier', 'snowiest', 'snowing', 'snowman', 'snowmen', 'snowplow', 'snowplows', 'snows', 'snowshed', 'snowshoe', 'snowshoes', 'snowstorm', 'snowsuit', 'snowsuits', 'snowy', 'snub', 'snubbed', 'snubbing', 'snubs', 'snuck', 'snuff', 'snuffbox', 'snuffed', 'snuffer', 'snuffers', 'snuffing', 'snuffle', 'snuffled', 'snuffles', 'snuffling', 'snuffs', 'snug', 'snugged', 'snugger', 'snuggest', 'snugging', 'snuggle', 'snuggled', 'snuggles', 'snuggling', 'snugly', 'snugs', 'snyder', 'soak', 'soaked', 'soaking', 'soakings', 'soaks', 'soap', 'soapbox', 'soapboxes', 'soaped', 'soapier', 'soapiest', 'soapiness', 'soaping', 'soaps', 'soapstone', 'soapsuds', 'soapy', 'soar', 'soared', 'soaring', 'soars', 'soave', 'sob', 'sobbed', 'sobbing', 'sober', 'sobered', 'soberer', 'soberest', 'sobering', 'soberly', 'soberness', 'sobers', 'sobriety', 'sobriquet', 'sobs', 'soccer', 'sociable', 'sociables', 'sociably', 'social', 'socialism', 'socialist', 'socialite', 'socialize', 'socially', 'socials', 'societal', 'societies', 'society', 'sociology', 'sociopath', 'sock', 'socked', 'socket', 'sockets', 'socking', 'socks', 'socorro', 'socrates', 'socratic', 'sod', 'soda', 'sodas', 'sodded', 'sodden', 'sodding', 'soddy', 'sodium', 'sodom', 'sodomite', 'sodomites', 'sodomy', 'sods', 'sofa', 'sofas', 'sofia', 'soft', 'softball', 'softballs', 'soften', 'softened', 'softener', 'softeners', 'softening', 'softens', 'softer', 'softest', 'softie', 'softies', 'softly', 'softness', 'software', 'softwood', 'softwoods', 'softy', 'soggier', 'soggiest', 'soggily', 'sogginess', 'soggy', 'soho', 'soil', 'soiled', 'soiling', 'soils', 'sojourn', 'sojourned', 'sojourns', 'sol', 'solace', 'solaced', 'solaces', 'solacing', 'solar', 'solaria', 'solarium', 'solariums', 'sold', 'solder', 'soldered', 'soldering', 'solders', 'soldier', 'soldiered', 'soldierly', 'soldiers', 'sole', 'solecism', 'solecisms', 'soled', 'solely', 'solemn', 'solemner', 'solemnest', 'solemnity', 'solemnize', 'solemnly', 'solenoid', 'solenoids', 'soles', 'soli', 'solicit', 'solicited', 'solicitor', 'solicits', 'solid', 'solider', 'solidest', 'solidify', 'solidity', 'solidly', 'solidness', 'solids', 'soliloquy', 'soling', 'solis', 'solitaire', 'solitary', 'solitude', 'solo', 'soloed', 'soloing', 'soloist', 'soloists', 'solomon', 'solon', 'solos', 'sols', 'solstice', 'solstices', 'soluble', 'solubles', 'solution', 'solutions', 'solvable', 'solve', 'solved', 'solvency', 'solvent', 'solvents', 'solver', 'solvers', 'solves', 'solving', 'somali', 'somalia', 'somalian', 'somalians', 'somalis', 'somber', 'somberly', 'sombre', 'sombrely', 'sombrero', 'sombreros', 'some', 'somebody', 'someday', 'somehow', 'someone', 'someones', 'someplace', 'something', 'sometime', 'sometimes', 'someway', 'somewhat', 'somewhats', 'somewhere', 'somme', 'somnolent', 'somoza', 'son', 'sonar', 'sonars', 'sonata', 'sonatas', 'sondheim', 'sondra', 'song', 'songbird', 'songbirds', 'songhai', 'songhua', 'songs', 'songster', 'songsters', 'sonia', 'sonic', 'sonja', 'sonnet', 'sonnets', 'sonnies', 'sonny', 'sonority', 'sonorous', 'sons', 'sontag', 'sony', 'sonya', 'soon', 'sooner', 'soonest', 'soot', 'sooth', 'soothe', 'soothed', 'soothes', 'soothing', 'sootier', 'sootiest', 'sooty', 'sop', 'sophia', 'sophie', 'sophism', 'sophist', 'sophistry', 'sophists', 'sophocles', 'sophomore', 'soporific', 'sopped', 'soppier', 'soppiest', 'sopping', 'soppy', 'soprano', 'sopranos', 'sops', 'sopwith', 'sorbet', 'sorbets', 'sorbonne', 'sorcerer', 'sorcerers', 'sorceress', 'sorcery', 'sordid', 'sordidly', 'sore', 'sorehead', 'soreheads', 'sorely', 'soreness', 'sorer', 'sores', 'sorest', 'sorghum', 'sorority', 'sorrel', 'sorrels', 'sorrier', 'sorriest', 'sorrow', 'sorrowed', 'sorrowful', 'sorrowing', 'sorrows', 'sorry', 'sort', 'sorta', 'sorted', 'sorter', 'sorters', 'sortie', 'sortied', 'sortieing', 'sorties', 'sorting', 'sorts', 'sos', 'sosa', 'sot', 'soto', 'sots', 'sottish', 'sough', 'soughed', 'soughing', 'soughs', 'sought', 'soul', 'soulful', 'soulfully', 'soulless', 'soulmate', 'soulmates', 'souls', 'sound', 'sounded', 'sounder', 'soundest', 'sounding', 'soundings', 'soundless', 'soundly', 'soundness', 'sounds', 'soup', 'souped', 'soupier', 'soupiest', 'souping', 'soups', 'soupy', 'sour', 'source', 'sourced', 'sources', 'sourcing', 'sourdough', 'soured', 'sourer', 'sourest', 'souring', 'sourly', 'sourness', 'sourpuss', 'sours', 'sousa', 'souse', 'soused', 'souses', 'sousing', 'south', 'southeast', 'southerly', 'southern', 'southerns', 'southey', 'southpaw', 'southpaws', 'souths', 'southward', 'southwest', 'souvenir', 'souvenirs', 'sovereign', 'soviet', 'soviets', 'sow', 'sowed', 'sower', 'sowers', 'soweto', 'sowing', 'sown', 'sows', 'sox', 'soy', 'soya', 'soybean', 'soybeans', 'soyinka', 'soyuz', 'spa', 'spaatz', 'space', 'spaced', 'spaceman', 'spacemen', 'spaces', 'spaceship', 'spacesuit', 'spacewalk', 'spacey', 'spacial', 'spacier', 'spaciest', 'spacing', 'spacious', 'spackle', 'spacy', 'spade', 'spaded', 'spadeful', 'spadefuls', 'spades', 'spadework', 'spading', 'spaghetti', 'spahn', 'spain', 'spake', 'spam', 'spammed', 'spammer', 'spammers', 'spamming', 'spams', 'span', 'spandex', 'spangle', 'spangled', 'spangles', 'spangling', 'spaniard', 'spaniards', 'spaniel', 'spaniels', 'spanish', 'spank', 'spanked', 'spanking', 'spankings', 'spanks', 'spanned', 'spanner', 'spanners', 'spanning', 'spans', 'spar', 'spare', 'spared', 'sparely', 'spareness', 'sparer', 'spareribs', 'spares', 'sparest', 'sparing', 'sparingly', 'spark', 'sparked', 'sparking', 'sparkle', 'sparkled', 'sparkler', 'sparklers', 'sparkles', 'sparkling', 'sparks', 'sparred', 'sparring', 'sparrow', 'sparrows', 'spars', 'sparse', 'sparsely', 'sparser', 'sparsest', 'sparsity', 'sparta', 'spartacus', 'spartan', 'spartans', 'spas', 'spasm', 'spasmodic', 'spasms', 'spastic', 'spastics', 'spat', 'spate', 'spates', 'spatial', 'spatially', 'spats', 'spatted', 'spatter', 'spattered', 'spatters', 'spatting', 'spatula', 'spatulas', 'spawn', 'spawned', 'spawning', 'spawns', 'spay', 'spayed', 'spaying', 'spays', 'speak', 'speakeasy', 'speaker', 'speakers', 'speaking', 'speaks', 'spear', 'speared', 'spearhead', 'spearing', 'spearmint', 'spears', 'spec', 'specced', 'speccing', 'special', 'specially', 'specials', 'specialty', 'specie', 'species', 'specific', 'specifics', 'specified', 'specifier', 'specifies', 'specify', 'specimen', 'specimens', 'specious', 'speck', 'specked', 'specking', 'speckle', 'speckled', 'speckles', 'speckling', 'specks', 'specs', 'spectacle', 'spectator', 'specter', 'specters', 'spectra', 'spectral', 'spectrum', 'spectrums', 'speculate', 'sped', 'speech', 'speeches', 'speed', 'speedboat', 'speeded', 'speeder', 'speeders', 'speedier', 'speediest', 'speedily', 'speeding', 'speeds', 'speedster', 'speedup', 'speedups', 'speedway', 'speedways', 'speedy', 'speer', 'spell', 'spellbind', 'spelled', 'speller', 'spellers', 'spelling', 'spellings', 'spells', 'spelt', 'spelunker', 'spence', 'spencer', 'spend', 'spender', 'spenders', 'spending', 'spends', 'spengler', 'spenser', 'spent', 'sperm', 'sperms', 'sperry', 'spew', 'spewed', 'spewing', 'spews', 'sphere', 'spheres', 'spherical', 'spheroid', 'spheroids', 'sphincter', 'sphinges', 'sphinx', 'sphinxes', 'spica', 'spice', 'spiced', 'spices', 'spicier', 'spiciest', 'spiciness', 'spicing', 'spicy', 'spider', 'spiders', 'spidery', 'spied', 'spiel', 'spielberg', 'spieled', 'spieling', 'spiels', 'spies', 'spiffier', 'spiffiest', 'spiffy', 'spigot', 'spigots', 'spike', 'spiked', 'spikes', 'spikier', 'spikiest', 'spiking', 'spiky', 'spill', 'spillage', 'spillages', 'spillane', 'spilled', 'spilling', 'spills', 'spillway', 'spillways', 'spilt', 'spin', 'spinach', 'spinal', 'spinals', 'spindle', 'spindled', 'spindles', 'spindlier', 'spindling', 'spindly', 'spine', 'spineless', 'spines', 'spinet', 'spinets', 'spinier', 'spiniest', 'spinnaker', 'spinner', 'spinners', 'spinning', 'spinoff', 'spinoffs', 'spinoza', 'spins', 'spinster', 'spinsters', 'spinx', 'spiny', 'spiraea', 'spiraeas', 'spiral', 'spiraled', 'spiraling', 'spiralled', 'spirally', 'spirals', 'spire', 'spirea', 'spireas', 'spires', 'spirit', 'spirited', 'spiriting', 'spirits', 'spiritual', 'spiro', 'spit', 'spitball', 'spitballs', 'spite', 'spited', 'spiteful', 'spites', 'spitfire', 'spitfires', 'spiting', 'spits', 'spitted', 'spitting', 'spittle', 'spittoon', 'spittoons', 'spitz', 'splash', 'splashed', 'splashes', 'splashier', 'splashing', 'splashy', 'splat', 'splats', 'splatted', 'splatter', 'splatters', 'splatting', 'splay', 'splayed', 'splaying', 'splays', 'spleen', 'spleens', 'splendid', 'splendor', 'splenetic', 'splice', 'spliced', 'splicer', 'splicers', 'splices', 'splicing', 'spline', 'splines', 'splint', 'splinted', 'splinter', 'splinters', 'splinting', 'splints', 'split', 'splits', 'splitting', 'splodge', 'splotch', 'splotched', 'splotches', 'splotchy', 'splurge', 'splurged', 'splurges', 'splurging', 'splutter', 'splutters', 'spock', 'spoil', 'spoilage', 'spoiled', 'spoiler', 'spoilers', 'spoiling', 'spoils', 'spoilt', 'spokane', 'spoke', 'spoken', 'spokes', 'spokesman', 'spokesmen', 'sponge', 'sponged', 'sponger', 'spongers', 'sponges', 'spongier', 'spongiest', 'sponging', 'spongy', 'sponsor', 'sponsored', 'sponsors', 'spoof', 'spoofed', 'spoofing', 'spoofs', 'spook', 'spooked', 'spookier', 'spookiest', 'spooking', 'spooks', 'spooky', 'spool', 'spooled', 'spooling', 'spools', 'spoon', 'spoonbill', 'spooned', 'spoonful', 'spoonfuls', 'spooning', 'spoons', 'spoonsful', 'spoor', 'spoored', 'spooring', 'spoors', 'sporadic', 'spore', 'spored', 'spores', 'sporing', 'sporran', 'sport', 'sported', 'sportier', 'sportiest', 'sporting', 'sportive', 'sports', 'sportsman', 'sportsmen', 'sporty', 'spot', 'spotless', 'spotlight', 'spots', 'spotted', 'spotter', 'spotters', 'spottier', 'spottiest', 'spotting', 'spotty', 'spouse', 'spouses', 'spout', 'spouted', 'spouting', 'spouts', 'sprain', 'sprained', 'spraining', 'sprains', 'sprang', 'sprat', 'sprats', 'sprawl', 'sprawled', 'sprawling', 'sprawls', 'spray', 'sprayed', 'sprayer', 'sprayers', 'spraying', 'sprays', 'spread', 'spreader', 'spreaders', 'spreading', 'spreads', 'spree', 'spreed', 'spreeing', 'sprees', 'sprier', 'spriest', 'sprig', 'sprightly', 'sprigs', 'spring', 'springier', 'springing', 'springs', 'springy', 'sprinkle', 'sprinkled', 'sprinkler', 'sprinkles', 'sprint', 'sprinted', 'sprinter', 'sprinters', 'sprinting', 'sprints', 'sprite', 'sprites', 'spritz', 'spritzed', 'spritzes', 'spritzing', 'sprocket', 'sprockets', 'sprout', 'sprouted', 'sprouting', 'sprouts', 'spruce', 'spruced', 'sprucer', 'spruces', 'sprucest', 'sprucing', 'sprung', 'spry', 'spryer', 'spryest', 'spryly', 'spryness', 'spud', 'spuds', 'spume', 'spumed', 'spumes', 'spuming', 'spumone', 'spumoni', 'spun', 'spunk', 'spunkier', 'spunkiest', 'spunky', 'spur', 'spurious', 'spurn', 'spurned', 'spurning', 'spurns', 'spurred', 'spurring', 'spurs', 'spurt', 'spurted', 'spurting', 'spurts', 'sputnik', 'sputter', 'sputtered', 'sputters', 'sputum', 'spy', 'spyglass', 'spying', 'spyware', 'squab', 'squabble', 'squabbled', 'squabbles', 'squabs', 'squad', 'squadron', 'squadrons', 'squads', 'squalid', 'squalider', 'squall', 'squalled', 'squalling', 'squalls', 'squalor', 'squander', 'squanders', 'squanto', 'square', 'squared', 'squarely', 'squarer', 'squares', 'squarest', 'squaring', 'squash', 'squashed', 'squashes', 'squashier', 'squashing', 'squashy', 'squat', 'squats', 'squatted', 'squatter', 'squatters', 'squattest', 'squatting', 'squaw', 'squawk', 'squawked', 'squawking', 'squawks', 'squaws', 'squeak', 'squeaked', 'squeakier', 'squeaking', 'squeaks', 'squeaky', 'squeal', 'squealed', 'squealer', 'squealers', 'squealing', 'squeals', 'squeamish', 'squeegee', 'squeegeed', 'squeegees', 'squeeze', 'squeezed', 'squeezer', 'squeezers', 'squeezes', 'squeezing', 'squelch', 'squelched', 'squelches', 'squibb', 'squid', 'squids', 'squiggle', 'squiggled', 'squiggles', 'squiggly', 'squint', 'squinted', 'squinter', 'squintest', 'squinting', 'squints', 'squire', 'squired', 'squires', 'squiring', 'squirm', 'squirmed', 'squirmier', 'squirming', 'squirms', 'squirmy', 'squirrel', 'squirrels', 'squirt', 'squirted', 'squirting', 'squirts', 'squish', 'squished', 'squishes', 'squishier', 'squishing', 'squishy', 'srinagar', 'sriracha', 'srivijaya', 'stab', 'stabbed', 'stabbing', 'stabbings', 'stability', 'stabilize', 'stable', 'stabled', 'stabler', 'stables', 'stablest', 'stabling', 'stabs', 'staccati', 'staccato', 'staccatos', 'stacey', 'staci', 'stacie', 'stack', 'stacked', 'stacking', 'stacks', 'stacy', 'stadia', 'stadium', 'stadiums', 'stael', 'staff', 'staffed', 'staffer', 'staffers', 'staffing', 'stafford', 'staffs', 'stag', 'stage', 'staged', 'stagehand', 'stages', 'stagger', 'staggered', 'staggers', 'staging', 'stagings', 'stagnant', 'stagnate', 'stagnated', 'stagnates', 'stags', 'staid', 'staider', 'staidest', 'staidly', 'stain', 'stained', 'staining', 'stainless', 'stains', 'stair', 'staircase', 'stairs', 'stairway', 'stairways', 'stairwell', 'stake', 'staked', 'stakeout', 'stakeouts', 'stakes', 'staking', 'stale', 'staled', 'stalemate', 'staleness', 'staler', 'stales', 'stalest', 'stalin', 'staling', 'stalinist', 'stalk', 'stalked', 'stalker', 'stalkers', 'stalking', 'stalkings', 'stalks', 'stall', 'stalled', 'stalling', 'stallion', 'stallions', 'stallone', 'stalls', 'stalwart', 'stalwarts', 'stamen', 'stamens', 'stamford', 'stamina', 'stammer', 'stammered', 'stammerer', 'stammers', 'stamp', 'stamped', 'stampede', 'stampeded', 'stampedes', 'stamping', 'stamps', 'stan', 'stance', 'stances', 'stanch', 'stanched', 'stancher', 'stanches', 'stanchest', 'stanching', 'stanchion', 'stand', 'standard', 'standards', 'standby', 'standbys', 'standing', 'standings', 'standish', 'standoff', 'standoffs', 'standout', 'standouts', 'stands', 'stanford', 'stank', 'stanley', 'stanton', 'stanza', 'stanzas', 'staph', 'staple', 'stapled', 'stapler', 'staplers', 'staples', 'stapling', 'star', 'starboard', 'starbucks', 'starch', 'starched', 'starches', 'starchier', 'starching', 'starchy', 'stardom', 'stare', 'stared', 'stares', 'starfish', 'stargazer', 'staring', 'stark', 'starker', 'starkest', 'starkey', 'starkly', 'starkness', 'starless', 'starlet', 'starlets', 'starlight', 'starling', 'starlings', 'starlit', 'starr', 'starred', 'starrier', 'starriest', 'starring', 'starry', 'stars', 'start', 'started', 'starter', 'starters', 'starting', 'startle', 'startled', 'startles', 'startling', 'starts', 'startup', 'startups', 'starve', 'starved', 'starves', 'starving', 'starvings', 'stash', 'stashed', 'stashes', 'stashing', 'state', 'stated', 'statehood', 'stateless', 'statelier', 'stately', 'statement', 'staten', 'stater', 'stateroom', 'states', 'stateside', 'statesman', 'statesmen', 'statewide', 'stating', 'station', 'stationed', 'stationer', 'stations', 'statistic', 'stats', 'statuary', 'statue', 'statues', 'statuette', 'stature', 'statures', 'status', 'statuses', 'statute', 'statutes', 'statutory', 'staubach', 'staunch', 'staunched', 'stauncher', 'staunches', 'staunchly', 'stave', 'staved', 'staves', 'staving', 'stay', 'stayed', 'staying', 'stays', 'stead', 'steadfast', 'steadicam', 'steadied', 'steadier', 'steadies', 'steadiest', 'steadily', 'steads', 'steady', 'steadying', 'steak', 'steaks', 'steal', 'stealing', 'steals', 'stealth', 'stealthy', 'steam', 'steamboat', 'steamed', 'steamer', 'steamers', 'steamier', 'steamiest', 'steaming', 'steamroll', 'steams', 'steamship', 'steamy', 'steed', 'steeds', 'steel', 'steele', 'steeled', 'steelier', 'steeliest', 'steeling', 'steels', 'steely', 'steep', 'steeped', 'steeper', 'steepest', 'steeping', 'steeple', 'steeples', 'steeply', 'steepness', 'steeps', 'steer', 'steerage', 'steered', 'steering', 'steers', 'stefan', 'stefanie', 'stein', 'steinbeck', 'steinem', 'steiner', 'steinmetz', 'steins', 'steinway', 'stella', 'stellar', 'stem', 'stemmed', 'stemming', 'stems', 'stench', 'stenches', 'stencil', 'stenciled', 'stencils', 'stendhal', 'stengel', 'stent', 'stents', 'step', 'stepchild', 'stepdad', 'stepdads', 'stephan', 'stephanie', 'stephen', 'stephens', 'stepmom', 'stepmoms', 'steppe', 'stepped', 'steppes', 'stepping', 'steps', 'stepson', 'stepsons', 'stereo', 'stereos', 'sterile', 'sterility', 'sterilize', 'sterling', 'stern', 'sterna', 'sterne', 'sterner', 'sternest', 'sternly', 'sternness', 'sterno', 'sterns', 'sternum', 'sternums', 'steroid', 'steroids', 'stetson', 'steuben', 'steve', 'stevedore', 'steven', 'stevens', 'stevenson', 'stevie', 'stew', 'steward', 'stewarded', 'stewards', 'stewart', 'stewed', 'stewing', 'stews', 'stick', 'sticker', 'stickers', 'stickier', 'stickies', 'stickiest', 'sticking', 'stickler', 'sticklers', 'stickpin', 'stickpins', 'sticks', 'stickup', 'stickups', 'sticky', 'stieglitz', 'sties', 'stiff', 'stiffed', 'stiffen', 'stiffened', 'stiffener', 'stiffens', 'stiffer', 'stiffest', 'stiffing', 'stiffly', 'stiffness', 'stiffs', 'stifle', 'stifled', 'stifles', 'stifling', 'stiflings', 'stigma', 'stigmas', 'stigmata', 'stile', 'stiles', 'stiletto', 'stilettos', 'still', 'stillborn', 'stilled', 'stiller', 'stillest', 'stilling', 'stillness', 'stills', 'stilt', 'stilted', 'stilton', 'stilts', 'stimson', 'stimulant', 'stimulate', 'stimuli', 'stimulus', 'stine', 'sting', 'stinger', 'stingers', 'stingier', 'stingiest', 'stingily', 'stinging', 'stingray', 'stingrays', 'stings', 'stingy', 'stink', 'stinker', 'stinkers', 'stinking', 'stinks', 'stint', 'stinted', 'stinting', 'stints', 'stipend', 'stipends', 'stipple', 'stippled', 'stipples', 'stippling', 'stipulate', 'stir', 'stirling', 'stirred', 'stirrer', 'stirrers', 'stirring', 'stirrings', 'stirrup', 'stirrups', 'stirs', 'stitch', 'stitched', 'stitches', 'stitching', 'stoat', 'stoats', 'stock', 'stockade', 'stockaded', 'stockades', 'stocked', 'stockholm', 'stockier', 'stockiest', 'stocking', 'stockings', 'stockpile', 'stockroom', 'stocks', 'stockton', 'stocky', 'stockyard', 'stodgier', 'stodgiest', 'stodgy', 'stoic', 'stoical', 'stoically', 'stoicism', 'stoics', 'stoke', 'stoked', 'stoker', 'stokers', 'stokes', 'stoking', 'stole', 'stolen', 'stoles', 'stolid', 'stolider', 'stolidest', 'stolidity', 'stolidly', 'stolypin', 'stomach', 'stomached', 'stomachs', 'stomp', 'stomped', 'stomping', 'stomps', 'stone', 'stoned', 'stoner', 'stoners', 'stones', 'stonewall', 'stoneware', 'stonework', 'stoney', 'stonier', 'stoniest', 'stonily', 'stoning', 'stony', 'stood', 'stooge', 'stooges', 'stool', 'stools', 'stoop', 'stooped', 'stooping', 'stoops', 'stop', 'stopcock', 'stopcocks', 'stopgap', 'stopgaps', 'stoplight', 'stopover', 'stopovers', 'stoppable', 'stoppage', 'stoppages', 'stoppard', 'stopped', 'stopper', 'stoppered', 'stoppers', 'stopping', 'stops', 'stopwatch', 'storage', 'store', 'stored', 'storeroom', 'stores', 'storey', 'storeys', 'storied', 'stories', 'storing', 'stork', 'storks', 'storm', 'stormed', 'stormier', 'stormiest', 'stormily', 'storming', 'storms', 'stormy', 'story', 'storybook', 'stout', 'stouter', 'stoutest', 'stoutly', 'stoutness', 'stove', 'stovepipe', 'stoves', 'stow', 'stowaway', 'stowaways', 'stowe', 'stowed', 'stowing', 'stows', 'strabo', 'straddle', 'straddled', 'straddles', 'strafe', 'strafed', 'strafes', 'strafing', 'straggle', 'straggled', 'straggler', 'straggles', 'straggly', 'straight', 'straights', 'strain', 'strained', 'strainer', 'strainers', 'straining', 'strains', 'strait', 'straiten', 'straitens', 'straits', 'strand', 'stranded', 'stranding', 'strands', 'strange', 'strangely', 'stranger', 'strangers', 'strangest', 'strangle', 'strangled', 'strangler', 'strangles', 'strap', 'strapless', 'strapped', 'strapping', 'straps', 'strata', 'stratagem', 'strategic', 'strategy', 'stratify', 'stratum', 'stratums', 'strauss', 'straw', 'strawed', 'strawing', 'straws', 'stray', 'strayed', 'straying', 'strays', 'streak', 'streaked', 'streakier', 'streaking', 'streaks', 'streaky', 'stream', 'streamed', 'streamer', 'streamers', 'streaming', 'streams', 'street', 'streetcar', 'streets', 'streisand', 'strength', 'strengths', 'strenuous', 'strep', 'stress', 'stressed', 'stresses', 'stressful', 'stressing', 'stretch', 'stretched', 'stretcher', 'stretches', 'stretchy', 'strew', 'strewed', 'strewing', 'strewn', 'strews', 'striated', 'stricken', 'strict', 'stricter', 'strictest', 'strictly', 'stricture', 'stridden', 'stride', 'strident', 'strides', 'striding', 'strife', 'strike', 'strikeout', 'striker', 'strikers', 'strikes', 'striking', 'strikings', 'stringed', 'stringent', 'stringer', 'stringers', 'stringier', 'stringing', 'strings', 'stringy', 'strip', 'stripe', 'striped', 'stripes', 'striping', 'stripling', 'stripped', 'stripper', 'strippers', 'stripping', 'strips', 'stript', 'strive', 'strived', 'striven', 'strives', 'striving', 'strobe', 'strobes', 'strode', 'stroke', 'stroked', 'strokes', 'stroking', 'stroll', 'strolled', 'stroller', 'strollers', 'strolling', 'strolls', 'stromboli', 'strong', 'strongbox', 'stronger', 'strongest', 'strongly', 'strontium', 'strop', 'strophe', 'strophes', 'stropped', 'stropping', 'strops', 'strove', 'struck', 'structure', 'strudel', 'strudels', 'struggle', 'struggled', 'struggles', 'strum', 'strummed', 'strumming', 'strumpet', 'strumpets', 'strums', 'strung', 'strut', 'struts', 'strutted', 'strutting', 'stu', 'stuart', 'stuarts', 'stub', 'stubbed', 'stubbier', 'stubbiest', 'stubbing', 'stubble', 'stubbly', 'stubborn', 'stubby', 'stubs', 'stucco', 'stuccoed', 'stuccoes', 'stuccoing', 'stuccos', 'stuck', 'stud', 'studded', 'studding', 'student', 'students', 'studied', 'studies', 'studio', 'studios', 'studious', 'studs', 'study', 'studying', 'stuff', 'stuffed', 'stuffier', 'stuffiest', 'stuffily', 'stuffing', 'stuffings', 'stuffs', 'stuffy', 'stultify', 'stumble', 'stumbled', 'stumbler', 'stumblers', 'stumbles', 'stumbling', 'stump', 'stumped', 'stumpier', 'stumpiest', 'stumping', 'stumps', 'stumpy', 'stun', 'stung', 'stunk', 'stunned', 'stunning', 'stuns', 'stunt', 'stunted', 'stunting', 'stunts', 'stupefied', 'stupefies', 'stupefy', 'stupid', 'stupider', 'stupidest', 'stupidity', 'stupidly', 'stupids', 'stupor', 'stupors', 'sturdier', 'sturdiest', 'sturdily', 'sturdy', 'sturgeon', 'sturgeons', 'stutter', 'stuttered', 'stutterer', 'stutters', 'stuttgart', 'sty', 'stye', 'styes', 'stygian', 'style', 'styled', 'styles', 'styli', 'styling', 'stylish', 'stylishly', 'stylist', 'stylistic', 'stylists', 'stylize', 'stylized', 'stylizes', 'stylizing', 'stylus', 'styluses', 'stymie', 'stymied', 'stymieing', 'stymies', 'stymying', 'styptic', 'styptics', 'styrofoam', 'styron', 'styx', 'suarez', 'suave', 'suavely', 'suaver', 'suavest', 'suavity', 'sub', 'subaru', 'subatomic', 'subbed', 'subbing', 'subclass', 'subdivide', 'subdue', 'subdued', 'subdues', 'subduing', 'subgroup', 'subgroups', 'subhead', 'subheads', 'subhuman', 'subhumans', 'subject', 'subjected', 'subjects', 'subjoin', 'subjoined', 'subjoins', 'subjugate', 'sublease', 'subleased', 'subleases', 'sublet', 'sublets', 'sublimate', 'sublime', 'sublimed', 'sublimely', 'sublimer', 'sublimes', 'sublimest', 'subliming', 'sublimity', 'submarine', 'submerge', 'submerged', 'submerges', 'submerse', 'submersed', 'submerses', 'submit', 'submits', 'submitted', 'submitter', 'subnormal', 'suborn', 'suborned', 'suborning', 'suborns', 'subplot', 'subplots', 'subpoena', 'subpoenas', 'subprime', 'subs', 'subscribe', 'subscript', 'subset', 'subsets', 'subside', 'subsided', 'subsides', 'subsidies', 'subsiding', 'subsidize', 'subsidy', 'subsist', 'subsisted', 'subsists', 'subsoil', 'subsonic', 'subspace', 'substance', 'substrata', 'substrate', 'subsume', 'subsumed', 'subsumes', 'subsuming', 'subsystem', 'subteen', 'subteens', 'subtitle', 'subtitled', 'subtitles', 'subtle', 'subtler', 'subtlest', 'subtlety', 'subtly', 'subtotal', 'subtotals', 'subtract', 'subtracts', 'suburb', 'suburban', 'suburbans', 'suburbia', 'suburbs', 'subvert', 'subverted', 'subverts', 'subway', 'subways', 'succeed', 'succeeded', 'succeeds', 'success', 'successes', 'successor', 'succinct', 'succor', 'succored', 'succoring', 'succors', 'succotash', 'succulent', 'succumb', 'succumbed', 'succumbs', 'such', 'suchlike', 'suck', 'sucked', 'sucker', 'suckered', 'suckering', 'suckers', 'sucking', 'suckle', 'suckled', 'suckles', 'suckling', 'sucklings', 'sucks', 'sucre', 'sucrets', 'sucrose', 'suction', 'suctioned', 'suctions', 'sudan', 'sudanese', 'sudden', 'suddenly', 'sudoku', 'sudra', 'suds', 'sudsier', 'sudsiest', 'sudsy', 'sue', 'sued', 'suede', 'sues', 'suet', 'suetonius', 'suez', 'suffer', 'suffered', 'sufferer', 'sufferers', 'suffering', 'suffers', 'suffice', 'sufficed', 'suffices', 'sufficing', 'suffix', 'suffixed', 'suffixes', 'suffixing', 'suffocate', 'suffolk', 'suffragan', 'suffrage', 'suffuse', 'suffused', 'suffuses', 'suffusing', 'suffusion', 'sufi', 'sufism', 'sugar', 'sugarcane', 'sugarcoat', 'sugared', 'sugarier', 'sugariest', 'sugaring', 'sugarless', 'sugars', 'sugary', 'suggest', 'suggested', 'suggester', 'suggests', 'suharto', 'sui', 'suicidal', 'suicide', 'suicides', 'suing', 'suit', 'suitable', 'suitably', 'suitcase', 'suitcases', 'suite', 'suited', 'suites', 'suiting', 'suitor', 'suitors', 'suits', 'sukarno', 'sukiyaki', 'sukkot', 'sukkoth', 'sukkoths', 'sulawesi', 'suleiman', 'sulfate', 'sulfates', 'sulfide', 'sulfides', 'sulfur', 'sulfured', 'sulfuric', 'sulfuring', 'sulfurous', 'sulfurs', 'sulk', 'sulked', 'sulkier', 'sulkies', 'sulkiest', 'sulkily', 'sulkiness', 'sulking', 'sulks', 'sulky', 'sulla', 'sullen', 'sullener', 'sullenest', 'sullenly', 'sullied', 'sullies', 'sullivan', 'sully', 'sullying', 'sulphur', 'sulphured', 'sulphurs', 'sultan', 'sultana', 'sultanas', 'sultanate', 'sultans', 'sultrier', 'sultriest', 'sultry', 'sum', 'sumac', 'sumach', 'sumatra', 'sumeria', 'sumerian', 'summaries', 'summarily', 'summarize', 'summary', 'summation', 'summed', 'summer', 'summered', 'summering', 'summers', 'summery', 'summing', 'summit', 'summitry', 'summits', 'summon', 'summoned', 'summoner', 'summoners', 'summoning', 'summons', 'summonsed', 'summonses', 'sumner', 'sumo', 'sump', 'sumps', 'sumptuous', 'sums', 'sumter', 'sun', 'sunbathe', 'sunbathed', 'sunbather', 'sunbathes', 'sunbeam', 'sunbeams', 'sunbelt', 'sunblock', 'sunblocks', 'sunbonnet', 'sunburn', 'sunburned', 'sunburns', 'sunburnt', 'sundae', 'sundaes', 'sundanese', 'sundas', 'sunday', 'sundays', 'sunder', 'sundered', 'sundering', 'sunders', 'sundial', 'sundials', 'sundown', 'sundowns', 'sundries', 'sundry', 'sunfish', 'sunfishes', 'sunflower', 'sung', 'sunk', 'sunken', 'sunkist', 'sunlamp', 'sunlamps', 'sunless', 'sunlight', 'sunlit', 'sunned', 'sunni', 'sunnier', 'sunniest', 'sunning', 'sunny', 'sunnyvale', 'sunrise', 'sunrises', 'sunroof', 'sunroofs', 'suns', 'sunscreen', 'sunset', 'sunsets', 'sunshine', 'sunspot', 'sunspots', 'sunstroke', 'suntan', 'suntanned', 'suntans', 'sunup', 'sup', 'superb', 'superber', 'superbest', 'superbly', 'superbowl', 'superego', 'superegos', 'superfund', 'superglue', 'superior', 'superiors', 'superman', 'supermen', 'supernova', 'supers', 'supersede', 'supersize', 'superstar', 'supervene', 'supervise', 'supine', 'supped', 'supper', 'suppers', 'supping', 'supplant', 'supplants', 'supple', 'suppler', 'supplest', 'suppliant', 'supplied', 'supplier', 'suppliers', 'supplies', 'supply', 'supplying', 'support', 'supported', 'supporter', 'supports', 'suppose', 'supposed', 'supposes', 'supposing', 'suppress', 'suppurate', 'supremacy', 'supreme', 'supremely', 'sups', 'surabaya', 'surat', 'surcease', 'surceased', 'surceases', 'surcharge', 'sure', 'surefire', 'surely', 'sureness', 'surer', 'surest', 'sureties', 'surety', 'surf', 'surface', 'surfaced', 'surfaces', 'surfacing', 'surfboard', 'surfed', 'surfeit', 'surfeited', 'surfeits', 'surfer', 'surfers', 'surfing', 'surfs', 'surge', 'surged', 'surgeon', 'surgeons', 'surgeries', 'surgery', 'surges', 'surgical', 'surging', 'surinam', 'suriname', 'surlier', 'surliest', 'surliness', 'surly', 'surmise', 'surmised', 'surmises', 'surmising', 'surmount', 'surmounts', 'surname', 'surnames', 'surpass', 'surpassed', 'surpasses', 'surplice', 'surplices', 'surplus', 'surplused', 'surpluses', 'surprise', 'surprised', 'surprises', 'surreal', 'surrender', 'surrey', 'surreys', 'surrogate', 'surround', 'surrounds', 'surtax', 'surtaxed', 'surtaxes', 'surtaxing', 'survey', 'surveyed', 'surveying', 'surveyor', 'surveyors', 'surveys', 'survival', 'survivals', 'survive', 'survived', 'survives', 'surviving', 'survivor', 'survivors', 'surya', 'susan', 'susana', 'susanna', 'susanne', 'suse', 'sushi', 'susie', 'suspect', 'suspected', 'suspects', 'suspended', 'suspender', 'suspends', 'suspense', 'suspicion', 'sussex', 'sustain', 'sustained', 'sustains', 'sutton', 'suture', 'sutured', 'sutures', 'suturing', 'suva', 'suwanee', 'suzanne', 'suzette', 'suzhou', 'suzuki', 'suzy', 'svalbard', 'svelte', 'svelter', 'sveltest', 'sven', 'svengali', 'svn', 'swab', 'swabbed', 'swabbing', 'swabs', 'swaddle', 'swaddled', 'swaddles', 'swaddling', 'swag', 'swagged', 'swagger', 'swaggered', 'swaggerer', 'swaggers', 'swagging', 'swags', 'swahili', 'swahilis', 'swain', 'swains', 'swallow', 'swallowed', 'swallows', 'swam', 'swami', 'swamis', 'swamp', 'swamped', 'swampier', 'swampiest', 'swamping', 'swamps', 'swampy', 'swan', 'swanee', 'swank', 'swanked', 'swanker', 'swankest', 'swankier', 'swankiest', 'swanking', 'swanks', 'swanky', 'swans', 'swansea', 'swanson', 'swap', 'swapped', 'swapping', 'swaps', 'sward', 'swards', 'swarm', 'swarmed', 'swarming', 'swarms', 'swarthier', 'swarthy', 'swash', 'swashed', 'swashes', 'swashing', 'swastika', 'swastikas', 'swat', 'swatch', 'swatches', 'swath', 'swathe', 'swathed', 'swathes', 'swathing', 'swaths', 'swats', 'swatted', 'swatter', 'swattered', 'swatters', 'swatting', 'sway', 'swayed', 'swaying', 'sways', 'swazi', 'swaziland', 'swear', 'swearer', 'swearers', 'swearing', 'swears', 'swearword', 'sweat', 'sweater', 'sweaters', 'sweatier', 'sweatiest', 'sweating', 'sweats', 'sweatshop', 'sweaty', 'swede', 'sweden', 'swedes', 'swedish', 'sweeney', 'sweep', 'sweeper', 'sweepers', 'sweeping', 'sweepings', 'sweeps', 'sweet', 'sweeten', 'sweetened', 'sweetener', 'sweetens', 'sweeter', 'sweetest', 'sweetie', 'sweeties', 'sweetish', 'sweetly', 'sweetmeat', 'sweetness', 'sweets', 'swell', 'swelled', 'sweller', 'swellest', 'swellhead', 'swelling', 'swellings', 'swells', 'swelter', 'sweltered', 'swelters', 'swept', 'swerve', 'swerved', 'swerves', 'swerving', 'swift', 'swifter', 'swiftest', 'swiftly', 'swiftness', 'swifts', 'swig', 'swigged', 'swigging', 'swigs', 'swill', 'swilled', 'swilling', 'swills', 'swim', 'swimmer', 'swimmers', 'swimming', 'swims', 'swimsuit', 'swimsuits', 'swinburne', 'swindle', 'swindled', 'swindler', 'swindlers', 'swindles', 'swindling', 'swine', 'swines', 'swing', 'swinger', 'swingers', 'swinging', 'swings', 'swinish', 'swipe', 'swiped', 'swipes', 'swiping', 'swirl', 'swirled', 'swirling', 'swirls', 'swirly', 'swish', 'swished', 'swisher', 'swishes', 'swishest', 'swishing', 'swiss', 'swissair', 'swisses', 'switched', 'switcher', 'switches', 'switching', 'swivel', 'swiveled', 'swiveling', 'swivelled', 'swivels', 'swollen', 'swoon', 'swooned', 'swooning', 'swoons', 'swoop', 'swooped', 'swooping', 'swoops', 'swop', 'swopped', 'swopping', 'swops', 'sword', 'swordfish', 'swordplay', 'swords', 'swordsman', 'swordsmen', 'swore', 'sworn', 'swum', 'swung', 'sybarite', 'sybarites', 'sybaritic', 'sybil', 'sycamore', 'sycamores', 'sycophant', 'sydney', 'sykes', 'syllabi', 'syllabic', 'syllabify', 'syllable', 'syllables', 'syllabus', 'syllogism', 'sylph', 'sylphs', 'sylvan', 'sylvester', 'sylvia', 'sylvie', 'symbioses', 'symbiosis', 'symbiotic', 'symbol', 'symbolic', 'symbolism', 'symbolize', 'symbols', 'symmetric', 'symmetry', 'sympathy', 'symphonic', 'symphony', 'symposia', 'symposium', 'symptom', 'symptoms', 'synagog', 'synagogs', 'synagogue', 'synapse', 'synapses', 'sync', 'synced', 'synch', 'synched', 'synches', 'synching', 'synchs', 'syncing', 'syncopate', 'syncs', 'syndicate', 'syndrome', 'syndromes', 'synergism', 'synergy', 'synge', 'synod', 'synods', 'synonym', 'synonyms', 'synopses', 'synopsis', 'syntactic', 'syntax', 'syntheses', 'synthesis', 'synthetic', 'syphilis', 'syphon', 'syphoned', 'syphoning', 'syphons', 'syracuse', 'syria', 'syriac', 'syrian', 'syrians', 'syringe', 'syringed', 'syringes', 'syringing', 'syrup', 'syrups', 'syrupy', 'system', 'systemic', 'systemics', 'systems', 'systolic', 'szechuan', 'szilard', 'tab', 'tabasco', 'tabatha', 'tabbed', 'tabbies', 'tabbing', 'tabby', 'tabitha', 'table', 'tableau', 'tableaus', 'tableaux', 'tabled', 'tableland', 'tables', 'tablet', 'tablets', 'tableware', 'tabling', 'tabloid', 'tabloids', 'taboo', 'tabooed', 'tabooing', 'taboos', 'tabriz', 'tabs', 'tabu', 'tabued', 'tabuing', 'tabular', 'tabulate', 'tabulated', 'tabulates', 'tabulator', 'tabus', 'tacit', 'tacitly', 'tacitness', 'taciturn', 'tacitus', 'tack', 'tacked', 'tackier', 'tackiest', 'tackiness', 'tacking', 'tackle', 'tackled', 'tackler', 'tacklers', 'tackles', 'tackling', 'tacks', 'tacky', 'taco', 'tacoma', 'tacos', 'tact', 'tactful', 'tactfully', 'tactic', 'tactical', 'tactician', 'tactics', 'tactile', 'tactless', 'tad', 'tadpole', 'tadpoles', 'tads', 'tadzhik', 'taegu', 'taejon', 'taffeta', 'taffies', 'taffy', 'taft', 'tag', 'tagalog', 'tagged', 'tagging', 'tagore', 'tags', 'tagus', 'tahiti', 'tahitian', 'tahitians', 'tahoe', 'taichung', 'tail', 'tailcoat', 'tailcoats', 'tailed', 'tailgate', 'tailgated', 'tailgates', 'tailing', 'tailless', 'taillight', 'tailor', 'tailored', 'tailoring', 'tailors', 'tailpipe', 'tailpipes', 'tails', 'tailspin', 'tailspins', 'tailwind', 'tailwinds', 'taine', 'taint', 'tainted', 'tainting', 'taints', 'taipei', 'taiping', 'taiwan', 'taiwanese', 'taiyuan', 'take', 'takeaways', 'taken', 'takeoff', 'takeoffs', 'takeout', 'takeouts', 'takeover', 'takeovers', 'taker', 'takers', 'takes', 'taking', 'takings', 'talbot', 'talc', 'tale', 'talent', 'talented', 'talents', 'tales', 'taliban', 'taliesin', 'talisman', 'talismans', 'talk', 'talkative', 'talked', 'talker', 'talkers', 'talking', 'talks', 'tall', 'tallchief', 'taller', 'tallest', 'talley', 'tallied', 'tallies', 'tallinn', 'tallness', 'tallow', 'tally', 'tallyho', 'tallyhoed', 'tallyhos', 'tallying', 'talmud', 'talmudic', 'talmuds', 'talon', 'talons', 'tam', 'tamable', 'tamale', 'tamales', 'tamara', 'tamarind', 'tamarinds', 'tame', 'tameable', 'tamed', 'tameka', 'tamely', 'tameness', 'tamer', 'tamera', 'tamerlane', 'tamers', 'tames', 'tamest', 'tami', 'tamika', 'tamil', 'taming', 'tammany', 'tammi', 'tammie', 'tammuz', 'tammy', 'tamp', 'tampa', 'tampax', 'tamped', 'tamper', 'tampered', 'tampering', 'tampers', 'tamping', 'tampon', 'tampons', 'tamps', 'tamra', 'tams', 'tamworth', 'tan', 'tanager', 'tanagers', 'tancred', 'tandem', 'tandems', 'taney', 'tang', 'tangelo', 'tangelos', 'tangent', 'tangents', 'tangerine', 'tangible', 'tangibles', 'tangibly', 'tangier', 'tangiers', 'tangiest', 'tangle', 'tangled', 'tangles', 'tangling', 'tango', 'tangoed', 'tangoing', 'tangos', 'tangs', 'tangshan', 'tangy', 'tania', 'tanisha', 'tank', 'tankard', 'tankards', 'tanked', 'tanker', 'tankers', 'tankful', 'tankfuls', 'tanking', 'tanks', 'tanned', 'tanner', 'tanneries', 'tanners', 'tannery', 'tannest', 'tannin', 'tanning', 'tans', 'tansy', 'tantalize', 'tantalus', 'tantrum', 'tantrums', 'tanya', 'tanzania', 'tanzanian', 'tao', 'taoism', 'taoisms', 'taoist', 'taoists', 'tap', 'tape', 'taped', 'taper', 'tapered', 'tapering', 'tapers', 'tapes', 'tapestry', 'tapeworm', 'tapeworms', 'taping', 'tapioca', 'tapir', 'tapirs', 'tapped', 'tapping', 'taproom', 'taprooms', 'taproot', 'taproots', 'taps', 'tar', 'tara', 'tarantino', 'tarantula', 'tarawa', 'tarazed', 'tarbell', 'tardier', 'tardiest', 'tardily', 'tardiness', 'tardy', 'tare', 'tared', 'tares', 'target', 'targeted', 'targeting', 'targets', 'tariff', 'tariffs', 'tarim', 'taring', 'tarkenton', 'tarmac', 'tarmacked', 'tarmacs', 'tarnish', 'tarnished', 'tarnishes', 'taro', 'taros', 'tarot', 'tarots', 'tarp', 'tarpaulin', 'tarpon', 'tarpons', 'tarps', 'tarragon', 'tarragons', 'tarred', 'tarried', 'tarrier', 'tarries', 'tarriest', 'tarring', 'tarry', 'tarrying', 'tars', 'tart', 'tartan', 'tartans', 'tartar', 'tartars', 'tartary', 'tarter', 'tartest', 'tartly', 'tartness', 'tarts', 'tartuffe', 'tarzan', 'taser', 'tasered', 'tasering', 'tasers', 'tasha', 'tashkent', 'task', 'tasked', 'tasking', 'tasks', 'tasman', 'tasmania', 'tasmanian', 'tass', 'tassel', 'tasseled', 'tasseling', 'tasselled', 'tassels', 'taste', 'tasted', 'tasteful', 'tasteless', 'taster', 'tasters', 'tastes', 'tastier', 'tastiest', 'tastiness', 'tasting', 'tasty', 'tat', 'tatar', 'tatars', 'tate', 'tats', 'tatted', 'tatter', 'tattered', 'tattering', 'tatters', 'tatting', 'tattle', 'tattled', 'tattler', 'tattlers', 'tattles', 'tattling', 'tattoo', 'tattooed', 'tattooing', 'tattooist', 'tattoos', 'tatty', 'tatum', 'taught', 'taunt', 'taunted', 'taunting', 'taunts', 'taupe', 'taurus', 'tauruses', 'taut', 'tauter', 'tautest', 'tautly', 'tautness', 'tautology', 'tavern', 'taverns', 'tawdrier', 'tawdriest', 'tawdry', 'tawney', 'tawnier', 'tawniest', 'tawny', 'tax', 'taxable', 'taxation', 'taxed', 'taxes', 'taxi', 'taxicab', 'taxicabs', 'taxidermy', 'taxied', 'taxies', 'taxiing', 'taxing', 'taxis', 'taxonomic', 'taxonomy', 'taxpayer', 'taxpayers', 'taxying', 'taylor', 'tbilisi', 'tea', 'teabag', 'teach', 'teachable', 'teacher', 'teachers', 'teaches', 'teaching', 'teachings', 'teacup', 'teacups', 'teak', 'teakettle', 'teaks', 'teal', 'tealight', 'tealights', 'teals', 'team', 'teamed', 'teaming', 'teammate', 'teammates', 'teams', 'teamster', 'teamsters', 'teamwork', 'teapot', 'teapots', 'tear', 'teardrop', 'teardrops', 'teared', 'tearful', 'tearfully', 'teargas', 'teargases', 'tearier', 'teariest', 'tearing', 'tearoom', 'tearooms', 'tears', 'teary', 'teas', 'teasdale', 'tease', 'teased', 'teasel', 'teasels', 'teaser', 'teasers', 'teases', 'teasing', 'teaspoon', 'teaspoons', 'teat', 'teatime', 'teats', 'teazel', 'teazels', 'teazle', 'teazles', 'technical', 'technique', 'techno', 'techs', 'tectonics', 'tecumseh', 'ted', 'teddy', 'tedious', 'tediously', 'tedium', 'tee', 'teed', 'teeing', 'teem', 'teemed', 'teeming', 'teems', 'teen', 'teenage', 'teenaged', 'teenager', 'teenagers', 'teenier', 'teeniest', 'teens', 'teensier', 'teensiest', 'teensy', 'teeny', 'teepee', 'teepees', 'tees', 'teeter', 'teetered', 'teetering', 'teeters', 'teeth', 'teethe', 'teethed', 'teethes', 'teething', 'teetotal', 'teflon', 'teflons', 'teheran', 'tehran', 'telecast', 'telecasts', 'telegram', 'telegrams', 'telegraph', 'telemann', 'telemeter', 'telemetry', 'telepathy', 'telephone', 'telephony', 'telephoto', 'telescope', 'telethon', 'telethons', 'teletype', 'teletypes', 'televise', 'televised', 'televises', 'telex', 'telexed', 'telexes', 'telexing', 'tell', 'teller', 'tellers', 'telling', 'tellingly', 'tells', 'telltale', 'telltales', 'telugu', 'temblor', 'temblors', 'temerity', 'temp', 'tempe', 'temped', 'temper', 'tempera', 'temperas', 'temperate', 'tempered', 'tempering', 'tempers', 'tempest', 'tempests', 'tempi', 'temping', 'templar', 'template', 'templates', 'temple', 'temples', 'tempo', 'temporal', 'temporary', 'temporize', 'tempos', 'temps', 'tempt', 'tempted', 'tempter', 'tempters', 'tempting', 'temptress', 'tempts', 'tempura', 'ten', 'tenable', 'tenacious', 'tenacity', 'tenancies', 'tenancy', 'tenant', 'tenanted', 'tenanting', 'tenants', 'tend', 'tended', 'tendency', 'tender', 'tendered', 'tenderer', 'tenderest', 'tendering', 'tenderize', 'tenderly', 'tenders', 'tending', 'tendon', 'tendons', 'tendril', 'tendrils', 'tends', 'tenement', 'tenements', 'tenet', 'tenets', 'tenfold', 'tennessee', 'tennis', 'tennyson', 'tenon', 'tenoned', 'tenoning', 'tenons', 'tenor', 'tenors', 'tenpin', 'tenpins', 'tens', 'tense', 'tensed', 'tensely', 'tenseness', 'tenser', 'tenses', 'tensest', 'tensile', 'tensing', 'tension', 'tensions', 'tensor', 'tensors', 'tent', 'tentacle', 'tentacles', 'tentative', 'tented', 'tenth', 'tenths', 'tenting', 'tents', 'tenuous', 'tenuously', 'tenure', 'tenured', 'tenures', 'tenuring', 'tepee', 'tepees', 'tepid', 'tequila', 'tequilas', 'terabit', 'terabits', 'terabyte', 'terabytes', 'terence', 'teresa', 'teri', 'terkel', 'term', 'termagant', 'termed', 'terminal', 'terminals', 'terminate', 'terming', 'termini', 'terminus', 'termite', 'termites', 'termly', 'terms', 'tern', 'terns', 'terr', 'terra', 'terrace', 'terraced', 'terraces', 'terracing', 'terrain', 'terrains', 'terran', 'terrance', 'terrapin', 'terrapins', 'terraria', 'terrarium', 'terrell', 'terrence', 'terri', 'terrible', 'terribly', 'terrie', 'terrier', 'terriers', 'terrific', 'terrified', 'terrifies', 'terrify', 'territory', 'terror', 'terrorism', 'terrorist', 'terrorize', 'terrors', 'terry', 'terse', 'tersely', 'terseness', 'terser', 'tersest', 'tertiary', 'tesla', 'tess', 'tessa', 'tessie', 'test', 'testable', 'testament', 'testate', 'testates', 'tested', 'tester', 'testers', 'testes', 'testicle', 'testicles', 'testier', 'testiest', 'testified', 'testifies', 'testify', 'testily', 'testimony', 'testiness', 'testing', 'testis', 'tests', 'testy', 'tet', 'tetanus', 'tether', 'tethered', 'tethering', 'tethers', 'tethys', 'tetons', 'teutonic', 'tevet', 'texaco', 'texan', 'texans', 'texas', 'text', 'textbook', 'textbooks', 'texted', 'textile', 'textiles', 'texting', 'texts', 'textual', 'textually', 'textural', 'texture', 'textured', 'textures', 'texturing', 'thackeray', 'thad', 'thaddeus', 'thai', 'thailand', 'thais', 'thalami', 'thalamus', 'thales', 'thalia', 'thallium', 'thames', 'than', 'thanh', 'thank', 'thanked', 'thankful', 'thanking', 'thankless', 'thanks', 'thant', 'thar', 'tharp', 'that', 'thatch', 'thatched', 'thatcher', 'thatches', 'thatching', 'thaw', 'thawed', 'thawing', 'thaws', 'the', 'thea', 'theater', 'theaters', 'theatre', 'theatres', 'thebes', 'thee', 'thees', 'theft', 'thefts', 'theiler', 'their', 'theirs', 'theism', 'theist', 'theistic', 'theists', 'thelma', 'them', 'thematic', 'theme', 'themes', 'then', 'thence', 'theocracy', 'theodora', 'theodore', 'theodoric', 'theology', 'theorem', 'theorems', 'theoretic', 'theories', 'theorist', 'theorists', 'theorize', 'theorized', 'theorizes', 'theory', 'theosophy', 'therapies', 'therapist', 'therapy', 'theravada', 'there', 'thereby', 'therefore', 'therefrom', 'therein', 'thereof', 'thereon', 'theresa', 'therese', 'thereto', 'thereupon', 'therewith', 'thermal', 'thermally', 'thermals', 'thermos', 'thermoses', 'theron', 'thesauri', 'thesaurus', 'these', 'theses', 'theseus', 'thesis', 'thespian', 'thespians', 'thespis', 'thessaly', 'theta', 'they', 'thiamin', 'thiamine', 'thick', 'thicken', 'thickened', 'thickener', 'thickens', 'thicker', 'thickest', 'thicket', 'thickets', 'thickly', 'thickness', 'thickset', 'thief', 'thieu', 'thieve', 'thieved', 'thievery', 'thieves', 'thieving', 'thievish', 'thigh', 'thighbone', 'thighs', 'thimble', 'thimbles', 'thimbu', 'thin', 'thine', 'thing', 'things', 'think', 'thinker', 'thinkers', 'thinking', 'thinks', 'thinly', 'thinned', 'thinner', 'thinners', 'thinness', 'thinnest', 'thinning', 'thins', 'third', 'thirdly', 'thirds', 'thirst', 'thirsted', 'thirstier', 'thirstily', 'thirsting', 'thirsts', 'thirsty', 'thirteen', 'thirteens', 'thirties', 'thirtieth', 'thirty', 'thistle', 'thistles', 'thither', 'tho', 'thomas', 'thomism', 'thomistic', 'thompson', 'thomson', 'thong', 'thongs', 'thor', 'thoraces', 'thoracic', 'thorax', 'thoraxes', 'thorazine', 'thoreau', 'thorium', 'thorn', 'thornier', 'thorniest', 'thorns', 'thornton', 'thorny', 'thorough', 'thorpe', 'those', 'thoth', 'thou', 'though', 'thought', 'thoughts', 'thous', 'thousand', 'thousands', 'thrace', 'thracian', 'thraldom', 'thrall', 'thralldom', 'thralled', 'thralling', 'thralls', 'thrash', 'thrashed', 'thrasher', 'thrashers', 'thrashes', 'thrashing', 'thread', 'threaded', 'threading', 'threads', 'threat', 'threaten', 'threatens', 'threats', 'three', 'threefold', 'threes', 'threesome', 'threnody', 'thresh', 'threshed', 'thresher', 'threshers', 'threshes', 'threshing', 'threshold', 'threw', 'thrice', 'thrift', 'thriftier', 'thriftily', 'thrifts', 'thrifty', 'thrill', 'thrilled', 'thriller', 'thrillers', 'thrilling', 'thrills', 'thrive', 'thrived', 'thriven', 'thrives', 'thriving', 'throat', 'throatier', 'throatily', 'throats', 'throaty', 'throb', 'throbbed', 'throbbing', 'throbs', 'throe', 'throes', 'throne', 'thrones', 'throng', 'thronged', 'thronging', 'throngs', 'throttle', 'throttled', 'throttles', 'through', 'throve', 'throwaway', 'throwback', 'thrower', 'throwers', 'throwing', 'thrown', 'thru', 'thrum', 'thrummed', 'thrumming', 'thrums', 'thrush', 'thrushes', 'thrust', 'thrusting', 'thrusts', 'thruway', 'thruways', 'thud', 'thudded', 'thudding', 'thuds', 'thug', 'thugs', 'thule', 'thumb', 'thumbed', 'thumbing', 'thumbnail', 'thumbs', 'thumbtack', 'thump', 'thumped', 'thumping', 'thumps', 'thunder', 'thundered', 'thunders', 'thurber', 'thurman', 'thurmond', 'thursday', 'thursdays', 'thus', 'thutmose', 'thwack', 'thwacked', 'thwacking', 'thwacks', 'thwart', 'thwarted', 'thwarting', 'thwarts', 'thy', 'thyme', 'thymi', 'thymus', 'thymuses', 'thyroid', 'thyroids', 'thyself', 'tia', 'tianjin', 'tiara', 'tiaras', 'tiber', 'tiberius', 'tibet', 'tibetan', 'tibetans', 'tibia', 'tibiae', 'tibias', 'tic', 'tick', 'ticked', 'ticker', 'tickers', 'ticket', 'ticketed', 'ticketing', 'tickets', 'ticking', 'tickle', 'tickled', 'tickles', 'tickling', 'ticklish', 'ticks', 'tics', 'tidal', 'tidbit', 'tidbits', 'tide', 'tided', 'tides', 'tidewater', 'tidied', 'tidier', 'tidies', 'tidiest', 'tidily', 'tidiness', 'tiding', 'tidings', 'tidy', 'tidying', 'tie', 'tied', 'tieing', 'tienanmen', 'tientsin', 'tier', 'tiers', 'ties', 'tiff', 'tiffany', 'tiffed', 'tiffing', 'tiffs', 'tiger', 'tigers', 'tight', 'tighten', 'tightened', 'tightens', 'tighter', 'tightest', 'tightly', 'tightness', 'tightrope', 'tights', 'tightwad', 'tightwads', 'tigress', 'tigresses', 'tigris', 'tijuana', 'tike', 'tikes', 'tilde', 'tildes', 'tile', 'tiled', 'tiles', 'tiling', 'till', 'tillable', 'tillage', 'tilled', 'tiller', 'tillers', 'tillich', 'tilling', 'tillman', 'tills', 'tilsit', 'tilt', 'tilted', 'tilting', 'tilts', 'tim', 'timber', 'timbered', 'timbering', 'timbers', 'timbre', 'timbres', 'timbuktu', 'time', 'timed', 'timeless', 'timelier', 'timeliest', 'timeline', 'timelines', 'timely', 'timepiece', 'timer', 'timers', 'times', 'timescale', 'timestamp', 'timetable', 'timeworn', 'timex', 'timezone', 'timid', 'timider', 'timidest', 'timidity', 'timidly', 'timing', 'timings', 'timmy', 'timon', 'timor', 'timorous', 'timothy', 'timpani', 'timpanist', 'timur', 'timurid', 'tin', 'tina', 'tincture', 'tinctured', 'tinctures', 'tinder', 'tinderbox', 'tine', 'tines', 'tinfoil', 'ting', 'tinge', 'tinged', 'tingeing', 'tinges', 'tinging', 'tingle', 'tingled', 'tingles', 'tingling', 'tinglings', 'tingly', 'tings', 'tinier', 'tiniest', 'tinker', 'tinkered', 'tinkering', 'tinkers', 'tinkertoy', 'tinkle', 'tinkled', 'tinkles', 'tinkling', 'tinned', 'tinnier', 'tinniest', 'tinning', 'tinny', 'tins', 'tinsel', 'tinseled', 'tinseling', 'tinselled', 'tinsels', 'tinsmith', 'tinsmiths', 'tint', 'tinted', 'tinting', 'tints', 'tiny', 'tip', 'tipi', 'tipis', 'tipped', 'tipper', 'tipperary', 'tippers', 'tipping', 'tipple', 'tippled', 'tippler', 'tipplers', 'tipples', 'tippling', 'tips', 'tipsier', 'tipsiest', 'tipsily', 'tipster', 'tipsters', 'tipsy', 'tiptoe', 'tiptoed', 'tiptoeing', 'tiptoes', 'tiptop', 'tiptops', 'tirade', 'tirades', 'tirana', 'tire', 'tired', 'tireder', 'tiredest', 'tiredness', 'tireless', 'tires', 'tiresias', 'tiresome', 'tiring', 'tiro', 'tiros', 'tisha', 'tishri', 'tissue', 'tissues', 'tit', 'titan', 'titania', 'titanic', 'titanium', 'titans', 'titbit', 'titbits', 'tithe', 'tithed', 'tithes', 'tithing', 'titian', 'titicaca', 'titillate', 'title', 'titled', 'titles', 'titling', 'titmice', 'titmouse', 'tito', 'tits', 'titter', 'tittered', 'tittering', 'titters', 'tittle', 'tittles', 'titular', 'titus', 'tizzies', 'tizzy', 'tlaloc', 'tlingit', 'toad', 'toadied', 'toadies', 'toads', 'toadstool', 'toady', 'toadying', 'toast', 'toasted', 'toaster', 'toasters', 'toastier', 'toastiest', 'toasting', 'toasts', 'toasty', 'tobacco', 'tobaccoes', 'tobaccos', 'tobago', 'toboggan', 'toboggans', 'toby', 'tocantins', 'tocsin', 'tocsins', 'tod', 'today', 'todd', 'toddies', 'toddle', 'toddled', 'toddler', 'toddlers', 'toddles', 'toddling', 'toddy', 'toe', 'toed', 'toehold', 'toeholds', 'toeing', 'toenail', 'toenails', 'toes', 'toffee', 'toffees', 'toffies', 'toffy', 'tofu', 'tog', 'toga', 'togae', 'togas', 'together', 'toggle', 'toggled', 'toggles', 'toggling', 'togo', 'togs', 'toil', 'toiled', 'toiler', 'toilers', 'toilet', 'toileted', 'toileting', 'toiletry', 'toilets', 'toilette', 'toiling', 'toils', 'toilsome', 'tojo', 'tokay', 'toke', 'toked', 'token', 'tokenism', 'tokens', 'tokes', 'toking', 'tokugawa', 'tokyo', 'told', 'toledo', 'toledos', 'tolerable', 'tolerably', 'tolerance', 'tolerant', 'tolerate', 'tolerated', 'tolerates', 'tolkien', 'toll', 'tollbooth', 'tolled', 'tollgate', 'tollgates', 'tolling', 'tolls', 'tolstoy', 'toltec', 'tolyatti', 'tom', 'tomahawk', 'tomahawks', 'tomas', 'tomato', 'tomatoes', 'tomb', 'tombaugh', 'tombed', 'tombing', 'tomboy', 'tomboys', 'tombs', 'tombstone', 'tomcat', 'tomcats', 'tome', 'tomes', 'tomlin', 'tommie', 'tommy', 'tomorrow', 'tomorrows', 'tompkins', 'toms', 'tomsk', 'ton', 'tonal', 'tonality', 'tone', 'toned', 'toneless', 'toner', 'tones', 'tong', 'tonga', 'tongan', 'tongans', 'tongs', 'tongue', 'tongued', 'tongues', 'tonguing', 'toni', 'tonia', 'tonic', 'tonics', 'tonier', 'toniest', 'tonight', 'toning', 'tonnage', 'tonnages', 'tonne', 'tonnes', 'tons', 'tonsil', 'tonsils', 'tonsorial', 'tonsure', 'tonsured', 'tonsures', 'tonsuring', 'tonto', 'tony', 'tonya', 'too', 'took', 'tool', 'toolbar', 'toolbars', 'toolbox', 'toolboxes', 'tooled', 'tooling', 'toolkit', 'tools', 'toot', 'tooted', 'tooth', 'toothache', 'toothed', 'toothier', 'toothiest', 'toothless', 'toothpick', 'toothsome', 'toothy', 'tooting', 'toots', 'top', 'topaz', 'topazes', 'topcoat', 'topcoats', 'topeka', 'topic', 'topical', 'topically', 'topics', 'topknot', 'topknots', 'topless', 'topmast', 'topmasts', 'topmost', 'topology', 'topped', 'topping', 'toppings', 'topple', 'toppled', 'topples', 'toppling', 'tops', 'topsail', 'topsails', 'topside', 'topsides', 'topsoil', 'topsy', 'toque', 'toques', 'tor', 'torah', 'torahs', 'torch', 'torched', 'torches', 'torching', 'tore', 'toreador', 'toreadors', 'tories', 'torment', 'tormented', 'tormenter', 'tormentor', 'torments', 'torn', 'tornado', 'tornadoes', 'tornados', 'toronto', 'torpedo', 'torpedoed', 'torpedoes', 'torpedos', 'torpid', 'torpidity', 'torpor', 'torque', 'torqued', 'torques', 'torquing', 'torrance', 'torrens', 'torrent', 'torrents', 'torres', 'torrid', 'tors', 'torsi', 'torsion', 'torso', 'torsos', 'tort', 'torte', 'tortes', 'tortilla', 'tortillas', 'tortoise', 'tortoises', 'tortola', 'torts', 'tortuga', 'tortuous', 'torture', 'tortured', 'torturer', 'torturers', 'tortures', 'torturing', 'torus', 'torvalds', 'tory', 'tosca', 'toscanini', 'toshiba', 'toss', 'tossed', 'tosses', 'tossing', 'tossup', 'tossups', 'tost', 'tot', 'total', 'totaled', 'totaling', 'totality', 'totalled', 'totalling', 'totally', 'totals', 'tote', 'toted', 'totem', 'totemic', 'totems', 'totes', 'toting', 'toto', 'tots', 'totted', 'totter', 'tottered', 'tottering', 'totters', 'totting', 'toucan', 'toucans', 'touch', 'touchdown', 'touched', 'touches', 'touchier', 'touchiest', 'touching', 'touchings', 'touchy', 'tough', 'toughen', 'toughened', 'toughens', 'tougher', 'toughest', 'toughly', 'toughness', 'toughs', 'toulouse', 'toupee', 'toupees', 'tour', 'toured', 'touring', 'tourism', 'tourist', 'tourists', 'tourney', 'tourneys', 'tours', 'tousle', 'tousled', 'tousles', 'tousling', 'tout', 'touted', 'touting', 'touts', 'tow', 'toward', 'towards', 'towed', 'towel', 'toweled', 'toweling', 'towelings', 'towelled', 'towelling', 'towels', 'tower', 'towered', 'towering', 'towers', 'towhead', 'towheaded', 'towheads', 'towing', 'town', 'townes', 'townhouse', 'towns', 'townsend', 'townsfolk', 'township', 'townships', 'townsman', 'townsmen', 'towpath', 'towpaths', 'tows', 'toxemia', 'toxic', 'toxicity', 'toxin', 'toxins', 'toy', 'toyed', 'toying', 'toynbee', 'toyoda', 'toyota', 'toys', 'trace', 'traceable', 'traced', 'tracer', 'traceries', 'tracers', 'tracery', 'traces', 'tracey', 'trachea', 'tracheae', 'tracheas', 'traci', 'tracie', 'tracing', 'tracings', 'track', 'tracked', 'tracker', 'trackers', 'tracking', 'tracks', 'tract', 'tractable', 'traction', 'tractor', 'tractors', 'tracts', 'tracy', 'trade', 'traded', 'trademark', 'trader', 'traders', 'trades', 'tradesman', 'tradesmen', 'trading', 'tradition', 'traduce', 'traduced', 'traduces', 'traducing', 'trafalgar', 'traffic', 'traffics', 'tragedian', 'tragedies', 'tragedy', 'tragic', 'trail', 'trailed', 'trailer', 'trailers', 'trailing', 'trails', 'trailways', 'train', 'trained', 'trainee', 'trainees', 'trainer', 'trainers', 'training', 'trains', 'traipse', 'traipsed', 'traipses', 'traipsing', 'trait', 'traitor', 'traitors', 'traits', 'trajan', 'tram', 'trammed', 'trammel', 'trammeled', 'trammels', 'tramming', 'tramp', 'tramped', 'tramping', 'trample', 'trampled', 'tramples', 'trampling', 'tramps', 'trams', 'tran', 'trance', 'trances', 'tranquil', 'transact', 'transacts', 'transcend', 'transept', 'transepts', 'transfer', 'transfers', 'transfix', 'transfixt', 'transform', 'transfuse', 'transit', 'transited', 'transits', 'translate', 'transmit', 'transmits', 'transmute', 'transom', 'transoms', 'transpire', 'transport', 'transpose', 'transship', 'transvaal', 'trap', 'trapdoor', 'trapdoors', 'trapeze', 'trapezes', 'trapezoid', 'trappable', 'trapped', 'trapper', 'trappers', 'trapping', 'trappings', 'trappist', 'traps', 'trash', 'trashcan', 'trashcans', 'trashed', 'trashes', 'trashier', 'trashiest', 'trashing', 'trashy', 'trauma', 'traumas', 'traumata', 'traumatic', 'travail', 'travailed', 'travails', 'travel', 'traveled', 'traveler', 'travelers', 'traveling', 'travelled', 'traveller', 'travelog', 'travelogs', 'travels', 'traverse', 'traversed', 'traverses', 'travesty', 'travis', 'travolta', 'trawl', 'trawled', 'trawler', 'trawlers', 'trawling', 'trawls', 'tray', 'trays', 'treachery', 'treacle', 'tread', 'treading', 'treadle', 'treadled', 'treadles', 'treadling', 'treadmill', 'treads', 'treason', 'treasure', 'treasured', 'treasurer', 'treasures', 'treasury', 'treat', 'treatable', 'treated', 'treaties', 'treating', 'treatise', 'treatises', 'treatment', 'treats', 'treaty', 'treble', 'trebled', 'trebles', 'trebling', 'treblinka', 'tree', 'treed', 'treeing', 'treeless', 'trees', 'treetop', 'treetops', 'trefoil', 'trefoils', 'trek', 'trekked', 'trekkie', 'trekking', 'treks', 'trellis', 'trellised', 'trellises', 'tremble', 'trembled', 'trembles', 'trembling', 'tremolo', 'tremolos', 'tremor', 'tremors', 'tremulous', 'trench', 'trenchant', 'trenched', 'trenches', 'trenching', 'trend', 'trended', 'trendier', 'trendies', 'trendiest', 'trending', 'trends', 'trendy', 'trent', 'trenton', 'trespass', 'tress', 'tresses', 'trestle', 'trestles', 'trevelyan', 'trevino', 'trevor', 'trey', 'triad', 'triads', 'triage', 'trial', 'trialed', 'trialing', 'trials', 'triangle', 'triangles', 'triassic', 'triathlon', 'tribal', 'tribalism', 'tribe', 'tribes', 'tribesman', 'tribesmen', 'tribunal', 'tribunals', 'tribune', 'tribunes', 'tributary', 'tribute', 'tributes', 'trice', 'triceps', 'tricepses', 'tricia', 'trick', 'tricked', 'trickery', 'trickier', 'trickiest', 'tricking', 'trickle', 'trickled', 'trickles', 'trickling', 'tricks', 'trickster', 'tricky', 'tricolor', 'tricolors', 'tricycle', 'tricycles', 'trident', 'tridents', 'tried', 'triennial', 'tries', 'trieste', 'trifecta', 'trifectas', 'trifle', 'trifled', 'trifler', 'triflers', 'trifles', 'trifling', 'trifocals', 'trig', 'trigger', 'triggered', 'triggers', 'trike', 'trikes', 'trill', 'trilled', 'trilling', 'trillion', 'trillions', 'trills', 'trilogies', 'trilogy', 'trim', 'trimaran', 'trimarans', 'trimester', 'trimly', 'trimmed', 'trimmer', 'trimmers', 'trimmest', 'trimming', 'trimmings', 'trimness', 'trims', 'trimurti', 'trina', 'trinidad', 'trinities', 'trinity', 'trinket', 'trinkets', 'trio', 'trios', 'trip', 'tripe', 'tripitaka', 'triple', 'tripled', 'triples', 'triplet', 'triplets', 'tripling', 'triply', 'tripod', 'tripods', 'tripoli', 'tripos', 'trippe', 'tripped', 'tripping', 'trips', 'triptych', 'triptychs', 'trisect', 'trisected', 'trisects', 'trisha', 'tristan', 'trite', 'tritely', 'triteness', 'triter', 'tritest', 'triton', 'triumph', 'triumphal', 'triumphed', 'triumphs', 'trivet', 'trivets', 'trivia', 'trivial', 'trivially', 'trobriand', 'trochee', 'trochees', 'trod', 'trodden', 'troika', 'troikas', 'troilus', 'trojan', 'trojans', 'troll', 'trolled', 'trolley', 'trolleys', 'trollies', 'trolling', 'trollop', 'trollope', 'trollops', 'trolls', 'trolly', 'trombone', 'trombones', 'tromp', 'tromped', 'tromping', 'tromps', 'trondheim', 'troop', 'trooped', 'trooper', 'troopers', 'trooping', 'troops', 'troopship', 'trope', 'tropes', 'trophies', 'trophy', 'tropic', 'tropical', 'tropicana', 'tropics', 'tropism', 'tropisms', 'trot', 'troth', 'trots', 'trotsky', 'trotted', 'trotter', 'trotters', 'trotting', 'trouble', 'troubled', 'troubles', 'troubling', 'trough', 'troughs', 'trounce', 'trounced', 'trounces', 'trouncing', 'troupe', 'trouped', 'trouper', 'troupers', 'troupes', 'trouping', 'trouser', 'trousers', 'trousseau', 'trout', 'trouts', 'trowel', 'troweled', 'troweling', 'trowelled', 'trowels', 'troy', 'troyes', 'troys', 'truancy', 'truant', 'truanted', 'truanting', 'truants', 'truce', 'truces', 'truck', 'trucked', 'truckee', 'trucker', 'truckers', 'trucking', 'truckle', 'truckled', 'truckles', 'truckling', 'truckload', 'trucks', 'truculent', 'trudeau', 'trudge', 'trudged', 'trudges', 'trudging', 'trudy', 'trued', 'trueing', 'truer', 'trues', 'truest', 'truffaut', 'truffle', 'truffles', 'truing', 'truism', 'truisms', 'trujillo', 'truly', 'truman', 'trumbull', 'trump', 'trumped', 'trumpery', 'trumpet', 'trumpeted', 'trumpeter', 'trumpets', 'trumping', 'trumps', 'truncate', 'truncated', 'truncates', 'truncheon', 'trundle', 'trundled', 'trundles', 'trundling', 'trunk', 'trunking', 'trunks', 'truss', 'trussed', 'trusses', 'trussing', 'trust', 'trusted', 'trustee', 'trustees', 'trustful', 'trustier', 'trusties', 'trustiest', 'trusting', 'trusts', 'trusty', 'truth', 'truther', 'truthers', 'truthful', 'truths', 'trying', 'tryout', 'tryouts', 'tryst', 'trysted', 'trysting', 'trysts', 'tsar', 'tsarina', 'tsarinas', 'tsars', 'tsimshian', 'tsingtao', 'tsitsihar', 'tsunami', 'tsunamis', 'tswana', 'tuamotu', 'tuareg', 'tub', 'tuba', 'tubas', 'tubbier', 'tubbiest', 'tubby', 'tube', 'tubed', 'tubeless', 'tuber', 'tubercle', 'tubercles', 'tuberous', 'tubers', 'tubes', 'tubing', 'tubman', 'tubs', 'tubular', 'tuck', 'tucked', 'tucker', 'tuckered', 'tuckering', 'tuckers', 'tucking', 'tucks', 'tucson', 'tucuman', 'tudor', 'tuesday', 'tuesdays', 'tuft', 'tufted', 'tufting', 'tufts', 'tug', 'tugboat', 'tugboats', 'tugged', 'tugging', 'tugs', 'tuition', 'tulane', 'tulip', 'tulips', 'tull', 'tulle', 'tulsa', 'tulsidas', 'tumble', 'tumbled', 'tumbler', 'tumblers', 'tumbles', 'tumbling', 'tumbrel', 'tumbrels', 'tumbril', 'tumbrils', 'tumid', 'tummies', 'tummy', 'tumor', 'tumors', 'tums', 'tumult', 'tumults', 'tun', 'tuna', 'tunas', 'tundra', 'tundras', 'tune', 'tuned', 'tuneful', 'tunefully', 'tuneless', 'tuner', 'tuners', 'tunes', 'tungsten', 'tungus', 'tunguska', 'tunic', 'tunics', 'tuning', 'tunis', 'tunisia', 'tunisian', 'tunisians', 'tunnel', 'tunneled', 'tunneling', 'tunnelled', 'tunnels', 'tunney', 'tunnies', 'tunny', 'tuns', 'tupi', 'tupungato', 'turban', 'turbans', 'turbid', 'turbine', 'turbines', 'turbojet', 'turbojets', 'turboprop', 'turbot', 'turbots', 'turbulent', 'turd', 'turds', 'turducken', 'tureen', 'tureens', 'turf', 'turfed', 'turfing', 'turfs', 'turgenev', 'turgid', 'turgidity', 'turgidly', 'turin', 'turing', 'turk', 'turkestan', 'turkey', 'turkeys', 'turkish', 'turks', 'turmeric', 'turmerics', 'turmoil', 'turmoils', 'turn', 'turnabout', 'turncoat', 'turncoats', 'turned', 'turner', 'turners', 'turning', 'turnip', 'turnips', 'turnkey', 'turnkeys', 'turnoff', 'turnoffs', 'turnout', 'turnouts', 'turnover', 'turnovers', 'turnpike', 'turnpikes', 'turns', 'turnstile', 'turntable', 'turpin', 'turpitude', 'turquoise', 'turret', 'turrets', 'turtle', 'turtles', 'turves', 'tuscan', 'tuscany', 'tuscarora', 'tuscon', 'tush', 'tushes', 'tusk', 'tusked', 'tuskegee', 'tusks', 'tussaud', 'tussle', 'tussled', 'tussles', 'tussling', 'tussock', 'tussocks', 'tut', 'tutelage', 'tutor', 'tutored', 'tutorial', 'tutorials', 'tutoring', 'tutors', 'tutsi', 'tutu', 'tutus', 'tuvalu', 'tux', 'tuxedo', 'tuxedoes', 'tuxedos', 'tuxes', 'twa', 'twaddle', 'twaddled', 'twaddles', 'twaddling', 'twain', 'twang', 'twanged', 'twanging', 'twangs', 'tweak', 'tweaked', 'tweaking', 'tweaks', 'twee', 'tweed', 'tweedier', 'tweediest', 'tweeds', 'tweedy', 'tweet', 'tweeted', 'tweeter', 'tweeters', 'tweeting', 'tweets', 'tweezers', 'twelfth', 'twelfths', 'twelve', 'twelves', 'twenties', 'twentieth', 'twenty', 'twerk', 'twerked', 'twerking', 'twerks', 'twerp', 'twerps', 'twice', 'twiddle', 'twiddled', 'twiddles', 'twiddling', 'twig', 'twigged', 'twiggier', 'twiggiest', 'twigging', 'twiggy', 'twigs', 'twila', 'twilight', 'twill', 'twilled', 'twin', 'twine', 'twined', 'twines', 'twinge', 'twinged', 'twingeing', 'twinges', 'twinging', 'twining', 'twinkies', 'twinkle', 'twinkled', 'twinkles', 'twinkling', 'twinned', 'twinning', 'twins', 'twirl', 'twirled', 'twirler', 'twirlers', 'twirling', 'twirls', 'twist', 'twisted', 'twister', 'twisters', 'twisting', 'twists', 'twit', 'twitch', 'twitched', 'twitches', 'twitching', 'twits', 'twitted', 'twitter', 'twittered', 'twitters', 'twitting', 'twizzlers', 'two', 'twofer', 'twofers', 'twofold', 'twos', 'twosome', 'twosomes', 'tycho', 'tycoon', 'tycoons', 'tying', 'tyke', 'tykes', 'tylenol', 'tyler', 'tympana', 'tympanum', 'tympanums', 'tyndale', 'tyndall', 'type', 'typecast', 'typecasts', 'typed', 'typeface', 'typefaces', 'types', 'typeset', 'typesets', 'typewrite', 'typewrote', 'typhoid', 'typhoon', 'typhoons', 'typhus', 'typical', 'typically', 'typified', 'typifies', 'typify', 'typifying', 'typing', 'typist', 'typists', 'typo', 'typos', 'tyrannies', 'tyrannize', 'tyrannous', 'tyranny', 'tyrant', 'tyrants', 'tyre', 'tyree', 'tyro', 'tyroes', 'tyrone', 'tyros', 'tyson', 'tzar', 'tzarina', 'tzarinas', 'tzars', 'ubangi', 'ubiquity', 'ubs', 'ubuntu', 'ucayali', 'uccello', 'ucla', 'udall', 'udder', 'udders', 'ufa', 'uganda', 'ugandan', 'ugandans', 'ugh', 'uglier', 'ugliest', 'ugliness', 'ugly', 'uighur', 'ukelele', 'ukeleles', 'ukraine', 'ukrainian', 'ukulele', 'ukuleles', 'ulcer', 'ulcerate', 'ulcerated', 'ulcerates', 'ulcerous', 'ulcers', 'ulna', 'ulnae', 'ulnas', 'ulster', 'ulterior', 'ultimata', 'ultimate', 'ultimatum', 'ultra', 'ultras', 'ululate', 'ululated', 'ululates', 'ululating', 'ulyanovsk', 'ulysses', 'umbel', 'umbels', 'umber', 'umbilical', 'umbilici', 'umbilicus', 'umbrage', 'umbrella', 'umbrellas', 'umbriel', 'umiak', 'umiaks', 'umlaut', 'umlauts', 'ump', 'umped', 'umping', 'umpire', 'umpired', 'umpires', 'umpiring', 'umps', 'umpteen', 'umpteenth', 'unabashed', 'unabated', 'unable', 'unadorned', 'unadvised', 'unafraid', 'unaided', 'unaltered', 'unanimity', 'unanimous', 'unarmed', 'unashamed', 'unasked', 'unaware', 'unawares', 'unbar', 'unbarred', 'unbarring', 'unbars', 'unbeaten', 'unbeknown', 'unbelief', 'unbend', 'unbending', 'unbends', 'unbent', 'unbiased', 'unbiassed', 'unbidden', 'unbind', 'unbinding', 'unbinds', 'unblock', 'unblocked', 'unblocks', 'unbolt', 'unbolted', 'unbolting', 'unbolts', 'unborn', 'unbosom', 'unbosomed', 'unbosoms', 'unbound', 'unbounded', 'unbranded', 'unbridled', 'unbroken', 'unbuckle', 'unbuckled', 'unbuckles', 'unburden', 'unburdens', 'unbutton', 'unbuttons', 'uncalled', 'uncannier', 'uncannily', 'uncanny', 'uncaring', 'uncased', 'unceasing', 'uncertain', 'unchanged', 'uncharted', 'unchecked', 'uncivil', 'unclaimed', 'unclasp', 'unclasped', 'unclasps', 'uncle', 'unclean', 'uncleaner', 'uncleanly', 'unclear', 'unclearer', 'uncles', 'unclothe', 'unclothed', 'unclothes', 'uncoil', 'uncoiled', 'uncoiling', 'uncoils', 'uncommon', 'unconcern', 'uncooked', 'uncork', 'uncorked', 'uncorking', 'uncorks', 'uncounted', 'uncouple', 'uncoupled', 'uncouples', 'uncouth', 'uncover', 'uncovered', 'uncovers', 'unction', 'unctions', 'unctuous', 'uncut', 'undamaged', 'undated', 'undaunted', 'undeceive', 'undecided', 'undefined', 'under', 'underact', 'underacts', 'underage', 'underarm', 'underarms', 'underbid', 'underbids', 'undercoat', 'undercut', 'undercuts', 'underdog', 'underdogs', 'underdone', 'underfed', 'underfeed', 'underflow', 'underfoot', 'undergo', 'undergoes', 'undergone', 'undergrad', 'underhand', 'underlain', 'underlay', 'underlays', 'underlie', 'underlies', 'underline', 'underling', 'undermine', 'undermost', 'underpaid', 'underpass', 'underpay', 'underpays', 'underpin', 'underpins', 'underplay', 'underrate', 'undersea', 'undersell', 'undershot', 'underside', 'undersign', 'undersize', 'undersold', 'undertake', 'undertone', 'undertook', 'undertow', 'undertows', 'underused', 'underwear', 'underwent', 'underwood', 'undid', 'undies', 'undiluted', 'undivided', 'undo', 'undoes', 'undoing', 'undoings', 'undone', 'undoubted', 'undress', 'undressed', 'undresses', 'undue', 'undulant', 'undulate', 'undulated', 'undulates', 'unduly', 'undying', 'unearned', 'unearth', 'unearthed', 'unearthly', 'unearths', 'unease', 'uneasier', 'uneasiest', 'uneasily', 'uneasy', 'uneaten', 'unedited', 'unending', 'unequal', 'unequaled', 'unequally', 'unerring', 'unethical', 'uneven', 'unevenly', 'unfailing', 'unfair', 'unfairer', 'unfairest', 'unfairly', 'unfasten', 'unfastens', 'unfeeling', 'unfeigned', 'unfetter', 'unfetters', 'unfilled', 'unfit', 'unfits', 'unfitted', 'unfitting', 'unfold', 'unfolded', 'unfolding', 'unfolds', 'unformed', 'unfounded', 'unfriend', 'unfriends', 'unfrock', 'unfrocked', 'unfrocks', 'unfunny', 'unfurl', 'unfurled', 'unfurling', 'unfurls', 'ungainly', 'ungava', 'ungodlier', 'ungodly', 'unguarded', 'unguent', 'unguents', 'ungulate', 'ungulates', 'unhand', 'unhanded', 'unhanding', 'unhands', 'unhappier', 'unhappily', 'unhappy', 'unharmed', 'unhealthy', 'unheard', 'unheeded', 'unhelpful', 'unhinge', 'unhinged', 'unhinges', 'unhinging', 'unhitch', 'unhitched', 'unhitches', 'unholier', 'unholiest', 'unholy', 'unhook', 'unhooked', 'unhooking', 'unhooks', 'unhorse', 'unhorsed', 'unhorses', 'unhorsing', 'unhurried', 'unhurt', 'unicode', 'unicorn', 'unicorns', 'unicycle', 'unicycles', 'unified', 'unifies', 'uniform', 'uniformed', 'uniformly', 'uniforms', 'unify', 'unifying', 'unilever', 'uninjured', 'uninstall', 'uninsured', 'uninvited', 'union', 'unionize', 'unionized', 'unionizes', 'unions', 'unique', 'uniquely', 'uniquer', 'uniquest', 'uniroyal', 'unisex', 'unison', 'unitarian', 'unitary', 'unitas', 'unite', 'united', 'unites', 'unities', 'uniting', 'units', 'unity', 'universal', 'universe', 'universes', 'unjust', 'unjustly', 'unkempt', 'unkind', 'unkinder', 'unkindest', 'unkindly', 'unknowing', 'unknown', 'unknowns', 'unlabeled', 'unlace', 'unlaced', 'unlaces', 'unlacing', 'unlatch', 'unlatched', 'unlatches', 'unlawful', 'unleaded', 'unlearn', 'unlearned', 'unlearns', 'unleash', 'unleashed', 'unleashes', 'unless', 'unlike', 'unlikely', 'unlimited', 'unlisted', 'unload', 'unloaded', 'unloading', 'unloads', 'unlock', 'unlocked', 'unlocking', 'unlocks', 'unloose', 'unloosed', 'unlooses', 'unloosing', 'unloved', 'unluckier', 'unluckily', 'unlucky', 'unmade', 'unmake', 'unmakes', 'unmaking', 'unman', 'unmanlier', 'unmanly', 'unmanned', 'unmanning', 'unmans', 'unmarked', 'unmarried', 'unmask', 'unmasked', 'unmasking', 'unmasks', 'unmatched', 'unmindful', 'unmissed', 'unmoral', 'unmoved', 'unnamed', 'unnatural', 'unneeded', 'unnerve', 'unnerved', 'unnerves', 'unnerving', 'unnoticed', 'unopened', 'unopposed', 'unpack', 'unpacked', 'unpacking', 'unpacks', 'unpaid', 'unpainted', 'unpaved', 'unpick', 'unpin', 'unpinned', 'unpinning', 'unpins', 'unplanned', 'unplug', 'unplugged', 'unplugs', 'unplumbed', 'unpopular', 'unproved', 'unproven', 'unquote', 'unquoted', 'unquotes', 'unquoting', 'unravel', 'unraveled', 'unravels', 'unread', 'unready', 'unreal', 'unrefined', 'unrelated', 'unrest', 'unripe', 'unriper', 'unripest', 'unrivaled', 'unroll', 'unrolled', 'unrolling', 'unrolls', 'unruffled', 'unrulier', 'unruliest', 'unruly', 'unsaddle', 'unsaddled', 'unsaddles', 'unsafe', 'unsafer', 'unsafest', 'unsaid', 'unsalted', 'unsavory', 'unsay', 'unsaying', 'unsays', 'unscathed', 'unscrew', 'unscrewed', 'unscrews', 'unseal', 'unsealed', 'unsealing', 'unseals', 'unseat', 'unseated', 'unseating', 'unseats', 'unseeing', 'unseemly', 'unseen', 'unselfish', 'unsent', 'unset', 'unsettle', 'unsettled', 'unsettles', 'unshaven', 'unsheathe', 'unsightly', 'unsigned', 'unskilled', 'unsmiling', 'unsnap', 'unsnapped', 'unsnaps', 'unsnarl', 'unsnarled', 'unsnarls', 'unsold', 'unsolved', 'unsound', 'unsounder', 'unsparing', 'unspoiled', 'unspoilt', 'unspoken', 'unstable', 'unstated', 'unsteady', 'unstop', 'unstopped', 'unstops', 'unstrung', 'unstuck', 'unstudied', 'unsubtle', 'unsuited', 'unsung', 'unsure', 'untainted', 'untamed', 'untangle', 'untangled', 'untangles', 'untapped', 'untaught', 'untenable', 'untested', 'untidier', 'untidiest', 'untidy', 'untie', 'untied', 'unties', 'until', 'untimely', 'untiring', 'untitled', 'unto', 'untold', 'untouched', 'untoward', 'untrained', 'untreated', 'untried', 'untrue', 'untruer', 'untruest', 'untruth', 'untruths', 'untutored', 'untwist', 'untwisted', 'untwists', 'untying', 'unukalhai', 'unusable', 'unused', 'unusual', 'unusually', 'unvarying', 'unveil', 'unveiled', 'unveiling', 'unveils', 'unvoiced', 'unwanted', 'unwarier', 'unwariest', 'unwary', 'unwashed', 'unwed', 'unwelcome', 'unwell', 'unwieldy', 'unwilling', 'unwind', 'unwinding', 'unwinds', 'unwise', 'unwisely', 'unwiser', 'unwisest', 'unwitting', 'unwonted', 'unworldly', 'unworthy', 'unwound', 'unwrap', 'unwrapped', 'unwraps', 'unwritten', 'unzip', 'unzipped', 'unzipping', 'unzips', 'upbeat', 'upbeats', 'upbraid', 'upbraided', 'upbraids', 'upchuck', 'upchucked', 'upchucks', 'upcoming', 'upcountry', 'update', 'updated', 'updater', 'updates', 'updating', 'updike', 'updraft', 'updrafts', 'upend', 'upended', 'upending', 'upends', 'upfront', 'upgrade', 'upgraded', 'upgrades', 'upgrading', 'upheaval', 'upheavals', 'upheld', 'uphill', 'uphills', 'uphold', 'upholding', 'upholds', 'upholster', 'upjohn', 'upkeep', 'upland', 'uplands', 'uplift', 'uplifted', 'uplifting', 'uplifts', 'upload', 'upmarket', 'upon', 'upped', 'upper', 'uppercase', 'uppercut', 'uppercuts', 'uppermost', 'uppers', 'upping', 'uppity', 'upraise', 'upraised', 'upraises', 'upraising', 'upright', 'uprights', 'uprising', 'uprisings', 'uproar', 'uproars', 'uproot', 'uprooted', 'uprooting', 'uproots', 'ups', 'upscale', 'upset', 'upsets', 'upsetting', 'upshot', 'upshots', 'upside', 'upsides', 'upstage', 'upstaged', 'upstages', 'upstaging', 'upstairs', 'upstart', 'upstarted', 'upstarts', 'upstate', 'upstream', 'upsurge', 'upsurged', 'upsurges', 'upsurging', 'upswing', 'upswings', 'uptake', 'uptakes', 'uptight', 'upton', 'uptown', 'upturn', 'upturned', 'upturning', 'upturns', 'upward', 'upwardly', 'upwards', 'ural', 'urals', 'urania', 'uranium', 'uranus', 'urban', 'urbane', 'urbaner', 'urbanest', 'urbanity', 'urbanize', 'urbanized', 'urbanizes', 'urchin', 'urchins', 'urdu', 'urea', 'urethra', 'urethrae', 'urethras', 'urey', 'urge', 'urged', 'urgency', 'urgent', 'urgently', 'urges', 'urging', 'uriah', 'uric', 'uriel', 'urinal', 'urinals', 'urinary', 'urinate', 'urinated', 'urinates', 'urinating', 'urination', 'urine', 'uris', 'urn', 'urns', 'urologist', 'urology', 'urquhart', 'ursa', 'ursula', 'ursuline', 'uruguay', 'uruguayan', 'urumqi', 'usability', 'usable', 'usage', 'usages', 'use', 'useable', 'used', 'useful', 'usefully', 'useless', 'uselessly', 'usenet', 'user', 'username', 'usernames', 'users', 'uses', 'usher', 'ushered', 'usherette', 'ushering', 'ushers', 'using', 'ustinov', 'usual', 'usually', 'usurer', 'usurers', 'usurious', 'usurp', 'usurped', 'usurper', 'usurpers', 'usurping', 'usurps', 'usury', 'utah', 'ute', 'utensil', 'utensils', 'uteri', 'uterine', 'uterus', 'uteruses', 'utilities', 'utility', 'utilize', 'utilized', 'utilizes', 'utilizing', 'utmost', 'utopia', 'utopian', 'utopians', 'utopias', 'utrecht', 'utrillo', 'utter', 'utterance', 'uttered', 'uttering', 'utterly', 'uttermost', 'utters', 'uvula', 'uvulae', 'uvular', 'uvulars', 'uvulas', 'uzbek', 'uzi', 'vacancies', 'vacancy', 'vacant', 'vacantly', 'vacate', 'vacated', 'vacates', 'vacating', 'vacation', 'vacations', 'vaccinate', 'vaccine', 'vaccines', 'vacillate', 'vacua', 'vacuity', 'vacuous', 'vacuously', 'vacuum', 'vacuumed', 'vacuuming', 'vacuums', 'vader', 'vaduz', 'vagabond', 'vagabonds', 'vagaries', 'vagary', 'vagina', 'vaginae', 'vaginal', 'vagrancy', 'vagrant', 'vagrants', 'vague', 'vaguely', 'vagueness', 'vaguer', 'vaguest', 'vain', 'vainer', 'vainest', 'vainglory', 'vainly', 'valance', 'valances', 'valarie', 'valdez', 'vale', 'valence', 'valences', 'valencia', 'valenti', 'valentin', 'valentine', 'valentino', 'valeria', 'valerian', 'valerie', 'vales', 'valet', 'valeted', 'valeting', 'valets', 'valhalla', 'valiant', 'valiantly', 'valid', 'validate', 'validated', 'validates', 'validity', 'validly', 'validness', 'valise', 'valises', 'valium', 'valiums', 'valkyrie', 'valkyries', 'valletta', 'valley', 'valleys', 'valois', 'valor', 'valorous', 'valuable', 'valuables', 'valuation', 'value', 'valued', 'valueless', 'values', 'valuing', 'valve', 'valved', 'valves', 'valving', 'valvoline', 'vamoose', 'vamoosed', 'vamooses', 'vamoosing', 'vamp', 'vamped', 'vamping', 'vampire', 'vampires', 'vamps', 'van', 'vanadium', 'vance', 'vancouver', 'vandal', 'vandalism', 'vandalize', 'vandals', 'vandyke', 'vane', 'vanes', 'vanessa', 'vang', 'vanguard', 'vanguards', 'vanilla', 'vanillas', 'vanish', 'vanished', 'vanishes', 'vanishing', 'vanities', 'vanity', 'vanned', 'vanning', 'vanquish', 'vans', 'vantage', 'vantages', 'vanuatu', 'vanzetti', 'vape', 'vaped', 'vapes', 'vapid', 'vapidity', 'vapidness', 'vaping', 'vapor', 'vaporize', 'vaporized', 'vaporizer', 'vaporizes', 'vaporous', 'vapors', 'varanasi', 'varese', 'vargas', 'variable', 'variables', 'variably', 'variance', 'variances', 'variant', 'variants', 'variate', 'variation', 'varicose', 'varied', 'variegate', 'varies', 'varieties', 'variety', 'various', 'variously', 'varlet', 'varlets', 'varmint', 'varmints', 'varnish', 'varnished', 'varnishes', 'varsities', 'varsity', 'vary', 'varying', 'vascular', 'vase', 'vasectomy', 'vaseline', 'vaselines', 'vases', 'vasquez', 'vassal', 'vassalage', 'vassals', 'vassar', 'vast', 'vaster', 'vastest', 'vastly', 'vastness', 'vasts', 'vat', 'vatican', 'vats', 'vatted', 'vatting', 'vauban', 'vaughan', 'vaughn', 'vault', 'vaulted', 'vaulter', 'vaulters', 'vaulting', 'vaults', 'vaunt', 'vaunted', 'vaunting', 'vaunts', 'vazquez', 'veal', 'veblen', 'vector', 'vectored', 'vectoring', 'vectors', 'veda', 'vedanta', 'vedas', 'veep', 'veeps', 'veer', 'veered', 'veering', 'veers', 'vega', 'vegan', 'vegans', 'vegas', 'vegemite', 'vegetable', 'vegetate', 'vegetated', 'vegetates', 'veggie', 'veggies', 'vehemence', 'vehement', 'vehicle', 'vehicles', 'vehicular', 'veil', 'veiled', 'veiling', 'veils', 'vein', 'veined', 'veining', 'veins', 'vela', 'velcro', 'velcros', 'veld', 'velds', 'veldt', 'veldts', 'velez', 'vellum', 'velma', 'velocity', 'velour', 'velours', 'velveeta', 'velvet', 'velveteen', 'velvety', 'venal', 'venality', 'venally', 'vend', 'vended', 'vender', 'venders', 'vendetta', 'vendettas', 'vending', 'vendor', 'vendors', 'vends', 'veneer', 'veneered', 'veneering', 'veneers', 'venerable', 'venerate', 'venerated', 'venerates', 'venereal', 'venetian', 'venetians', 'venezuela', 'vengeance', 'vengeful', 'venial', 'venice', 'venison', 'venn', 'venom', 'venomous', 'venous', 'vent', 'vented', 'ventilate', 'venting', 'ventolin', 'ventral', 'ventricle', 'vents', 'venture', 'ventured', 'ventures', 'venturing', 'venturous', 'venue', 'venues', 'venus', 'venuses', 'venusian', 'vera', 'veracious', 'veracity', 'veracruz', 'veranda', 'verandah', 'verandahs', 'verandas', 'verb', 'verbal', 'verbalize', 'verbally', 'verbals', 'verbatim', 'verbena', 'verbenas', 'verbiage', 'verbose', 'verbosity', 'verbs', 'verdant', 'verde', 'verdi', 'verdict', 'verdicts', 'verdigris', 'verdun', 'verdure', 'verge', 'verged', 'verges', 'vergil', 'verging', 'verier', 'veriest', 'verified', 'verifies', 'verify', 'verifying', 'verily', 'veritable', 'veritably', 'verities', 'verity', 'verizon', 'verlaine', 'vermeer', 'vermilion', 'vermin', 'verminous', 'vermont', 'vermonter', 'vermouth', 'vern', 'verna', 'vernal', 'verne', 'vernon', 'verona', 'veronese', 'veronica', 'versatile', 'verse', 'versed', 'verses', 'versified', 'versifies', 'versify', 'versing', 'version', 'versions', 'versus', 'vertebra', 'vertebrae', 'vertebral', 'vertebras', 'vertex', 'vertexes', 'vertical', 'verticals', 'vertices', 'vertigo', 'verve', 'very', 'vesalius', 'vesicle', 'vesicles', 'vespasian', 'vesper', 'vespers', 'vespucci', 'vessel', 'vessels', 'vest', 'vesta', 'vested', 'vestibule', 'vestige', 'vestiges', 'vestigial', 'vesting', 'vestment', 'vestments', 'vestries', 'vestry', 'vests', 'vesuvius', 'vet', 'vetch', 'vetches', 'veteran', 'veterans', 'veto', 'vetoed', 'vetoes', 'vetoing', 'vets', 'vetted', 'vetting', 'vex', 'vexation', 'vexations', 'vexatious', 'vexed', 'vexes', 'vexing', 'via', 'viability', 'viable', 'viacom', 'viaduct', 'viaducts', 'viagra', 'vial', 'vials', 'viand', 'viands', 'vibe', 'vibes', 'vibrancy', 'vibrant', 'vibrantly', 'vibrate', 'vibrated', 'vibrates', 'vibrating', 'vibration', 'vibrato', 'vibrator', 'vibrators', 'vibratos', 'viburnum', 'viburnums', 'vicar', 'vicarage', 'vicarages', 'vicarious', 'vicars', 'vice', 'viced', 'vicente', 'viceroy', 'viceroys', 'vices', 'vichy', 'vicing', 'vicinity', 'vicious', 'viciously', 'vicki', 'vickie', 'vicksburg', 'vicky', 'victim', 'victimize', 'victims', 'victor', 'victoria', 'victorian', 'victories', 'victors', 'victory', 'victrola', 'victual', 'victualed', 'victuals', 'vidal', 'video', 'videodisc', 'videos', 'videotape', 'vie', 'vied', 'vienna', 'viennese', 'vientiane', 'vies', 'vietcong', 'vietminh', 'vietnam', 'view', 'viewed', 'viewer', 'viewers', 'viewing', 'viewings', 'viewpoint', 'views', 'vigil', 'vigilance', 'vigilant', 'vigilante', 'vigils', 'vignette', 'vignetted', 'vignettes', 'vigor', 'vigorous', 'viking', 'vikings', 'vila', 'vile', 'vilely', 'vileness', 'viler', 'vilest', 'vilified', 'vilifies', 'vilify', 'vilifying', 'villa', 'village', 'villager', 'villagers', 'villages', 'villain', 'villains', 'villainy', 'villas', 'villein', 'villeins', 'villon', 'vilma', 'vilnius', 'vilyui', 'vim', 'vince', 'vincent', 'vindicate', 'vine', 'vinegar', 'vinegary', 'vines', 'vineyard', 'vineyards', 'vinson', 'vintage', 'vintages', 'vintner', 'vintners', 'vinyl', 'vinyls', 'viol', 'viola', 'violable', 'violas', 'violate', 'violated', 'violates', 'violating', 'violation', 'violator', 'violators', 'violence', 'violent', 'violently', 'violet', 'violets', 'violin', 'violinist', 'violins', 'violist', 'violists', 'viols', 'viper', 'vipers', 'virago', 'viragoes', 'viragos', 'viral', 'vireo', 'vireos', 'virgie', 'virgil', 'virgin', 'virginal', 'virginals', 'virginia', 'virginian', 'virginity', 'virgins', 'virgo', 'virgos', 'virgule', 'virgules', 'virile', 'virility', 'virology', 'virtual', 'virtually', 'virtue', 'virtues', 'virtuosi', 'virtuoso', 'virtuosos', 'virtuous', 'virulence', 'virulent', 'virus', 'viruses', 'visa', 'visaed', 'visage', 'visages', 'visaing', 'visas', 'visayans', 'viscera', 'visceral', 'viscid', 'viscosity', 'viscount', 'viscounts', 'viscous', 'viscus', 'vise', 'vised', 'vises', 'vishnu', 'visible', 'visibly', 'visigoth', 'vising', 'vision', 'visionary', 'visioned', 'visioning', 'visions', 'visit', 'visited', 'visiting', 'visitor', 'visitors', 'visits', 'visor', 'visors', 'vista', 'vistas', 'vistula', 'visual', 'visualize', 'visually', 'visuals', 'vital', 'vitality', 'vitalize', 'vitalized', 'vitalizes', 'vitally', 'vitals', 'vitamin', 'vitamins', 'vitiate', 'vitiated', 'vitiates', 'vitiating', 'vitiation', 'vitim', 'vito', 'vitreous', 'vitriol', 'vitriolic', 'vitus', 'viva', 'vivace', 'vivacious', 'vivacity', 'vivaldi', 'vivas', 'vivian', 'vivid', 'vivider', 'vividest', 'vividly', 'vividness', 'vivienne', 'vivified', 'vivifies', 'vivify', 'vivifying', 'vixen', 'vixenish', 'vixens', 'vizier', 'viziers', 'vizor', 'vizors', 'vlad', 'vladimir', 'vlaminck', 'vlasic', 'vocal', 'vocalic', 'vocalist', 'vocalists', 'vocalize', 'vocalized', 'vocalizes', 'vocally', 'vocals', 'vocation', 'vocations', 'vocative', 'vocatives', 'vodka', 'vogue', 'vogues', 'voguish', 'voice', 'voiced', 'voiceless', 'voicemail', 'voices', 'voicing', 'voided', 'voiding', 'voids', 'voile', 'voip', 'volcanic', 'volcano', 'volcanoes', 'volcanos', 'volcker', 'voldemort', 'vole', 'voles', 'volga', 'volgograd', 'volition', 'volley', 'volleyed', 'volleying', 'volleys', 'volstead', 'volt', 'volta', 'voltage', 'voltages', 'voltaic', 'voltaire', 'voltmeter', 'volts', 'voluble', 'volubly', 'volume', 'volumes', 'voluntary', 'volunteer', 'volvo', 'vomit', 'vomited', 'vomiting', 'vomits', 'vonda', 'vonnegut', 'voodoo', 'voodooed', 'voodooing', 'voodooism', 'voodoos', 'voracious', 'voracity', 'voronezh', 'vorster', 'vortex', 'vortexes', 'vortices', 'votaries', 'votary', 'vote', 'voted', 'voter', 'voters', 'votes', 'voting', 'votive', 'vouch', 'vouched', 'voucher', 'vouchers', 'vouches', 'vouching', 'vouchsafe', 'vow', 'vowed', 'vowel', 'vowels', 'vowing', 'vows', 'voyage', 'voyaged', 'voyager', 'voyagers', 'voyages', 'voyaging', 'voyeur', 'voyeurism', 'voyeurs', 'vuitton', 'vulcan', 'vulcanize', 'vulgar', 'vulgarer', 'vulgarest', 'vulgarism', 'vulgarity', 'vulgarize', 'vulgarly', 'vulgate', 'vulgates', 'vulture', 'vultures', 'vulva', 'vulvae', 'vulvas', 'vuvuzela', 'vuvuzelas', 'vying', 'wabash', 'wack', 'wacker', 'wackest', 'wackier', 'wackiest', 'wackiness', 'wacko', 'wackos', 'wacks', 'wacky', 'waco', 'wad', 'wadded', 'wadding', 'waddle', 'waddled', 'waddles', 'waddling', 'wade', 'waded', 'wader', 'waders', 'wades', 'wadi', 'wading', 'wadis', 'wads', 'wafer', 'wafers', 'waffle', 'waffled', 'waffles', 'waffling', 'waft', 'wafted', 'wafting', 'wafts', 'wag', 'wage', 'waged', 'wager', 'wagered', 'wagering', 'wagers', 'wages', 'wagged', 'wagging', 'waggish', 'waggle', 'waggled', 'waggles', 'waggling', 'waging', 'wagner', 'wagnerian', 'wagon', 'wagoner', 'wagoners', 'wagons', 'wags', 'wahhabi', 'waif', 'waifs', 'waikiki', 'wail', 'wailed', 'wailing', 'wails', 'wainscot', 'wainscots', 'waist', 'waistband', 'waistcoat', 'waistline', 'waists', 'waite', 'waited', 'waiter', 'waiters', 'waiting', 'waitress', 'waits', 'waive', 'waived', 'waiver', 'waivers', 'waives', 'waiving', 'wake', 'waked', 'wakeful', 'waken', 'wakened', 'wakening', 'wakens', 'wakes', 'waking', 'waksman', 'wald', 'waldemar', 'walden', 'waldheim', 'waldo', 'waldorf', 'wale', 'waled', 'wales', 'walesa', 'walgreen', 'waling', 'walk', 'walked', 'walker', 'walkers', 'walking', 'walkman', 'walkout', 'walkouts', 'walks', 'walkway', 'walkways', 'wall', 'wallabies', 'wallaby', 'wallace', 'wallboard', 'walled', 'waller', 'wallet', 'wallets', 'walleye', 'walleyed', 'walleyes', 'walling', 'wallis', 'walloon', 'wallop', 'walloped', 'walloping', 'wallops', 'wallow', 'wallowed', 'wallowing', 'wallows', 'wallpaper', 'walls', 'walmart', 'walnut', 'walnuts', 'walpole', 'walrus', 'walruses', 'walsh', 'walt', 'walter', 'walters', 'walton', 'waltz', 'waltzed', 'waltzes', 'waltzing', 'wampum', 'wan', 'wanamaker', 'wand', 'wanda', 'wander', 'wandered', 'wanderer', 'wanderers', 'wandering', 'wanders', 'wands', 'wane', 'waned', 'wanes', 'wang', 'wangle', 'wangled', 'wangles', 'wangling', 'waning', 'wankel', 'wanly', 'wanna', 'wannabe', 'wannabes', 'wanner', 'wannest', 'want', 'wanted', 'wanting', 'wanton', 'wantoned', 'wantoning', 'wantonly', 'wantons', 'wants', 'wapiti', 'wapitis', 'war', 'warble', 'warbled', 'warbler', 'warblers', 'warbles', 'warbling', 'ward', 'warded', 'warden', 'wardens', 'warder', 'warders', 'warding', 'wardrobe', 'wardrobes', 'wardroom', 'wardrooms', 'wards', 'ware', 'warehouse', 'wares', 'warfare', 'warhead', 'warheads', 'warhol', 'warhorse', 'warhorses', 'warier', 'wariest', 'warily', 'wariness', 'waring', 'warlike', 'warlock', 'warlocks', 'warlord', 'warlords', 'warm', 'warmed', 'warmer', 'warmers', 'warmest', 'warming', 'warmly', 'warmonger', 'warms', 'warmth', 'warn', 'warned', 'warner', 'warning', 'warnings', 'warns', 'warp', 'warpath', 'warpaths', 'warped', 'warping', 'warps', 'warrant', 'warranted', 'warrants', 'warranty', 'warred', 'warren', 'warrens', 'warring', 'warrior', 'warriors', 'wars', 'warsaw', 'warship', 'warships', 'wart', 'warthog', 'warthogs', 'wartier', 'wartiest', 'wartime', 'warts', 'warty', 'warwick', 'wary', 'was', 'wasatch', 'wash', 'washable', 'washables', 'washbasin', 'washboard', 'washbowl', 'washbowls', 'washcloth', 'washed', 'washer', 'washers', 'washes', 'washing', 'washings', 'washout', 'washouts', 'washroom', 'washrooms', 'washstand', 'washtub', 'washtubs', 'wasp', 'waspish', 'wasps', 'wassail', 'wassailed', 'wassails', 'wastage', 'waste', 'wasted', 'wasteful', 'wasteland', 'waster', 'wasters', 'wastes', 'wasting', 'wastrel', 'wastrels', 'watch', 'watchband', 'watchdog', 'watchdogs', 'watched', 'watcher', 'watchers', 'watches', 'watchful', 'watching', 'watchman', 'watchmen', 'watchword', 'water', 'waterbed', 'waterbeds', 'waterbury', 'watered', 'waterfall', 'waterford', 'waterfowl', 'watergate', 'waterier', 'wateriest', 'watering', 'waterline', 'waterloo', 'waterloos', 'watermark', 'waters', 'watershed', 'waterside', 'waterway', 'waterways', 'watery', 'watkins', 'watson', 'watt', 'wattage', 'watteau', 'wattle', 'wattled', 'wattles', 'wattling', 'watts', 'watusi', 'waugh', 'wave', 'waved', 'waveform', 'wavelet', 'wavelets', 'waver', 'wavered', 'wavering', 'wavers', 'waves', 'wavier', 'waviest', 'waviness', 'waving', 'wavy', 'wax', 'waxed', 'waxen', 'waxes', 'waxier', 'waxiest', 'waxiness', 'waxing', 'waxwing', 'waxwings', 'waxwork', 'waxworks', 'waxy', 'way', 'wayfarer', 'wayfarers', 'wayfaring', 'waylaid', 'waylay', 'waylaying', 'waylays', 'wayne', 'ways', 'wayside', 'waysides', 'wayward', 'waywardly', 'weak', 'weaken', 'weakened', 'weakening', 'weakens', 'weaker', 'weakest', 'weakfish', 'weakling', 'weaklings', 'weakly', 'weakness', 'weal', 'weals', 'wealth', 'wealthier', 'wealthy', 'wean', 'weaned', 'weaning', 'weans', 'weapon', 'weaponry', 'weapons', 'wear', 'wearable', 'wearer', 'wearers', 'wearied', 'wearier', 'wearies', 'weariest', 'wearily', 'weariness', 'wearing', 'wearisome', 'wears', 'weary', 'wearying', 'weasel', 'weaseled', 'weaseling', 'weasels', 'weather', 'weathered', 'weathers', 'weave', 'weaved', 'weaver', 'weavers', 'weaves', 'weaving', 'web', 'webb', 'webbed', 'webbing', 'webcam', 'webcams', 'webcast', 'webcasts', 'weber', 'webern', 'webinar', 'webinars', 'webisode', 'webisodes', 'webmaster', 'webs', 'website', 'websites', 'webster', 'websters', 'wed', 'wedded', 'weddell', 'wedder', 'wedding', 'weddings', 'wedge', 'wedged', 'wedges', 'wedging', 'wedgwood', 'wedlock', 'wednesday', 'weds', 'wee', 'weed', 'weeded', 'weeder', 'weeders', 'weedier', 'weediest', 'weeding', 'weeds', 'weedy', 'weeing', 'week', 'weekday', 'weekdays', 'weekend', 'weekended', 'weekends', 'weeklies', 'weekly', 'weeknight', 'weeks', 'weep', 'weeper', 'weepers', 'weepier', 'weepies', 'weepiest', 'weeping', 'weepings', 'weeps', 'weepy', 'weer', 'wees', 'weest', 'weevil', 'weevils', 'weft', 'wefts', 'wehrmacht', 'wei', 'weigh', 'weighed', 'weighing', 'weighs', 'weight', 'weighted', 'weightier', 'weighting', 'weights', 'weighty', 'weill', 'weinberg', 'weir', 'weird', 'weirder', 'weirdest', 'weirdly', 'weirdness', 'weirdo', 'weirdos', 'weirs', 'weiss', 'weizmann', 'welch', 'welched', 'welches', 'welching', 'welcome', 'welcomed', 'welcomes', 'welcoming', 'weld', 'welded', 'welder', 'welders', 'welding', 'weldon', 'welds', 'welfare', 'welkin', 'well', 'welland', 'welled', 'weller', 'welles', 'welling', 'wells', 'welsh', 'welshed', 'welshes', 'welshing', 'welshman', 'welshmen', 'welt', 'welted', 'welter', 'weltered', 'weltering', 'welters', 'welting', 'welts', 'wen', 'wench', 'wenches', 'wend', 'wended', 'wendell', 'wendi', 'wending', 'wends', 'wendy', 'wens', 'went', 'wept', 'were', 'werewolf', 'wesak', 'wesley', 'wesleyan', 'wessex', 'wesson', 'west', 'westbound', 'westerly', 'western', 'westerner', 'westerns', 'weston', 'wests', 'westward', 'westwards', 'wet', 'wetback', 'wetbacks', 'wetland', 'wetlands', 'wetly', 'wetness', 'wets', 'wetted', 'wetter', 'wettest', 'wetting', 'weyden', 'wezen', 'whack', 'whacked', 'whackier', 'whackiest', 'whacking', 'whacks', 'whacky', 'whale', 'whalebone', 'whaled', 'whaler', 'whalers', 'whales', 'whaling', 'wham', 'whammed', 'whammies', 'whamming', 'whammy', 'whams', 'wharf', 'wharfs', 'wharton', 'wharves', 'what', 'whatever', 'whatnot', 'whats', 'wheal', 'wheals', 'wheat', 'wheaten', 'wheaties', 'wheedle', 'wheedled', 'wheedles', 'wheedling', 'wheel', 'wheelbase', 'wheeled', 'wheeler', 'wheeling', 'wheels', 'wheeze', 'wheezed', 'wheezes', 'wheezier', 'wheeziest', 'wheezing', 'wheezy', 'whelk', 'whelked', 'whelks', 'whelp', 'whelped', 'whelping', 'whelps', 'whence', 'whenever', 'whens', 'whereas', 'whereat', 'whereby', 'wherefore', 'wherein', 'whereof', 'whereon', 'wheres', 'whereupon', 'wherever', 'whet', 'whether', 'whets', 'whetstone', 'whetted', 'whetting', 'whew', 'whey', 'which', 'whichever', 'whiff', 'whiffed', 'whiffing', 'whiffs', 'whig', 'whigs', 'whiled', 'whiles', 'whiling', 'whilst', 'whim', 'whimper', 'whimpered', 'whimpers', 'whims', 'whimsey', 'whimseys', 'whimsical', 'whimsies', 'whimsy', 'whine', 'whined', 'whiner', 'whiners', 'whines', 'whinier', 'whiniest', 'whining', 'whinnied', 'whinnies', 'whinny', 'whinnying', 'whiny', 'whip', 'whipcord', 'whiplash', 'whipped', 'whippet', 'whippets', 'whipping', 'whippings', 'whipple', 'whips', 'whir', 'whirl', 'whirled', 'whirligig', 'whirling', 'whirlpool', 'whirls', 'whirlwind', 'whirr', 'whirred', 'whirring', 'whirrs', 'whirs', 'whisk', 'whisked', 'whisker', 'whiskered', 'whiskers', 'whiskey', 'whiskeys', 'whiskies', 'whisking', 'whisks', 'whisky', 'whiskys', 'whisper', 'whispered', 'whispers', 'whist', 'whistle', 'whistled', 'whistler', 'whistlers', 'whistles', 'whistling', 'whit', 'whitaker', 'white', 'whitecap', 'whitecaps', 'whitefish', 'whitehall', 'whitehead', 'whiteley', 'whiten', 'whitened', 'whitener', 'whiteners', 'whiteness', 'whitening', 'whitens', 'whiter', 'whites', 'whitest', 'whitewall', 'whitewash', 'whitfield', 'whither', 'whiting', 'whitings', 'whitish', 'whitley', 'whitman', 'whitney', 'whits', 'whittier', 'whittle', 'whittled', 'whittler', 'whittlers', 'whittles', 'whittling', 'whiz', 'whizz', 'whizzed', 'whizzes', 'whizzing', 'who', 'whoa', 'whodunit', 'whodunits', 'whodunnit', 'whoever', 'whole', 'wholeness', 'wholes', 'wholesale', 'wholesome', 'wholly', 'whom', 'whomever', 'whoop', 'whooped', 'whoopee', 'whoopees', 'whooping', 'whoops', 'whoosh', 'whooshed', 'whooshes', 'whooshing', 'whopper', 'whoppers', 'whopping', 'whore', 'whores', 'whorl', 'whorled', 'whorls', 'whose', 'whosoever', 'why', 'whys', 'wicca', 'wichita', 'wick', 'wicked', 'wickeder', 'wickedest', 'wickedly', 'wicker', 'wickers', 'wicket', 'wickets', 'wicks', 'wide', 'widely', 'widen', 'widened', 'wideness', 'widening', 'widens', 'wider', 'widest', 'widgeon', 'widgeons', 'widow', 'widowed', 'widower', 'widowers', 'widowhood', 'widowing', 'widows', 'width', 'widths', 'wield', 'wielded', 'wielding', 'wields', 'wiemar', 'wiener', 'wieners', 'wiesel', 'wife', 'wifely', 'wifi', 'wig', 'wigeon', 'wigeons', 'wigged', 'wigging', 'wiggins', 'wiggle', 'wiggled', 'wiggler', 'wigglers', 'wiggles', 'wigglier', 'wiggliest', 'wiggling', 'wiggly', 'wight', 'wights', 'wigner', 'wigs', 'wigwag', 'wigwagged', 'wigwags', 'wigwam', 'wigwams', 'wii', 'wiki', 'wikileaks', 'wikipedia', 'wikis', 'wilbert', 'wilbur', 'wilburn', 'wilcox', 'wild', 'wilda', 'wildcat', 'wildcats', 'wilde', 'wilder', 'wildest', 'wildfire', 'wildfires', 'wildfowl', 'wildfowls', 'wildlife', 'wildly', 'wildness', 'wilds', 'wile', 'wiled', 'wiles', 'wiley', 'wilford', 'wilfred', 'wilfredo', 'wilful', 'wilfully', 'wilhelm', 'wilier', 'wiliest', 'wiliness', 'wiling', 'wilkerson', 'wilkes', 'wilkins', 'wilkinson', 'will', 'willa', 'willard', 'willed', 'willful', 'willfully', 'william', 'williams', 'willie', 'willies', 'willing', 'willingly', 'willis', 'willow', 'willows', 'willowy', 'willpower', 'wills', 'willy', 'wilma', 'wilmer', 'wilson', 'wilsonian', 'wilt', 'wilted', 'wilting', 'wilton', 'wilts', 'wily', 'wimbledon', 'wimp', 'wimpier', 'wimpiest', 'wimple', 'wimpled', 'wimples', 'wimpling', 'wimps', 'wimpy', 'wimsey', 'win', 'wince', 'winced', 'winces', 'winch', 'winched', 'winchell', 'winches', 'winching', 'wincing', 'wind', 'windbag', 'windbags', 'windbreak', 'windburn', 'winded', 'windex', 'windfall', 'windfalls', 'windhoek', 'windier', 'windiest', 'windiness', 'winding', 'windlass', 'windmill', 'windmills', 'window', 'windowed', 'windowing', 'windows', 'windpipe', 'windpipes', 'winds', 'windsock', 'windsocks', 'windsor', 'windsors', 'windstorm', 'windsurf', 'windsurfs', 'windswept', 'windup', 'windups', 'windward', 'windy', 'wine', 'wined', 'wineglass', 'wineries', 'winery', 'wines', 'winesap', 'winfred', 'winfrey', 'wing', 'winged', 'winger', 'wingers', 'winging', 'wingless', 'wingnut', 'wingnuts', 'wings', 'wingspan', 'wingspans', 'wingtip', 'wingtips', 'winifred', 'wining', 'wink', 'winked', 'winking', 'winkle', 'winks', 'winnebago', 'winner', 'winners', 'winnie', 'winning', 'winnings', 'winnipeg', 'winnow', 'winnowed', 'winnowing', 'winnows', 'wino', 'winos', 'wins', 'winsome', 'winsomely', 'winsomer', 'winsomest', 'winston', 'winter', 'wintered', 'winterier', 'wintering', 'winterize', 'winters', 'wintery', 'winthrop', 'wintrier', 'wintriest', 'wintry', 'wipe', 'wiped', 'wiper', 'wipers', 'wipes', 'wiping', 'wire', 'wired', 'wireless', 'wires', 'wiretap', 'wiretaps', 'wirier', 'wiriest', 'wiriness', 'wiring', 'wiry', 'wisconsin', 'wisdom', 'wise', 'wiseacre', 'wiseacres', 'wisecrack', 'wisely', 'wiser', 'wises', 'wisest', 'wish', 'wishbone', 'wishbones', 'wished', 'wisher', 'wishers', 'wishes', 'wishful', 'wishfully', 'wishing', 'wisp', 'wispier', 'wispiest', 'wisps', 'wispy', 'wist', 'wistaria', 'wistarias', 'wisteria', 'wisterias', 'wistful', 'wistfully', 'wit', 'witch', 'witched', 'witchery', 'witches', 'witching', 'withal', 'withdraw', 'withdrawn', 'withdraws', 'withdrew', 'wither', 'withered', 'withering', 'withers', 'withheld', 'withhold', 'withholds', 'within', 'without', 'withstand', 'withstood', 'witless', 'witlessly', 'witness', 'witnessed', 'witnesses', 'wits', 'witt', 'witticism', 'wittier', 'wittiest', 'wittily', 'wittiness', 'witting', 'wittingly', 'witty', 'wive', 'wives', 'wiz', 'wizard', 'wizardry', 'wizards', 'wizened', 'wizes', 'wizzes', 'wobble', 'wobbled', 'wobbles', 'wobblier', 'wobbliest', 'wobbling', 'wobbly', 'wobegon', 'wodehouse', 'woe', 'woebegone', 'woeful', 'woefuller', 'woefully', 'woes', 'wok', 'woke', 'woken', 'woks', 'wolf', 'wolfe', 'wolfed', 'wolff', 'wolfgang', 'wolfhound', 'wolfing', 'wolfish', 'wolfram', 'wolfs', 'wolsey', 'wolverine', 'wolves', 'woman', 'womanhood', 'womanish', 'womanize', 'womanized', 'womanizer', 'womanizes', 'womankind', 'womanlier', 'womanlike', 'womanly', 'womb', 'wombat', 'wombats', 'wombs', 'women', 'womenfolk', 'won', 'wonder', 'wonderbra', 'wondered', 'wonderful', 'wondering', 'wonders', 'wondrous', 'wong', 'wont', 'wonted', 'woo', 'wood', 'woodard', 'woodbine', 'woodchuck', 'woodcock', 'woodcocks', 'woodcraft', 'woodcut', 'woodcuts', 'wooded', 'wooden', 'woodener', 'woodenest', 'woodenly', 'woodhull', 'woodier', 'woodies', 'woodiest', 'woodiness', 'wooding', 'woodland', 'woodlands', 'woodman', 'woodmen', 'woodpile', 'woodpiles', 'woodrow', 'woods', 'woodshed', 'woodsheds', 'woodsier', 'woodsiest', 'woodsman', 'woodsmen', 'woodstock', 'woodsy', 'woodward', 'woodwind', 'woodwinds', 'woodwork', 'woodworm', 'woody', 'wooed', 'wooer', 'wooers', 'woof', 'woofed', 'woofer', 'woofers', 'woofing', 'woofs', 'wooing', 'wool', 'woolen', 'woolens', 'woolf', 'woolie', 'woolier', 'woolies', 'wooliest', 'woolite', 'woollier', 'woollies', 'woolliest', 'woolly', 'woolworth', 'wooly', 'woos', 'wooster', 'wooten', 'woozier', 'wooziest', 'wooziness', 'woozy', 'worcester', 'word', 'worded', 'wordier', 'wordiest', 'wordiness', 'wording', 'wordings', 'wordplay', 'words', 'wordy', 'wore', 'work', 'workable', 'workaday', 'workbench', 'workbook', 'workbooks', 'workday', 'workdays', 'worked', 'worker', 'workers', 'workfare', 'workflow', 'workflows', 'workforce', 'workhorse', 'workhouse', 'working', 'workings', 'workload', 'workloads', 'workman', 'workmen', 'workout', 'workouts', 'workplace', 'works', 'worksheet', 'workshop', 'workshops', 'workweek', 'workweeks', 'world', 'worldlier', 'worldly', 'worlds', 'worldwide', 'worm', 'wormed', 'wormhole', 'wormholes', 'wormier', 'wormiest', 'worming', 'worms', 'wormwood', 'wormy', 'worn', 'worried', 'worrier', 'worriers', 'worries', 'worrisome', 'worry', 'worrying', 'worryings', 'worrywart', 'worse', 'worsen', 'worsened', 'worsening', 'worsens', 'worship', 'worshiped', 'worshiper', 'worships', 'worst', 'worsted', 'worsting', 'worsts', 'worth', 'worthier', 'worthies', 'worthiest', 'worthily', 'worthless', 'worthy', 'wot', 'wotan', 'would', 'woulds', 'wound', 'wounded', 'wounder', 'wounding', 'wounds', 'wove', 'woven', 'wovoka', 'wow', 'wowed', 'wowing', 'wows', 'wozniak', 'wozzeck', 'wrack', 'wraith', 'wraiths', 'wrangell', 'wrangle', 'wrangled', 'wrangler', 'wranglers', 'wrangles', 'wrangling', 'wrap', 'wrapped', 'wrapper', 'wrappers', 'wrapping', 'wrappings', 'wraps', 'wrapt', 'wrath', 'wrathful', 'wreak', 'wreaked', 'wreaking', 'wreaks', 'wreath', 'wreathe', 'wreathed', 'wreathes', 'wreathing', 'wreaths', 'wreck', 'wreckage', 'wrecked', 'wrecker', 'wreckers', 'wrecking', 'wrecks', 'wren', 'wrench', 'wrenched', 'wrenches', 'wrenching', 'wrens', 'wrest', 'wrested', 'wresting', 'wrestle', 'wrestled', 'wrestler', 'wrestlers', 'wrestles', 'wrestling', 'wrests', 'wretch', 'wretched', 'wretches', 'wrier', 'wriest', 'wriggle', 'wriggled', 'wriggler', 'wrigglers', 'wriggles', 'wriggling', 'wriggly', 'wright', 'wrigley', 'wring', 'wringer', 'wringers', 'wringing', 'wrings', 'wrinkle', 'wrinkled', 'wrinkles', 'wrinklier', 'wrinklies', 'wrinkling', 'wrinkly', 'wrist', 'wristband', 'wrists', 'writ', 'writable', 'write', 'writer', 'writers', 'writes', 'writhe', 'writhed', 'writhes', 'writhing', 'writing', 'writings', 'writs', 'written', 'wroclaw', 'wrong', 'wrongdoer', 'wronged', 'wronger', 'wrongest', 'wrongful', 'wronging', 'wrongly', 'wrongness', 'wrongs', 'wrote', 'wroth', 'wrought', 'wrung', 'wry', 'wryer', 'wryest', 'wryly', 'wryness', 'wuhan', 'wurlitzer', 'wuss', 'wusses', 'wyatt', 'wycherley', 'wycliffe', 'wyeth', 'wylie', 'wynn', 'wyoming', 'xanadu', 'xanthippe', 'xavier', 'xemacs', 'xenakis', 'xenia', 'xenon', 'xenophon', 'xerox', 'xeroxes', 'xerxes', 'xhosa', 'xiaoping', 'ximenes', 'xingu', 'xiongnu', 'xmas', 'xmases', 'xuzhou', 'xylem', 'xylophone', 'yacc', 'yacht', 'yachted', 'yachting', 'yachts', 'yachtsman', 'yachtsmen', 'yack', 'yacked', 'yacking', 'yacks', 'yahoo', 'yahoos', 'yahtzee', 'yahweh', 'yak', 'yakima', 'yakked', 'yakking', 'yaks', 'yakut', 'yakutsk', 'yale', 'yalow', 'yalta', 'yalu', 'yam', 'yamagata', 'yamaha', 'yammer', 'yammered', 'yammering', 'yammers', 'yams', 'yang', 'yangon', 'yangtze', 'yank', 'yanked', 'yankee', 'yankees', 'yanking', 'yanks', 'yaobang', 'yaounde', 'yap', 'yapped', 'yapping', 'yaps', 'yaqui', 'yard', 'yardage', 'yardages', 'yardarm', 'yardarms', 'yards', 'yardstick', 'yarmulke', 'yarmulkes', 'yarn', 'yarns', 'yaroslavl', 'yataro', 'yates', 'yaw', 'yawed', 'yawing', 'yawl', 'yawls', 'yawn', 'yawned', 'yawning', 'yawns', 'yaws', 'yea', 'yeager', 'yeah', 'yeahs', 'year', 'yearbook', 'yearbooks', 'yearlies', 'yearling', 'yearlings', 'yearly', 'yearn', 'yearned', 'yearning', 'yearnings', 'yearns', 'years', 'yeas', 'yeast', 'yeastier', 'yeastiest', 'yeasts', 'yeasty', 'yeats', 'yell', 'yelled', 'yelling', 'yellow', 'yellowed', 'yellower', 'yellowest', 'yellowing', 'yellowish', 'yellows', 'yells', 'yelp', 'yelped', 'yelping', 'yelps', 'yeltsin', 'yemen', 'yemeni', 'yemenis', 'yen', 'yenisei', 'yens', 'yeoman', 'yeomen', 'yep', 'yeps', 'yerevan', 'yerkes', 'yes', 'yesenia', 'yeses', 'yeshiva', 'yeshivah', 'yeshivahs', 'yeshivas', 'yeshivot', 'yeshivoth', 'yessed', 'yessing', 'yest', 'yesterday', 'yet', 'yeti', 'yew', 'yews', 'yggdrasil', 'yiddish', 'yielded', 'yielding', 'yieldings', 'yields', 'yip', 'yipped', 'yippee', 'yipping', 'yips', 'ymir', 'yock', 'yocks', 'yoda', 'yodel', 'yodeled', 'yodeler', 'yodelers', 'yodeling', 'yodelled', 'yodeller', 'yodellers', 'yodelling', 'yodels', 'yoga', 'yoghourt', 'yoghourts', 'yoghurt', 'yoghurts', 'yogi', 'yogin', 'yogins', 'yogis', 'yogurt', 'yogurts', 'yoke', 'yoked', 'yokel', 'yokels', 'yokes', 'yoking', 'yoko', 'yokohama', 'yolanda', 'yolk', 'yolks', 'yon', 'yonder', 'yong', 'yonkers', 'yore', 'york', 'yorkie', 'yorkshire', 'yorktown', 'yoruba', 'yosemite', 'yossarian', 'you', 'young', 'younger', 'youngest', 'youngish', 'youngster', 'your', 'yours', 'yourself', 'yous', 'youth', 'youthful', 'youths', 'youtube', 'yowl', 'yowled', 'yowling', 'yowls', 'ypres', 'ypsilanti', 'yttrium', 'yuan', 'yucatan', 'yucca', 'yuccas', 'yuck', 'yucked', 'yuckier', 'yuckiest', 'yucking', 'yucks', 'yucky', 'yugoslav', 'yuk', 'yukked', 'yukking', 'yukon', 'yuks', 'yule', 'yules', 'yuletide', 'yuletides', 'yum', 'yummier', 'yummiest', 'yummy', 'yunnan', 'yup', 'yuppie', 'yuppies', 'yuppy', 'yups', 'yuri', 'yves', 'yvette', 'yvonne', 'zachariah', 'zachary', 'zachery', 'zagreb', 'zaire', 'zairian', 'zambezi', 'zambia', 'zambian', 'zambians', 'zamboni', 'zamenhof', 'zamora', 'zane', 'zanier', 'zanies', 'zaniest', 'zaniness', 'zanuck', 'zany', 'zanzibar', 'zap', 'zapata', 'zapotec', 'zappa', 'zapped', 'zapper', 'zappers', 'zapping', 'zaps', 'zara', 'zeal', 'zealand', 'zealot', 'zealots', 'zealous', 'zealously', 'zebedee', 'zebra', 'zebras', 'zebu', 'zebus', 'zechariah', 'zed', 'zedekiah', 'zedong', 'zeds', 'zeke', 'zelig', 'zelma', 'zen', 'zenger', 'zenith', 'zeniths', 'zeno', 'zens', 'zephaniah', 'zephyr', 'zephyrs', 'zephyrus', 'zeppelin', 'zeppelins', 'zero', 'zeroed', 'zeroes', 'zeroing', 'zeros', 'zest', 'zestful', 'zestfully', 'zests', 'zeta', 'zeus', 'zhengzhou', 'zhivago', 'zhukov', 'zibo', 'ziegfeld', 'ziegler', 'ziggy', 'zigzag', 'zigzagged', 'zigzags', 'zilch', 'zillion', 'zillions', 'zimbabwe', 'zimmerman', 'zinc', 'zinced', 'zincing', 'zincked', 'zincking', 'zincs', 'zinfandel', 'zing', 'zinged', 'zinger', 'zingers', 'zinging', 'zings', 'zinnia', 'zinnias', 'zion', 'zionism', 'zionisms', 'zionist', 'zionists', 'zions', 'zip', 'ziploc', 'zipped', 'zipper', 'zippered', 'zippering', 'zippers', 'zippier', 'zippiest', 'zipping', 'zippy', 'zips', 'zircon', 'zirconium', 'zircons', 'zit', 'zither', 'zithers', 'zits', 'zodiac', 'zodiacal', 'zodiacs', 'zoe', 'zola', 'zoloft', 'zomba', 'zombi', 'zombie', 'zombies', 'zombis', 'zonal', 'zone', 'zoned', 'zones', 'zoning', 'zonked', 'zoo', 'zoologist', 'zoology', 'zoom', 'zoomed', 'zooming', 'zooms', 'zoos', 'zorn', 'zoroaster', 'zorro', 'zosma', 'zsigmondy', 'zucchini', 'zucchinis', 'zukor', 'zulu', 'zulus', 'zuni', 'zwieback', 'zwingli', 'zworykin', 'zygote', 'zygotes', 'zyrtec', 'zyuganov'], 10000), kwargs - {}, result - ['pixel', 'inertly', 'lachesis', 'watchman', 'tells', 'suppliant', 'thrashes', 'wriest', 'lippi', 'whys', 'caverns', 'snappish', 'mitts', 'hairiest', 'librettos', 'endowing', 'imbroglio', 'kantian', 'liturgy', 'beverley', 'lockean', 'kenneling', 'duskiest', 'abruptest', 'honk', 'pounce', 'actresses', 'severance', 'ionizes', 'movie', 'gelatin', 'unstudied', 'colonizer', 'caddie', 'purpler', 'infers', 'puttying', 'snuffer', 'scouring', 'disclaims', 'dribbles', 'priceless', 'rucksack', 'highlands', 'nevada', 'apology', 'agitator', 'portends', 'waxen', 'world', 'engulfed', 'wingspans', 'damsels', 'lurching', 'snoopers', 'phenotype', 'whither', 'topazes', 'isosceles', 'exists', 'crucial', 'threes', 'jaded', 'halifax', 'cleverly', 'zanies', 'tangent', 'lounging', 'galls', 'tic', 'magical', 'riches', 'gurgled', 'earfuls', 'latches', 'barabbas', 'gleans', 'coast', 'rebuttals', 'sassy', 'clef', 'softens', 'pales', 'converse', 'bicep', 'parka', 'noodling', 'texts', 'lebanese', 'huffed', 'sidereal', 'deified', 'savagery', 'enfeebled', 'moribund', 'dignified', 'shaggier', 'sorcerers', 'graceful', 'merck', 'jawboned', 'upbraids', 'liar', 'dingy', 'birthing', 'tot', 'daydreams', 'uplift', 'angle', 'gavels', 'hazard', 'dissented', 'ref', 'perplexes', 'occlusive', 'workaday', 'heston', 'mutes', 'patently', 'swisher', 'afforests', 'crackpots', 'hilly', 'front', 'camshaft', 'alarm', 'hardbacks', 'valve', 'barracuda', 'inked', 'widowing', 'molted', 'snuffle', 'crooning', 'mansard', 'mutinies', 'colonial', 'decanters', 'gayly', 'battled', 'hegelian', 'inaugural', 'recoil', 'anathema', 'parabola', 'follower', 'advisors', 'affect', 'olives', 'pairwise', 'jonson', 'condition', 'ride', 'outlasts', 'gangling', 'tills', 'corn', 'fluoride', 'enforces', 'store', 'mythic', 'lifeboat', 'faintest', 'budges', 'snob', 'forehead', 'fetched', 'stick', 'piss', 'hobart', 'thutmose', 'plumps', 'tamed', 'beaker', 'platform', 'emanates', 'gillette', 'fancier', 'skied', 'beeped', 'creamed', 'yodeler', 'icebox', 'glamored', 'outermost', 'matrons', 'fangs', 'jabbing', 'eyesore', 'batsman', 'minus', 'laxly', 'ghanians', 'mexicans', 'freshness', 'compound', 'scramming', 'curies', 'haggle', 'crotches', 'checkered', 'inaction', 'hugo', 'monitors', 'tetons', 'newbie', 'roman', 'democrats', 'borneo', 'skews', 'crouched', 'congress', 'marvin', 'wharfs', 'nodoz', 'sentinels', 'scythes', 'hindus', 'ganglier', 'lassies', 'gleaned', 'isobars', 'logging', 'blimp', 'dolefully', 'musically', 'wallows', 'syllabify', 'spoonbill', 'annual', 'crosstown', 'dramas', 'verandas', 'climaxes', 'cowhands', 'pilafs', 'buffeting', 'impel', 'morally', 'browses', 'neolithic', 'seek', 'blanche', 'asparagus', 'schemer', 'leftmost', 'ensues', 'reined', 'idioms', 'aye', 'spyglass', 'spinning', 'blackouts', 'chaise', 'unvarying', 'underdog', 'epidermal', 'putties', 'baseman', 'parfaits', 'creosotes', 'slant', 'benetton', 'revelry', 'glide', 'bavarian', 'someday', 'unisex', 'suffolk', 'species', 'unstuck', 'beak', 'tollgate', 'hightail', 'olivia', 'profited', 'bullied', 'neutrino', 'patched', 'tantrum', 'lambkins', 'vandals', 'piggiest', 'molluscs', 'enrol', 'gawked', 'boxwood', 'virility', 'absinthe', 'avatar', 'rockers', 'toastiest', 'encircle', 'mischief', 'pirouette', 'bigamist', 'clannish', 'rewound', 'habitats', 'backwoods', 'briny', 'vowed', 'randomly', 'sleeker', 'tribal', 'avocados', 'catchment', 'swelter', 'remarking', 'recorder', 'reamed', 'tipsier', 'governors', 'catnapped', 'moodiness', 'sana', 'voiceless', 'plugins', 'harte', 'proudhon', 'budapest', 'rectories', 'kingston', 'inhale', 'bemuse', 'develops', 'impartial', 'kudos', 'caesarian', 'moneybags', 'bills', 'shallots', 'comfort', 'hatting', 'earliness', 'unabashed', 'farrowed', 'stargazer', 'adviser', 'similarly', 'ship', 'garner', 'inbox', 'caesarean', 'quibbles', 'colleens', 'manley', 'fussily', 'swines', 'docketing', 'ides', 'hedgerow', 'clarified', 'luggage', 'pollster', 'stations', 'leniency', 'plover', 'mohamed', 'emery', 'wesley', 'colombia', 'waxiest', 'get', 'cannons', 'tangier', 'chills', 'bungler', 'angry', 'drafty', 'sodded', 'funky', 'deft', 'petrifies', 'jumped', 'immensity', 'busier', 'centigram', 'hesperus', 'limping', 'honda', 'wand', 'splicer', 'mathewson', 'deliver', 'pedalling', 'finessed', 'igneous', 'unicycle', 'medulla', 'snaffling', 'emulsions', 'flecked', 'tasha', 'colorless', 'raggedest', 'mars', 'plushest', 'rattraps', 'prop', 'easygoing', 'descanted', 'decidedly', 'duds', 'overplays', 'prolong', 'jester', 'lochinvar', 'puke', 'soared', 'muenster', 'platypus', 'duane', 'scud', 'ciders', 'fizzing', 'limpidly', 'bestrides', 'goddesses', 'westwards', 'derogate', 'sunrise', 'roulette', 'contain', 'typos', 'impinged', 'aspirated', 'laius', 'impacted', 'sue', 'subsuming', 'forensic', 'modelings', 'cursive', 'leap', 'conan', 'knacker', 'transept', 'sunders', 'guttural', 'gehrig', 'teachers', 'bebop', 'crone', 'balling', 'pitiful', 'talent', 'entices', 'aside', 'squawk', 'lids', 'petite', 'floridly', 'tabby', 'boss', 'idler', 'flayed', 'mendeleev', 'gauche', 'alcoves', 'virgins', 'keg', 'modest', 'tropisms', 'paramours', 'ranger', 'affects', 'thermos', 'pollsters', 'renown', 'grumbled', 'leeching', 'shalt', 'danes', 'deming', 'saunaed', 'abridge', 'lessen', 'deforming', 'cozier', 'teammates', 'imminence', 'suffixing', 'scope', 'coveralls', 'chintzier', 'normality', 'sicker', 'opportune', 'trudges', 'parakeet', 'grumbler', 'madonnas', 'toughens', 'boasting', 'markdowns', 'hazards', 'sanger', 'torus', 'selection', 'sittings', 'vised', 'diamonds', 'seizures', 'rheingau', 'agrippina', 'wrings', 'penguin', 'charlie', 'scuds', 'squiring', 'violas', 'ponchos', 'yodel', 'zings', 'pastern', 'invert', 'abolished', 'christy', 'cleft', 'dioxide', 'chicks', 'morrows', 'quislings', 'harken', 'triathlon', 'peek', 'gilead', 'iceberg', 'golding', 'marsha', 'jogs', 'bless', 'pronghorn', 'coyest', 'basely', 'monoxide', 'relaxes', 'dangers', 'sachems', 'obstetric', 'cairo', 'gibbering', 'klutzier', 'heritage', 'rarer', 'neuters', 'sunfishes', 'bought', 'hominy', 'deforests', 'obstinate', 'teresa', 'haversack', 'sunlit', 'lactating', 'homers', 'defrays', 'wavier', 'algiers', 'stickpin', 'bikers', 'jaunting', 'marbles', 'paying', 'coals', 'master', 'plantings', 'soften', 'ranker', 'incising', 'anterior', 'repressed', 'brief', 'barista', 'gains', 'frugal', 'keynesian', 'gonzalo', 'sublimed', 'cowering', 'psalms', 'cheapness', 'reversion', 'mode', 'smudges', 'lamely', 'triggered', 'belgian', 'schedule', 'mauro', 'unzipping', 'plaque', 'defeated', 'rehabbed', 'susanna', 'cambering', 'murals', 'athletic', 'retarding', 'twiddle', 'dawns', 'danny', 'couched', 'vasquez', 'whew', 'vetting', 'windiest', 'tenure', 'jot', 'pluck', 'nurturing', 'heehawing', 'serena', 'strongbox', 'flows', 'contour', 'originals', 'exodus', 'adjunct', 'poking', 'robocalls', 'permalloy', 'widening', 'envelope', 'killer', 'repleted', 'wormy', 'suicides', 'cleric', 'servility', 'garibaldi', 'decalogue', 'melanie', 'pickups', 'chigger', 'bloggers', 'scorn', 'tits', 'echoing', 'dye', 'levies', 'sedulous', 'boarders', 'bursa', 'hunched', 'deluding', 'fazes', 'aught', 'debuggers', 'adler', 'misjudge', 'rescinded', 'leered', 'thankful', 'waldorf', 'diverse', 'coyote', 'scaling', 'cooped', 'orienting', 'weep', 'easter', 'bagpipes', 'jollying', 'donate', 'marches', 'hashish', 'nectar', 'rushdie', 'specifics', 'excrement', 'wretches', 'ickiest', 'terra', 'islanders', 'organdy', 'locket', 'civic', 'alighieri', 'bluntness', 'marshaled', 'greek', 'squirmy', 'lordlier', 'fotomat', 'landings', 'coursed', 'abrades', 'brutus', 'weeing', 'headwinds', 'lull', 'flowered', 'under', 'malady', 'lopes', 'threatens', 'hoe', 'seedless', 'coppola', 'bracket', 'observer', 'footsteps', 'cinnamon', 'embraced', 'attacker', 'suction', 'receipted', 'gas', 'snowman', 'pigheaded', 'jobber', 'torturer', 'colander', 'overrates', 'vise', 'evener', 'brasses', 'boxing', 'wigeon', 'robyn', 'remains', 'gladdens', 'batman', 'lefter', 'drooped', 'facially', 'wife', 'apses', 'jeff', 'abrogated', 'kiss', 'flapper', 'abrasion', 'ejects', 'roped', 'tuskegee', 'shacks', 'goofed', 'sulfured', 'nippy', 'scheme', 'perfumed', 'thatching', 'bunts', 'obtusest', 'citrons', 'valet', 'rename', 'clingier', 'hitler', 'equipage', 'malteds', 'intrusts', 'bullfrog', 'excusable', 'homebody', 'viva', 'quickly', 'eastman', 'choctaw', 'podding', 'former', 'alinement', 'cactuses', 'arabian', 'flukier', 'farewells', 'appeared', 'nadir', 'baggy', 'migratory', 'unilever', 'valorous', 'guides', 'survive', 'choosy', 'heyday', 'watching', 'burl', 'licorices', 'poles', 'naziism', 'provosts', 'critiqued', 'emailed', 'sissier', 'jokers', 'fuzhou', 'bordon', 'bigots', 'placebo', 'gargoyle', 'numeral', 'hose', 'inglewood', 'democrat', 'mendicant', 'mascaraed', 'obliges', 'sergio', 'vicksburg', 'violation', 'heartens', 'entering', 'defoe', 'sate', 'narcissus', 'coupling', 'values', 'seafarers', 'driving', 'hallowing', 'hatted', 'languages', 'location', 'units', 'quacking', 'watcher', 'victor', 'bribery', 'felling', 'untutored', 'wisterias', 'titan', 'mailmen', 'imitates', 'placid', 'drolly', 'biscayne', 'scowling', 'marlon', 'dewitt', 'blasphemy', 'nosedive', 'straws', 'squalls', 'diabolic', 'reacted', 'huffily', 'bedeck', 'iodize', 'pithiest', 'palettes', 'headphone', 'distort', 'internes', 'ilyushin', 'feel', 'ono', 'incurred', 'cigarets', 'sinkhole', 'rust', 'mischance', 'heftiest', 'walloon', 'minuted', 'ymir', 'underage', 'spears', 'maximal', 'superfund', 'overdo', 'omaha', 'blindside', 'bernadine', 'pennants', 'unstop', 'onset', 'rawboned', 'majored', 'lazarus', 'enhancer', 'elephants', 'hedging', 'taliesin', 'ado', 'marquis', 'mecca', 'urea', 'bailiff', 'paused', 'balky', 'pamphlets', 'roofed', 'expiry', 'liaising', 'pyrrhic', 'dionysian', 'fillips', 'multitude', 'crybaby', 'stanford', 'lansing', 'commit', 'achier', 'dario', 'cozened', 'clink', 'retail', 'embroils', 'shyest', 'anything', 'classic', 'instanced', 'microcosm', 'rakishly', 'yodelled', 'wands', 'perishing', 'outsider', 'synopses', 'gantries', 'demoted', 'sassier', 'milkiness', 'auk', 'staid', 'bellboy', 'foodstuff', 'promises', 'glows', 'appease', 'pipit', 'safeguard', 'joan', 'glassfuls', 'aliening', 'invention', 'mattes', 'croup', 'asimov', 'calyxes', 'emergency', 'sheridan', 'flyspeck', 'landmass', 'wieners', 'mellon', 'fuzes', 'igor', 'staffing', 'darryl', 'mayan', 'socratic', 'funny', 'theosophy', 'onegin', 'filmier', 'liquified', 'rooney', 'bohemians', 'sought', 'grander', 'roans', 'dings', 'untiring', 'careening', 'garnets', 'starlings', 'sage', 'taunted', 'tussles', 'shoot', 'fining', 'stunned', 'shouted', 'climactic', 'kampuchea', 'fruited', 'renumbers', 'inductee', 'riffling', 'conceal', 'boons', 'mameluke', 'akhmatova', 'holidays', 'arrant', 'deflates', 'onyx', 'popguns', 'broadcast', 'flex', 'villages', 'loewe', 'rafting', 'hosted', 'prepare', 'handcarts', 'slumdogs', 'jaundices', 'fashions', 'inuktitut', 'moire', 'penknife', 'trimmer', 'mcmahon', 'yields', 'befitted', 'allergic', 'wobbliest', 'virgule', 'frankly', 'abeam', 'reserve', 'shoals', 'emend', 'mussolini', 'romps', 'poplar', 'slices', 'cloture', 'irony', 'disbursed', 'reassert', 'pellets', 'avogadro', 'relocate', 'muumuus', 'urinates', 'eleventh', 'polling', 'revolting', 'golfers', 'laundered', 'evinced', 'vigilant', 'overshoot', 'frugally', 'ungulate', 'synthesis', 'estranged', 'sportier', 'syphoned', 'czars', 'placing', 'genial', 'apennines', 'festival', 'scalps', 'props', 'shyster', 'achieving', 'grovels', 'hyaena', 'khmer', 'frisked', 'expos', 'tienanmen', 'vividly', 'gorillas', 'lovesick', 'blabs', 'wilbert', 'logically', 'heimlich', 'presumed', 'emusic', 'berzelius', 'tripods', 'caromed', 'possum', 'lifers', 'sparkler', 'esthetes', 'chestnut', 'dinky', 'dishcloth', 'homewards', 'madams', 'blander', 'rigoletto', 'loped', 'matrix', 'shameful', 'unlike', 'binder', 'tansy', 'ridging', 'radiation', 'suspect', 'stemming', 'sump', 'alms', 'onassis', 'leash', 'marduk', 'topcoat', 'fiasco', 'fussiness', 'mow', 'tweediest', 'rum', 'disallows', 'hyundai', 'embattled', 'novae', 'earnings', 'triads', 'lifted', 'humbugs', 'aced', 'garbing', 'ladders', 'tableware', 'levelled', 'trina', 'rolls', 'vent', 'milieu', 'endangers', 'realign', 'mallows', 'strobe', 'ibis', 'perking', 'famishes', 'legalize', 'sinking', 'rheostats', 'noiseless', 'personae', 'trickiest', 'dowdies', 'aerators', 'zestful', 'cuspid', 'mussiest', 'student', 'madeleine', 'wizardry', 'mouth', 'gays', 'paved', 'poetesses', 'bestrid', 'colonize', 'diapered', 'durocher', 'sudra', 'dynamites', 'immature', 'jacket', 'panelist', 'hazelnut', 'parkway', 'wapiti', 'gary', 'latitudes', 'ascent', 'flapjacks', 'ignatius', 'ballooned', 'livest', 'economist', 'stefanie', 'rothko', 'bobbed', 'peon', 'numerical', 'leftover', 'starlit', 'linotype', 'cowardly', 'addicted', 'gait', 'pyx', 'rejoining', 'ashley', 'preterit', 'decatur', 'tenderize', 'layman', 'mintiest', 'scrubbing', 'unrelated', 'ladoga', 'jugular', 'miserable', 'earthen', 'breaths', 'farrakhan', 'horsehair', 'fiver', 'restroom', 'purloin', 'wadding', 'wanderers', 'windsock', 'thresher', 'froths', 'pizzeria', 'darin', 'adjoin', 'bruising', 'flummoxed', 'wench', 'swooned', 'barrages', 'wharves', 'yogurts', 'deem', 'damping', 'blare', 'stupid', 'prepares', 'comforts', 'nucleic', 'crowbar', 'attenuate', 'released', 'bipartite', 'aleutian', 'feral', 'speeded', 'postdated', 'trying', 'nudes', 'sherbets', 'andretti', 'swigs', 'crosby', 'yoke', 'unguent', 'delete', 'obligated', 'saluted', 'licks', 'jarvis', 'noose', 'forgather', 'gangways', 'justices', 'rice', 'operate', 'pastime', 'honeybees', 'blower', 'slurp', 'standards', 'stiles', 'tattle', 'egotism', 'tillich', 'flunkey', 'listened', 'xhosa', 'bashes', 'mhz', 'becalming', 'purples', 'tunisia', 'xenakis', 'perch', 'fussier', 'magnums', 'laypeople', 'originate', 'gutters', 'margret', 'cervixes', 'jerkwater', 'beth', 'padding', 'roguery', 'aymara', 'sieving', 'swears', 'privater', 'purist', 'listless', 'varies', 'limpidity', 'raffling', 'steed', 'toads', 'culottes', 'neil', 'tailpipe', 'alibi', 'direr', 'donner', 'quirks', 'hedgehog', 'pincer', 'prenatal', 'bromine', 'syrup', 'lulls', 'lagrange', 'wheel', 'jared', 'inclusion', 'jiggers', 'flossed', 'waddled', 'haitians', 'demurely', 'milestone', 'yachtsman', 'argentina', 'devolved', 'julies', 'unusual', 'magnolias', 'bryon', 'flute', 'skirt', 'disparity', 'syphon', 'plutarch', 'grosses', 'feeder', 'elsewhere', 'humanest', 'storeroom', 'coiling', 'origami', 'hal', 'congruity', 'awls', 'warping', 'relives', 'joshes', 'sixties', 'amd', 'jags', 'weans', 'realer', 'jocundly', 'irving', 'massively', 'lopsided', 'variables', 'speckle', 'chickpea', 'treatable', 'fallow', 'algeria', 'hater', 'haters', 'capsized', 'boom', 'contrast', 'muffins', 'qualifies', 'forced', 'beehives', 'cellar', 'rotates', 'supposes', 'prefers', 'harelips', 'lineages', 'render', 'cheeping', 'greedier', 'hardtop', 'vexation', 'expels', 'perrier', 'astor', 'rimmed', 'subleases', 'lecture', 'stadiums', 'louisa', 'sharked', 'lordliest', 'galley', 'ballrooms', 'wiliest', 'alsatian', 'loosening', 'ragtags', 'pants', 'snowsuits', 'shouting', 'diana', 'sosa', 'raises', 'webs', 'bowsprits', 'mall', 'borrowers', 'wednesday', 'hannibal', 'gorse', 'imbues', 'flouts', 'bottomed', 'horrid', 'carney', 'scoliosis', 'sized', 'gaziantep', 'arboreta', 'fanciest', 'paced', 'hemlock', 'oxidize', 'stockings', 'bight', 'generated', 'oriental', 'rosins', 'met', 'blight', 'shrapnel', 'gestates', 'brood', 'handing', 'volts', 'biopsying', 'campos', 'polluters', 'gooses', 'lenore', 'capering', 'chinos', 'skein', 'gunfire', 'pshaws', 'kerosine', 'york', 'talkers', 'approvals', 'annapurna', 'brakemen', 'misrule', 'winded', 'sheiks', 'wishbone', 'enabled', 'celebes', 'prowler', 'hominess', 'tangs', 'motifs', 'vistula', 'clavicle', 'martinis', 'impels', 'blacking', 'stuffed', 'retries', 'lawanda', 'build', 'fretfully', 'slobbered', 'slag', 'nary', 'ranted', 'sectioned', 'tildes', 'unravels', 'hindu', 'questions', 'reddish', 'clattered', 'nevadan', 'overhands', 'traipses', 'flotation', 'brains', 'sidelight', 'squires', 'gingkoes', 'untamed', 'barr', 'reentry', 'drowses', 'devilish', 'forester', 'silliest', 'enif', 'airiest', 'squeaks', 'oran', 'trapped', 'burials', 'pithily', 'jackdaw', 'vultures', 'racism', 'eleazar', 'locus', 'sinuous', 'kissinger', 'devotions', 'spar', 'squid', 'mayfly', 'cogitated', 'thumbtack', 'maxillae', 'tangy', 'reporters', 'enameled', 'webinar', 'changing', 'swipes', 'rapport', 'animal', 'bullets', 'abacuses', 'clairol', 'token', 'bill', 'dazing', 'maldive', 'pagan', 'lifeboats', 'binary', 'lewdest', 'outcome', 'taillight', 'sustain', 'rembrandt', 'chafes', 'pokey', 'bossing', 'kids', 'objected', 'unload', 'adepts', 'burble', 'cooed', 'outlines', 'bashfully', 'slues', 'golden', 'marinate', 'chased', 'annuities', 'pangs', 'semiramis', 'portfolio', 'endways', 'emanate', 'premium', 'glibly', 'sourced', 'symbiotic', 'eroticism', 'perverted', 'totes', 'chews', 'stolen', 'charters', 'reoccur', 'brakeman', 'appoints', 'cervical', 'encase', 'sloane', 'bombay', 'alfonzo', 'finale', 'mitigated', 'arsenals', 'capital', 'overeats', 'since', 'guacamole', 'trample', 'misfires', 'reaffirm', 'wilton', 'reloads', 'puked', 'junkiest', 'bleeder', 'plectrums', 'angelita', 'job', 'flatiron', 'singles', 'timon', 'academia', 'mastery', 'thrilled', 'luria', 'rotations', 'plodding', 'snoop', 'maracaibo', 'bide', 'axiom', 'mikes', 'besiege', 'tubercle', 'cherubs', 'tarantino', 'climbers', 'frizziest', 'overate', 'adieu', 'loadstone', 'knuckled', 'heftier', 'jessie', 'motions', 'lavishly', 'exactness', 'inhuman', 'chalking', 'sconce', 'sine', 'cheap', 'dadaism', 'antiquate', 'clammiest', 'moieties', 'brunt', 'everyday', 'dolby', 'sandals', 'geller', 'kinswoman', 'frenchman', 'leery', 'attacked', 'mustiest', 'bikinis', 'wishful', 'loaves', 'bannister', 'fuji', 'abstracts', 'sumptuous', 'planked', 'cellos', 'cordial', 'zippiest', 'frothing', 'mighty', 'dispenses', 'outset', 'attacking', 'chastened', 'footholds', 'toxicity', 'unseating', 'foiled', 'theseus', 'harvey', 'kits', 'lump', 'antics', 'entrench', 'undue', 'impeaches', 'paralyses', 'erroneous', 'hobos', 'chuck', 'keystroke', 'neater', 'bunt', 'spacier', 'skyed', 'redeploy', 'donatello', 'falsehood', 'counsel', 'scantier', 'divesting', 'flutter', 'carmines', 'puckered', 'crater', 'comments', 'qualms', 'vicious', 'securely', 'authoring', 'clomping', 'acronyms', 'earnests', 'canyon', 'crazies', 'tangshan', 'gimmicks', 'procurer', 'lisp', 'robbins', 'roughing', 'carapaces', 'cyclamens', 'bop', 'inspiring', 'kanpur', 'hoodoo', 'lincoln', 'spurs', 'decks', 'splints', 'rescues', 'tempted', 'fulton', 'wrapping', 'excretion', 'cooked', 'ochre', 'reinhold', 'gaffes', 'nathan', 'treatment', 'brice', 'brusk', 'valley', 'overhang', 'justly', 'nostrils', 'adeptness', 'friending', 'inamorata', 'untangles', 'termite', 'mucked', 'withdrawn', 'convokes', 'ravaged', 'fugitive', 'ironical', 'stalling', 'pivoting', 'limbers', 'moistest', 'shah', 'prospers', 'pastures', 'caroling', 'chasm', 'grabs', 'donation', 'provident', 'crucibles', 'caption', 'perky', 'latex', 'thrills', 'hesiod', 'politest', 'pompadour', 'dismissal', 'puma', 'duplicity', 'yoghurt', 'gloomiest', 'chanel', 'johnie', 'furbelow', 'desirably', 'exacted', 'forsooth', 'curls', 'distemper', 'parkinson', 'filled', 'seclude', 'outworn', 'virtual', 'rhombi', 'fluke', 'painful', 'proxies', 'retouched', 'disunites', 'cougars', 'dittoing', 'despotism', 'aground', 'kane', 'emphasize', 'mainlines', 'pitfall', 'flee', 'consortia', 'blotch', 'nozzles', 'graffito', 'pillsbury', 'conduces', 'postcards', 'cosier', 'cunninger', 'cowardice', 'tensely', 'contested', 'donaldson', 'lunging', 'mousetrap', 'hillsides', 'nigh', 'maturing', 'mazola', 'pledges', 'effusions', 'parental', 'surplice', 'friezes', 'knack', 'slumbers', 'nurture', 'rasp', 'wondrous', 'isolation', 'henpeck', 'primed', 'kilobyte', 'khaki', 'thieving', 'legislate', 'scarcity', 'lela', 'arkansas', 'tattler', 'silvery', 'pixy', 'condones', 'roaster', 'falconry', 'partake', 'hayworth', 'tab', 'wounding', 'niceties', 'pommels', 'ramrods', 'gauziest', 'blenches', 'dimaggio', 'uptown', 'crewman', 'abound', 'angled', 'carried', 'indolent', 'calfs', 'bright', 'stems', 'august', 'cropper', 'knits', 'lagoons', 'snore', 'biologist', 'max', 'pierrot', 'waved', 'immobile', 'merchant', 'untested', 'penny', 'inundates', 'chewy', 'aspirates', 'bedecks', 'amply', 'response', 'ubiquity', 'dominique', 'decorate', 'delores', 'honduras', 'vice', 'wilted', 'daumier', 'dazzled', 'quaffs', 'irk', 'reoccurs', 'knacks', 'stylist', 'genii', 'mutated', 'avenue', 'remorse', 'roosters', 'chanter', 'erudition', 'divorce', 'respites', 'can', 'noels', 'unhand', 'alpert', 'textbook', 'ankle', 'dictate', 'movement', 'teeing', 'convents', 'toreador', 'listen', 'psalmists', 'cur', 'abash', 'nastiest', 'crunchy', 'fourfold', 'rome', 'rankness', 'impasse', 'peanut', 'brogues', 'ought', 'dakota', 'ombudsman', 'cleanse', 'zealously', 'difficult', 'plop', 'nexuses', 'circus', 'sunflower', 'teeth', 'mulattoes', 'leeks', 'righter', 'howells', 'menaced', 'tilsit', 'chiba', 'leverage', 'clampdown', 'obstruct', 'fulminate', 'cheddar', 'ersatzes', 'upwardly', 'chemises', 'anthem', 'winsome', 'powwows', 'alone', 'leta', 'minuends', 'subheads', 'prettied', 'demands', 'deodorant', 'signaled', 'spotty', 'looked', 'entourage', 'providers', 'brooch', 'shoots', 'trotsky', 'dins', 'remaking', 'disbelief', 'spock', 'drums', 'corneille', 'crows', 'calm', 'divested', 'calcify', 'devonian', 'negatives', 'curtails', 'figurine', 'linchpin', 'galleys', 'hollowly', 'tass', 'whittlers', 'evermore', 'submersed', 'commode', 'compact', 'brisbane', 'jiffies', 'dervish', 'bung', 'abnegates', 'sniveling', 'roster', 'assuages', 'reed', 'applause', 'malays', 'sledge', 'zinc', 'disown', 'rug', 'domestic', 'bring', 'sunspot', 'mildewing', 'marveling', 'pecking', 'furious', 'assembles', 'cirrhosis', 'chester', 'hotshots', 'furl', 'rehiring', 'gargling', 'federate', 'macerate', 'nowise', 'fear', 'crumpling', 'decorated', 'mangers', 'rummer', 'cadenza', 'snifter', 'slyness', 'iberia', 'vandal', 'groupers', 'vanuatu', 'hoaxes', 'hod', 'midlands', 'nineveh', 'connive', 'blockade', 'indented', 'catkins', 'unbending', 'tenders', 'sharpener', 'parolees', 'eliot', 'medicines', 'insensate', 'davao', 'committal', 'steroids', 'influxes', 'coxcombs', 'stricture', 'salmons', 'magnifies', 'indolence', 'ponders', 'runway', 'stating', 'thieve', 'zinced', 'bulrush', 'mobiles', 'outlast', 'trashes', 'revives', 'whitfield', 'flap', 'anoints', 'clearness', 'dizziest', 'cupboards', 'yodeled', 'pneumonia', 'reviles', 'mannishly', 'profound', 'texas', 'interred', 'dickies', 'compares', 'savagest', 'legends', 'bellies', 'charity', 'sabbaths', 'rosettes', 'aptness', 'overhaul', 'rankest', 'implants', 'huckster', 'tamped', 'thee', 'faster', 'stares', 'fishtails', 'splint', 'tarps', 'nagasaki', 'raoul', 'shinbones', 'nordics', 'miskito', 'foamier', 'host', 'jerry', 'volta', 'overmuch', 'stopcock', 'gnashed', 'organs', 'scary', 'tarts', 'coyness', 'exile', 'nappiest', 'outtakes', 'moonshine', 'punjab', 'whimsical', 'thirstier', 'baths', 'speaker', 'thyself', 'sperry', 'drying', 'overcrowd', 'humbles', 'humorists', 'fulani', 'herbalist', 'colon', 'quiets', 'pizzazz', 'springy', 'khulna', 'fishery', 'kipper', 'haystack', 'fanzine', 'breeders', 'jumbled', 'potboiler', 'indorses', 'powerpc', 'trainee', 'apostolic', 'zamenhof', 'birdseye', 'glutted', 'chicago', 'enclave', 'betiding', 'fugger', 'finder', 'prisons', 'fragrant', 'josefa', 'arduously', 'loot', 'carjacks', 'histories', 'vocalize', 'enigmatic', 'overage', 'receptive', 'mullah', 'figs', 'enigma', 'feeding', 'zimmerman', 'ghastly', 'offloads', 'exec', 'tulips', 'saunders', 'hindsight', 'legion', 'realizes', 'versify', 'ashanti', 'invader', 'nucleuses', 'soaping', 'tailgate', 'burlier', 'hamilcar', 'stooped', 'crocuses', 'carding', 'inhumane', 'governess', 'pillows', 'cotyledon', 'sabina', 'equalizes', 'wald', 'outer', 'fields', 'rimbaud', 'salience', 'chewiest', 'handwork', 'fattened', 'selects', 'meltdown', 'acanthus', 'crocked', 'delays', 'scrounger', 'psychos', 'arrays', 'tame', 'bullfinch', 'populaces', 'usurer', 'lock', 'bogs', 'arizona', 'needier', 'shocker', 'breakneck', 'danial', 'wreak', 'slightest', 'perkiness', 'billet', 'umpiring', 'eggshell', 'lender', 'wickedest', 'crisp', 'snowflake', 'untwist', 'perfuming', 'hoaxers', 'golconda', 'stifling', 'intents', 'forays', 'platte', 'loving', 'soybeans', 'lost', 'bedouin', 'beach', 'uphills', 'janjaweed', 'hymning', 'pinholes', 'dibble', 'pamper', 'quizzed', 'onsets', 'anthill', 'gelling', 'substrate', 'afterlife', 'runny', 'granting', 'athenian', 'horde', 'odds', 'chileans', 'dalmatian', 'hoodwinks', 'ecology', 'idahoan', 'epicenter', 'beginner', 'leaven', 'pollutes', 'pelagic', 'dating', 'cornelius', 'hoagy', 'offended', 'tumbrils', 'kinfolk', 'layering', 'deport', 'scampered', 'leagues', 'freemason', 'availed', 'gauze', 'herein', 'nantes', 'aflutter', 'triangles', 'wrens', 'valances', 'vaccinate', 'unloading', 'nonwhite', 'caucasoid', 'manfred', 'cub', 'cuckolded', 'wrenched', 'wiling', 'tracing', 'fatigues', 'handrail', 'cupping', 'traverse', 'olmec', 'highways', 'nineteen', 'unstops', 'corset', 'circles', 'waivers', 'misery', 'mislays', 'centaurs', 'pays', 'parkways', 'scamming', 'pyotr', 'ancestor', 'morse', 'rivals', 'atrocious', 'scurfy', 'molehills', 'ragtime', 'crapes', 'energies', 'correcter', 'action', 'appaloosa', 'auguries', 'nailing', 'opposite', 'scampers', 'total', 'relieve', 'gatepost', 'companies', 'marquise', 'seduction', 'hence', 'sadr', 'gamecocks', 'gaff', 'charmer', 'influx', 'yams', 'lynches', 'stopover', 'libelers', 'oddballs', 'tons', 'unhurried', 'clambers', 'thomism', 'ferreting', 'airedales', 'aha', 'vital', 'pogroms', 'lustiness', 'impanels', 'roasts', 'stimulant', 'cite', 'stalin', 'prologues', 'heists', 'patty', 'lafitte', 'marinade', 'talents', 'augury', 'tevet', 'smooth', 'carnival', 'unnerved', 'braces', 'sailing', 'eruptions', 'cocking', 'vineyard', 'deterrent', 'grayed', 'resinous', 'limousine', 'endives', 'rarefy', 'baum', 'offertory', 'halt', 'brat', 'homeward', 'viewing', 'jamaica', 'gripping', 'hoorahs', 'requites', 'hindered', 'dwindled', 'drachmas', 'courtlier', 'bosnia', 'bettye', 'disgrace', 'calve', 'babur', 'abstains', 'curtsey', 'mort', 'scrunched', 'antony', 'amman', 'lectured', 'crucify', 'daunt', 'nisei', 'caddying', 'treachery', 'itinerary', 'schussing', 'spireas', 'sneaked', 'photoing', 'neutrinos', 'ireland', 'elector', 'cameos', 'swords', 'saguaro', 'material', 'hornpipe', 'tympanum', 'sipping', 'rosenberg', 'becalm', 'puerto', 'libelled', 'digitally', 'wiliness', 'chapels', 'mesquites', 'smacks', 'takeoff', 'ranged', 'dive', 'whittle', 'flannels', 'shylock', 'armatures', 'donor', 'factotums', 'crumby', 'evilest', 'youngish', 'munitions', 'juicier', 'savviest', 'extending', 'eager', 'engineers', 'grouses', 'utters', 'quartets', 'calving', 'dappled', 'lining', 'boreas', 'logician', 'pilchard', 'intel', 'rubes', 'tornado', 'wigged', 'grad', 'sweaty', 'ramos', 'mooed', 'navajo', 'america', 'pistols', 'heaping', 'compass', 'handset', 'wrier', 'snowball', 'octavio', 'sundae', 'attends', 'everest', 'mentored', 'deathless', 'hurtful', 'yorkie', 'zoroaster', 'teaspoons', 'triage', 'smoking', 'grandma', 'castrated', 'scrub', 'safflower', 'baboon', 'chimaeras', 'sojourned', 'coupes', 'deposit', 'chamois', 'altering', 'bombshell', 'choking', 'clinchers', 'surtaxing', 'their', 'boos', 'duodenal', 'oracles', 'coveting', 'abstruse', 'creatives', 'spills', 'tulle', 'daintiest', 'enervate', 'cribbage', 'sermon', 'lassa', 'lustre', 'ibuprofen', 'embroider', 'bathtub', 'scrupled', 'dominican', 'kleenex', 'portend', 'ignoble', 'misdoing', 'naugahyde', 'horatio', 'nitwit', 'snuffled', 'bespeak', 'artful', 'bathes', 'schedules', 'mobster', 'freida', 'gradation', 'washes', 'jerky', 'golgotha', 'revised', 'cedilla', 'exterior', 'burlap', 'monaural', 'livid', 'leopoldo', 'actress', 'remarry', 'infernal', 'hershey', 'tepid', 'peck', 'asininity', 'scarf', 'arcade', 'hunkered', 'reliable', 'orderings', 'reflector', 'buckner', 'inoculate', 'manacles', 'bowditch', 'gloss', 'monograms', 'recasting', 'coinage', 'lubbers', 'bedtime', 'axe', 'golda', 'chute', 'mercerize', 'ascots', 'anoraks', 'belonged', 'rivet', 'policeman', 'separator', 'sukkoths', 'bleary', 'putsch', 'discard', 'whiskies', 'grimaced', 'wiesel', 'buoyed', 'described', 'beastly', 'eddies', 'slavishly', 'buddings', 'dimmest', 'getup', 'hunting', 'farthings', 'streams', 'manics', 'shied', 'tussock', 'pulsating', 'impunity', 'inferred', 'excite', 'fielded', 'pickaxing', 'iguassu', 'groused', 'spiciness', 'indexed', 'housman', 'bigot', 'shirred', 'refracted', 'refs', 'spouting', 'cleaner', 'paddles', 'famines', 'lincolns', 'wrestlers', 'keywords', 'smoothies', 'kwangju', 'touchiest', 'repayment', 'innocent', 'epidemic', 'flubs', 'carnelian', 'wines', 'locates', 'okays', 'aramco', 'ratchets', 'flagship', 'birth', 'herdsman', 'banditry', 'strips', 'alumna', 'seasons', 'uneasiest', 'congolese', 'chimaera', 'obscurity', 'voip', 'trussing', 'speakeasy', 'lineman', 'studies', 'pillowed', 'jaguar', 'burgeoned', 'abelard', 'soiled', 'sacks', 'conciser', 'kay', 'alicia', 'sambas', 'mesmerize', 'bloomed', 'lullaby', 'manifests', 'parade', 'manchuria', 'sash', 'fullest', 'musicians', 'attorneys', 'grasped', 'concords', 'tropicana', 'miscue', 'airmails', 'corms', 'fondu', 'bemused', 'swill', 'greatness', 'loyal', 'cantor', 'obliques', 'clotted', 'band', 'bushnell', 'catalepsy', 'nintendo', 'preordain', 'contagion', 'vivifies', 'dislikes', 'nooses', 'tag', 'shattered', 'nightclub', 'hallway', 'otter', 'adrian', 'writer', 'jaywalker', 'rainfall', 'canadians', 'headboard', 'haycocks', 'endorsers', 'dixie', 'perforate', 'rebuking', 'stendhal', 'midwife', 'vacillate', 'joanne', 'stephens', 'flattop', 'sclerosis', 'cranium', 'deaconess', 'leaf', 'miasmata', 'viewed', 'oscillate', 'silicone', 'titled', 'fenders', 'avignon', 'beyond', 'detracted', 'blu', 'robberies', 'dishevels', 'nam', 'slandered', 'subjected', 'peso', 'flatfoots', 'fleecy', 'usher', 'justest', 'testifies', 'hansoms', 'box', 'niftier', 'designer', 'cordials', 'hazardous', 'yuks', 'hummocks', 'smut', 'pippins', 'airmail', 'raymundo', 'fatness', 'aires', 'suffixes', 'blubber', 'noxious', 'rivers', 'gaping', 'pollen', 'movies', 'crop', 'hairline', 'swastikas', 'epidemics', 'blob', 'unhappily', 'travesty', 'timidity', 'troughs', 'hazier', 'lain', 'irrawaddy', 'fondues', 'raising', 'hues', 'skinflint', 'treacle', 'hollers', 'miscasts', 'browsing', 'guesting', 'harks', 'cohan', 'swivelled', 'barrette', 'rentals', 'births', 'snowdrop', 'franglais', 'inclosure', 'sustains', 'velveteen', 'potash', 'glassed', 'tacitly', 'girted', 'sonata', 'fringing', 'megaliths', 'whites', 'fedex', 'anarchism', 'sunning', 'antietam', 'interject', 'boardroom', 'briefly', 'cereal', 'haltering', 'nichols', 'dillinger', 'wakening', 'sips', 'palavered', 'blinking', 'northern', 'stamens', 'aphasics', 'releases', 'peru', 'floured', 'fledged', 'ram', 'deputing', 'sequoias', 'lest', 'servo', 'sisyphus', 'shiftily', 'dilation', 'tap', 'tacos', 'coverage', 'rubicon', 'dwayne', 'schnapps', 'carryalls', 'kindlier', 'comprise', 'spareness', 'nod', 'mckenzie', 'duffy', 'topic', 'zanier', 'rena', 'jangling', 'elysium', 'gopher', 'counties', 'tunny', 'graph', 'guayaquil', 'brushed', 'eclipse', 'bayeux', 'biplane', 'hyperbole', 'typhoid', 'silks', 'sideburns', 'tritely', 'bandstand', 'lurch', 'bassinet', 'takings', 'kongo', 'seebeck', 'nunavut', 'nastier', 'stricter', 'desk', 'gamble', 'month', 'tiaras', 'opposing', 'moldy', 'jokingly', 'aiken', 'kaunda', 'revel', 'tadpole', 'whirligig', 'van', 'hives', 'recluses', 'dashes', 'poacher', 'domineers', 'lessie', 'taros', 'faltering', 'kurile', 'misstate', 'wingnuts', 'trickier', 'tauruses', 'smocks', 'granular', 'guernseys', 'capitols', 'lounge', 'knuckles', 'ascertain', 'sparkling', 'puffball', 'townsfolk', 'dyestuff', 'tare', 'emperors', 'albino', 'bluffers', 'wooden', 'brewery', 'abducted', 'hiccups', 'knockers', 'frizzing', 'sebastian', 'foresees', 'cookies', 'galoshes', 'nonfat', 'bobbing', 'palliates', 'refiles', 'softening', 'reveal', 'liqueur', 'routed', 'pianola', 'intervals', 'either', 'cooling', 'blitz', 'basalt', 'grimness', 'ensures', 'conking', 'pled', 'frontage', 'ardent', 'fielders', 'bicycling', 'baristas', 'degeneres', 'doublets', 'crania', 'costner', 'kalmyk', 'welting', 'vulva', 'arrived', 'lister', 'mustering', 'lackeys', 'apuleius', 'thees', 'habitat', 'twosome', 'peaceful', 'tittles', 'plaudits', 'hoopla', 'wot', 'bridging', 'stud', 'deserting', 'quaoar', 'spent', 'wryer', 'cuss', 'flour', 'became', 'sightseer', 'appealing', 'intensest', 'spiffiest', 'snatching', 'uncased', 'threshing', 'voyeur', 'drunkest', 'tutelage', 'remounted', 'nebular', 'lout', 'redder', 'martel', 'faded', 'thistles', 'mortise', 'hangnail', 'sardinia', 'lion', 'matilda', 'graced', 'waddle', 'nisan', 'restrooms', 'cheapest', 'malagasy', 'mirages', 'sociable', 'ruing', 'dunkirk', 'nina', 'delphinus', 'goodman', 'modules', 'measure', 'affronted', 'sprigs', 'stephan', 'bleariest', 'medicaids', 'sweetish', 'engages', 'sneaky', 'casuists', 'laugh', 'clemens', 'gyps', 'smiths', 'baylor', 'corncobs', 'tofu', 'divining', 'paranoids', 'grooms', 'sureties', 'roommate', 'rosella', 'utterance', 'quieted', 'skimming', 'glimmer', 'drainage', 'liquifies', 'paps', 'midways', 'frostbelt', 'capitals', 'rared', 'bitch', 'cowing', 'restudied', 'lampoons', 'ito', 'recreants', 'facebook', 'consular', 'banks', 'homeowner', 'nicola', 'prancer', 'roadways', 'scrunchy', 'andromeda', 'accedes', 'grandson', 'mortgage', 'anti', 'legalized', 'websters', 'slicer', 'valentin', 'irksome', 'restore', 'victorian', 'novel', 'persuades', 'lowliest', 'packet', 'shafted', 'bette', 'leastwise', 'antidotes', 'entity', 'auxiliary', 'donna', 'novas', 'andorra', 'infuriate', 'adversary', 'woman', 'concertos', 'pulled', 'glut', 'codifying', 'dorkier', 'causeways', 'stewing', 'truer', 'sheller', 'winching', 'inuits', 'russia', 'pyongyang', 'honoring', 'galvanize', 'flighty', 'waft', 'acutes', 'mcintosh', 'shlemiel', 'outrage', 'reckoned', 'friedman', 'scrappy', 'chapping', 'tipsiest', 'footmen', 'leverages', 'laura', 'garrulity', 'amasses', 'recant', 'overuses', 'tampax', 'severely', 'tendon', 'quipping', 'coding', 'numbs', 'profanity', 'absurd', 'snailing', 'paintings', 'papers', 'darkest', 'reenact', 'sabres', 'spasms', 'quitting', 'wooliest', 'kiting', 'cameroons', 'gris', 'orcs', 'balearic', 'uninstall', 'expiated', 'tod', 'tenfold', 'clobbered', 'inflates', 'fiats', 'teats', 'founts', 'hump', 'slathered', 'entrapped', 'jorge', 'animists', 'raincoats', 'imputes', 'pipelines', 'exorcisms', 'spirit', 'rogers', 'shaw', 'oldies', 'mumbler', 'nabob', 'removing', 'trochees', 'legalese', 'headlocks', 'rescued', 'fretting', 'saddened', 'freeman', 'inflation', 'sideline', 'clutch', 'bluest', 'incest', 'rehearsal', 'iterate', 'chunk', 'shinnies', 'mesmer', 'palate', 'rowing', 'shinny', 'allows', 'gall', 'eaton', 'advised', 'collating', 'pat', 'vertexes', 'mudslides', 'decedent', 'graphs', 'doled', 'puzzlers', 'juggling', 'tallyhoed', 'tanzania', 'debating', 'sober', 'debits', 'francoise', 'chowing', 'valeting', 'follicle', 'weaves', 'replays', 'ferguson', 'kilowatt', 'deigns', 'caveman', 'inserting', 'forces', 'yacking', 'tendered', 'carriers', 'armrest', 'entrusts', 'cataloged', 'jonquils', 'refuel', 'ganges', 'seabirds', 'collocate', 'spahn', 'pleas', 'chinooks', 'courtesan', 'cilium', 'besotted', 'zagreb', 'seating', 'striated', 'amnesties', 'palmettos', 'rigidity', 'manila', 'kazakh', 'traceries', 'tippling', 'punning', 'cornwall', 'welt', 'requited', 'dietaries', 'passports', 'plantain', 'andalusia', 'wondering', 'gutsy', 'would', 'vogues', 'invents', 'quirkier', 'theater', 'hera', 'slumping', 'effusive', 'wrongest', 'walesa', 'meanly', 'resilient', 'heckled', 'faces', 'ovaries', 'ingots', 'dais', 'debuted', 'quids', 'shorthorn', 'calf', 'codas', 'shadowbox', 'unpacked', 'folders', 'cluck', 'deserted', 'hussars', 'snaring', 'unionizes', 'setbacks', 'clipping', 'famish', 'ejection', 'calculi', 'canal', 'tarragon', 'alabaman', 'owls', 'gorey', 'legible', 'caboose', 'extrude', 'wingtip', 'faxing', 'xerxes', 'buckskins', 'goblins', 'chunks', 'deeper', 'midriffs', 'tillable', 'brusquely', 'dionysus', 'smelled', 'sexless', 'rebating', 'raiding', 'penances', 'plunges', 'lager', 'outwear', 'beheads', 'flexible', 'dejecting', 'heaviness', 'engraves', 'rhiannon', 'refrain', 'misshapen', 'synchs', 'statutory', 'moonlight', 'grossest', 'rationals', 'pitchmen', 'estimator', 'knowles', 'itches', 'sharia', 'backbone', 'salty', 'penile', 'erase', 'mestizo', 'salutary', 'pawning', 'cocooning', 'durably', 'cognate', 'solemnest', 'herb', 'campanili', 'semesters', 'scarfed', 'showering', 'buyouts', 'amur', 'blustered', 'sunsets', 'spiels', 'spinals', 'frills', 'coroners', 'alloying', 'swanee', 'amundsen', 'odometer', 'buzzkills', 'dulles', 'chick', 'mckinley', 'downbeat', 'alton', 'bask', 'dubbing', 'mussy', 'tell', 'misdoings', 'clinics', 'trotted', 'estuaries', 'cowbirds', 'locutions', 'install', 'peopling', 'composure', 'ferrules', 'talmud', 'lingers', 'forties', 'strays', 'horrified', 'jocasta', 'sniggered', 'uproar', 'routine', 'listerine', 'nuzzle', 'equalizer', 'dante', 'searing', 'sounded', 'duff', 'shines', 'amounting', 'quack', 'black', 'saguaros', 'invented', 'canonize', 'millrace', 'unselfish', 'loafers', 'headroom', 'gushier', 'motleys', 'jansen', 'damascus', 'sort', 'restfully', 'nerdier', 'scrod', 'frothier', 'cannily', 'rends', 'dribblers', 'vibrating', 'covertly', 'assent', 'prick', 'fife', 'dazzling', 'gilded', 'clearings', 'kindred', 'handel', 'dissenter', 'censure', 'noising', 'glucose', 'abrogate', 'ballet', 'poodle', 'geranium', 'speccing', 'loots', 'clutter', 'gentling', 'caleb', 'escrow', 'greatest', 'amicably', 'impounds', 'mcclure', 'teethe', 'legume', 'bankrolls', 'emanated', 'calfskin', 'divide', 'connoting', 'moped', 'twofold', 'forehands', 'slides', 'prejudice', 'penciled', 'lamas', 'foretells', 'adapt', 'verdict', 'caiaphas', 'bighorn', 'potions', 'collide', 'outdated', 'lowish', 'tunefully', 'handhelds', 'weltering', 'alfred', 'maunder', 'minamoto', 'placidly', 'cyril', 'tide', 'stomach', 'peaceably', 'lubricant', 'walkout', 'foam', 'samsonite', 'sleek', 'reusable', 'volley', 'dateline', 'humblings', 'becks', 'withdraw', 'tamil', 'hooks', 'ward', 'nomads', 'smidgins', 'bluffest', 'enclosed', 'deplored', 'polynesia', 'kong', 'adoringly', 'offed', 'turnkey', 'hubs', 'facetting', 'groins', 'delilah', 'grader', 'decaf', 'wiggliest', 'amnesiac', 'jargon', 'prodigal', 'symbolic', 'ligament', 'outstrip', 'connotes', 'truffle', 'cowling', 'troupes', 'engraving', 'counters', 'boarded', 'leggy', 'socials', 'locality', 'ferrule', 'clewed', 'kubrick', 'greyhound', 'marshiest', 'bade', 'alders', 'luanda', 'comic', 'incisions', 'leaky', 'learned', 'debarks', 'couples', 'ashamedly', 'diploma', 'invites', 'pair', 'males', 'stripe', 'promoters', 'dabbling', 'thwack', 'supporter', 'daffiest', 'termagant', 'lap', 'grapnels', 'cases', 'hovels', 'cluttered', 'snowier', 'obsessing', 'messiness', 'soggily', 'octopuses', 'majorly', 'glow', 'imitate', 'smitten', 'briniest', 'tattooist', 'mandated', 'chen', 'dewdrops', 'ligatures', 'biography', 'rumbaed', 'hull', 'stanley', 'gimmick', 'amble', 'tabs', 'gardening', 'occupants', 'stave', 'baa', 'bookworm', 'festered', 'hobo', 'centaur', 'tout', 'tamale', 'barnyard', 'heresy', 'bided', 'lolita', 'swearword', 'gybed', 'beholding', 'tunics', 'mysticism', 'lucidly', 'nitrate', 'welds', 'reassured', 'vainglory', 'titmouse', 'resolve', 'cooks', 'misses', 'carpentry', 'lubed', 'glanced', 'device', 'dug', 'signaling', 'misspelt', 'scrapped', 'marquee', 'speculate', 'homeless', 'lionesses', 'jahangir', 'roadkill', 'shone', 'partaker', 'counsels', 'slave', 'gentler', 'satraps', 'mommies', 'bristled', 'visualize', 'peerage', 'ravines', 'atoms', 'overlaid', 'sliced', 'thule', 'elegiacs', 'lady', 'pyramided', 'spindled', 'motored', 'gravels', 'abbot', 'mammas', 'reserving', 'glorying', 'censor', 'iranians', 'tripling', 'dignitary', 'roumania', 'colleges', 'gauntlets', 'reassign', 'ideograms', 'congests', 'relents', 'lair', 'unease', 'plotted', 'drowsed', 'tumult', 'elwood', 'clucking', 'misfiring', 'foamy', 'infancy', 'skydive', 'flummoxes', 'orgiastic', 'plywood', 'rollbacks', 'damn', 'linnaeus', 'hurls', 'snatch', 'heated', 'carted', 'timor', 'cogitate', 'carnally', 'frat', 'traitor', 'smacking', 'dross', 'hosteling', 'appeasers', 'luxuries', 'placating', 'signer', 'reminisce', 'cherished', 'tonne', 'hectoring', 'compilers', 'inception', 'chroming', 'pilots', 'stirrup', 'statuary', 'quipped', 'tablets', 'budge', 'disasters', 'exteriors', 'heppest', 'oven', 'sequenced', 'sasses', 'bobbins', 'serape', 'maul', 'batik', 'slimmest', 'deadpan', 'crucible', 'chomsky', 'deathly', 'calves', 'cuban', 'holed', 'ineffably', 'shepherds', 'skinhead', 'boxcar', 'garrottes', 'newsier', 'rotors', 'platypi', 'thurber', 'sanka', 'geronimo', 'silage', 'expanses', 'emacs', 'setting', 'yesterday', 'trauma', 'decoy', 'vitim', 'eggplants', 'smoothie', 'limiting', 'boxer', 'sweatiest', 'starker', 'genitals', 'verbalize', 'dust', 'fermi', 'arterial', 'grooving', 'valuables', 'hibachi', 'lookalike', 'weasel', 'appetizer', 'veblen', 'impulsing', 'asperity', 'adjudging', 'brecht', 'lineally', 'aerial', 'mattocks', 'bossily', 'decrepit', 'root', 'mixtures', 'sidewalk', 'smollett', 'brenton', 'revalue', 'fumbler', 'tungsten', 'delphic', 'shaun', 'wretch', 'glum', 'mari', 'spinnaker', 'drove', 'argues', 'altitude', 'salas', 'novelties', 'secretes', 'insomnia', 'shuffling', 'dripped', 'fasten', 'restate', 'inwardly', 'heaters', 'silver', 'bisects', 'vicing', 'heller', 'egregious', 'kristin', 'partings', 'abnormal', 'miffed', 'tiresias', 'parr', 'compliant', 'mantes', 'immortals', 'galloway', 'deice', 'outstay', 'patienter', 'verandahs', 'champions', 'nikon', 'snags', 'repellant', 'shoeing', 'paisleys', 'jotted', 'bothered', 'populated', 'steadicam', 'proffered', 'fuzziness', 'imbeds', 'collapse', 'annabel', 'somberly', 'paraded', 'jarring', 'puddings', 'sallie', 'menagerie', 'baywatch', 'beatnik', 'thirteens', 'put', 'recalling', 'cinch', 'purling', 'tingling', 'drags', 'enforcers', 'depraving', 'affording', 'traces', 'thrillers', 'shortened', 'bunnies', 'bombard', 'aerates', 'ices', 'upheavals', 'daybed', 'bulked', 'evacuate', 'cranach', 'bouncing', 'spree', 'francis', 'oblige', 'rheumatic', 'angles', 'texans', 'defrauds', 'ferocious', 'hum', 'truffles', 'subtotal', 'sheikhdom', 'panoramas', 'lynxes', 'wailed', 'citation', 'tarawa', 'carpel', 'carouser', 'jung', 'santa', 'brutality', 'kenyatta', 'ellen', 'derived', 'oleo', 'capped', 'pound', 'bleaches', 'reprint', 'graduated', 'revenue', 'disinters', 'tallying', 'panhandle', 'awed', 'shabbier', 'amity', 'infusions', 'branched', 'chinatown', 'sheepfold', 'tithing', 'crusades', 'undiluted', 'ponderous', 'gaussian', 'lyres', 'opel', 'weirs', 'taiwanese', 'shocks', 'enured', 'houmous', 'morin', 'comers', 'societies', 'tenseness', 'puzzled', 'ingrains', 'flimflam', 'canoeists', 'padilla', 'built', 'kidder', 'savvier', 'tired', 'pilfers', 'brassier', 'reenter', 'surreys', 'half', 'blenching', 'otiose', 'seething', 'spareribs', 'tearful', 'lumped', 'haiphong', 'sates', 'embracing', 'ranks', 'officers', 'marlin', 'sulked', 'hotpoint', 'smothered', 'brocaded', 'appeaser', 'shakiness', 'staffed', 'clans', 'foundries', 'potholder', 'tuberous', 'perusals', 'kwanzaas', 'prissiest', 'skylights', 'impasses', 'abate', 'dirigible', 'loveable', 'sobering', 'euterpe', 'greys', 'ruining', 'viols', 'liquoring', 'water', 'uniforms', 'seeker', 'devilment', 'rotundas', 'playbill', 'vicente', 'aphid', 'ululating', 'paving', 'tinseling', 'callused', 'shillong', 'grandiose', 'colossi', 'meander', 'penn', 'muppet', 'insipid', 'accessory', 'brazens', 'boxers', 'brakes', 'settler', 'thrown', 'esteem', 'alps', 'roseann', 'dogfight', 'tocsins', 'eltanin', 'portico', 'belled', 'missal', 'alb', 'cognition', 'loopier', 'pothooks', 'morsels', 'teazle', 'fuzziest', 'gipsies', 'wineglass', 'textures', 'mistrusts', 'chastely', 'sooty', 'caustic', 'physicals', 'bonn', 'bose', 'clownish', 'embalmer', 'quartos', 'beveled', 'serb', 'madman', 'amigos', 'carboys', 'plunge', 'cohere', 'sodding', 'toddies', 'secular', 'nubs', 'brady', 'cutups', 'guerilla', 'tantrums', 'adriana', 'vuvuzela', 'jarrett', 'mangos', 'worming', 'ennoble', 'shortstop', 'satchels', 'construe', 'scumbags', 'litters', 'wires', 'loosed', 'kalb', 'junkies', 'soapier', 'chortled', 'hyperlink', 'autopilot', 'guarded', 'lefties', 'marmalade', 'chickpeas', 'showmen', 'penlites', 'medical', 'attic', 'berth', 'bigness', 'ringers', 'bushiness', 'tianjin', 'sadden', 'earbuds', 'swathed', 'hub', 'shirrings', 'externals', 'shane', 'candor', 'squeak', 'fidgets', 'partials', 'betrayers', 'lori', 'scalped', 'solicits', 'cheaply', 'blur', 'reneging', 'rumble', 'leaned', 'jocelyn', 'strafed', 'delis', 'wiki', 'austria', 'combing', 'skirts', 'emporium', 'closets', 'broth', 'erecting', 'azazel', 'unclearer', 'toothless', 'beacon', 'geologic', 'celluloid', 'tasking', 'bushy', 'browser', 'residing', 'sudsiest', 'livers', 'negatived', 'shammies', 'norberto', 'familial', 'sheared', 'deicers', 'differs', 'savants', 'memory', 'minivan', 'unwound', 'mockingly', 'imploding', 'inferiors', 'purchase', 'dustpan', 'studios', 'chianti', 'gatherer', 'pirated', 'beholden', 'fission', 'labor', 'suited', 'flintier', 'khorana', 'dimness', 'curlicued', 'copying', 'veriest', 'kickback', 'clinic', 'sunny', 'alhena', 'crumbing', 'surely', 'prompted', 'lanky', 'bicuspid', 'wry', 'inveighed', 'locavore', 'spinoffs', 'ladybug', 'camellia', 'temblor', 'unfairly', 'rouged', 'enrique', 'byelaws', 'tirade', 'babushkas', 'smokers', 'indued', 'sweeter', 'braises', 'saunter', 'ana', 'adapts', 'notaries', 'mold', 'exudes', 'peaked', 'exhorted', 'injures', 'snots', 'perot', 'caviling', 'bumblebee', 'cory', 'move', 'thuds', 'apple', 'inverts', 'bobsleds', 'fanatic', 'bawl', 'retried', 'coke', 'balled', 'residence', 'burnished', 'firebomb', 'evacuee', 'peeking', 'weevils', 'ensured', 'knavery', 'economy', 'politer', 'whits', 'corny', 'choosiest', 'pivoted', 'baldwin', 'riddle', 'glass', 'mir', 'magyar', 'streakier', 'medalist', 'phoneyed', 'pacific', 'drawer', 'hezbollah', 'obstructs', 'aug', 'affinity', 'scrunch', 'gentians', 'trolls', 'annually', 'shrek', 'geography', 'hernia', 'pliny', 'ague', 'clothier', 'meows', 'ideal', 'bean', 'toxin', 'ladybugs', 'camomile', 'previous', 'byes', 'calvinism', 'loadstars', 'must', 'placket', 'artisan', 'hanoi', 'suitable', 'firmed', 'misdeal', 'nazi', 'buddhisms', 'blush', 'tagore', 'jewel', 'ejected', 'viruses', 'loyalties', 'statistic', 'torvalds', 'enrapture', 'sanctions', 'bearish', 'roentgen', 'cultured', 'fucks', 'leakier', 'stalkings', 'bingo', 'bonitoes', 'affected', 'bonitos', 'targeted', 'obtusely', 'plugging', 'parthenon', 'nocturnes', 'etches', 'goodbye', 'billeting', 'russel', 'hypnotize', 'deriving', 'assay', 'nuzzling', 'marketers', 'oliver', 'flyovers', 'scalawags', 'fizziest', 'purl', 'cassatt', 'same', 'remove', 'hosteled', 'kinda', 'laurie', 'flab', 'expresses', 'swirls', 'coifing', 'snafu', 'piquant', 'murphy', 'speedways', 'stoneware', 'outskirts', 'moss', 'averse', 'picnics', 'vulture', 'ginsu', 'prosper', 'tenting', 'mingus', 'caulkings', 'duality', 'thrushes', 'cosmic', 'tromped', 'employs', 'soldiered', 'pleasured', 'baddest', 'tweets', 'dowel', 'decimated', 'examining', 'relay', 'quartered', 'rabbis', 'scripts', 'sara', 'cepheid', 'stopovers', 'chammies', 'mishap', 'cantons', 'thorpe', 'doffing', 'misplays', 'pinker', 'ara', 'depress', 'cogency', 'amorally', 'moron', 'pencils', 'guardian', 'implicit', 'punchline', 'petiole', 'portaged', 'marcie', 'bandy', 'delved', 'rouges', 'sick', 'misdeals', 'realtors', 'mccartney', 'dyeing', 'smithson', 'souths', 'balloting', 'patter', 'tortillas', 'norbert', 'hike', 'vanning', 'entwines', 'sugarcane', 'paces', 'tidbits', 'adobe', 'bandies', 'grouchy', 'gizmos', 'viaduct', 'dentures', 'validate', 'billfold', 'hardiest', 'dietetic', 'bellboys', 'lintel', 'grandmas', 'doctorow', 'tubers', 'ageless', 'metro', 'surliest', 'renegades', 'marvell', 'estranges', 'claiborne', 'caucuses', 'previewed', 'abuts', 'bodice', 'lin', 'inbred', 'foley', 'shrills', 'harangue', 'measures', 'alphabets', 'flusher', 'heaped', 'cleanup', 'mantegna', 'nimbly', 'anythings', 'beautify', 'watch', 'clique', 'armistice', 'interplay', 'wrappers', 'grosbeaks', 'uproots', 'cottages', 'sleighs', 'granulate', 'doorsteps', 'regent', 'cheesier', 'waite', 'richly', 'vacuumed', 'niftiest', 'totems', 'dyers', 'wilda', 'hormonal', 'cognizant', 'ordain', 'samples', 'frying', 'peony', 'teamsters', 'malt', 'plankton', 'growers', 'rub', 'grandads', 'larvas', 'pronounce', 'tenancies', 'intensity', 'mushiness', 'emotion', 'slays', 'vigilante', 'tonguing', 'onerous', 'nemesis', 'repeaters', 'slurping', 'grosz', 'modelled', 'tidies', 'hurled', 'patriarch', 'relapses', 'kin', 'briefs', 'blabbing', 'excavates', 'crude', 'bankbook', 'ballasts', 'intruding', 'silting', 'cantatas', 'springing', 'corrected', 'across', 'yearning', 'eviction', 'lax', 'element', 'goldener', 'chose', 'converged', 'spectrums', 'roguish', 'gird', 'repairing', 'july', 'tampons', 'pressed', 'denoting', 'captivity', 'lionel', 'sussex', 'sob', 'wonder', 'deducted', 'reverts', 'injection', 'brattiest', 'cancer', 'subverts', 'frederic', 'sisters', 'cotes', 'glitz', 'tarots', 'bemoaned', 'mantillas', 'silicate', 'count', 'volunteer', 'jelled', 'bedazzled', 'troupe', 'bidders', 'leona', 'olympiads', 'handballs', 'maligned', 'skimped', 'mayans', 'retinas', 'assembly', 'hanger', 'imogene', 'greet', 'waldheim', 'react', 'shakier', 'cinching', 'cancerous', 'hellebore', 'horseback', 'smoothy', 'madrigals', 'iambic', 'gabrielle', 'brows', 'pursuant', 'gloom', 'honks', 'excrete', 'bevel', 'linton', 'writings', 'viands', 'cord', 'sargent', 'pursuer', 'agility', 'crecy', 'inclusive', 'cosigned', 'ojibwa', 'rouging', 'thrash', 'panda', 'coffeepot', 'glazing', 'minatory', 'frustrate', 'example', 'weizmann', 'augur', 'amalgams', 'perches', 'dublin', 'unwilling', 'stoical', 'massaged', 'ruble', 'buoy', 'frequent', 'stopped', 'yerevan', 'keynes', 'cybele', 'depositor', 'tromps', 'dummy', 'comeback', 'boron', 'banned', 'troubled', 'reformer', 'rocketed', 'molester', 'lilted', 'wolfgang', 'defeats', 'tabooed', 'powerful', 'lambed', 'lodestar', 'requires', 'beauteous', 'jaguars', 'phantom', 'smarten', 'browbeats', 'firmer', 'died', 'zoloft', 'quasar', 'alarmed', 'osceola', 'twiddles', 'snipped', 'tamable', 'warps', 'bradley', 'miscounts', 'screeched', 'neatly', 'gummy', 'attach', 'verne', 'filberts', 'recipe', 'cavity', 'corollary', 'whet', 'graded', 'toni', 'burnous', 'impelling', 'lobster', 'copycats', 'exhorting', 'cause', 'knaves', 'abided', 'wilkins', 'toilet', 'mavins', 'cockpits', 'shapely', 'printouts', 'sequitur', 'silvering', 'burks', 'doused', 'scouting', 'anyway', 'win', 'hatsheput', 'orientate', 'compress', 'yolks', 'detailing', 'katydid', 'whipcord', 'brushes', 'tricepses', 'retorted', 'yates', 'exalted', 'preppiest', 'vaguely', 'grocer', 'caster', 'patching', 'smithies', 'rebind', 'infringes', 'darius', 'tabbed', 'meccas', 'spawned', 'caloocan', 'bound', 'pickings', 'slovens', 'vase', 'fizzier', 'readier', 'agustin', 'myanmar', 'pep', 'epoxied', 'bernbach', 'digress', 'wail', 'nice', 'occlusion', 'lingual', 'strafe', 'hellhole', 'matures', 'pshaw', 'inveigles', 'somehow', 'algebras', 'bandier', 'fading', 'midweeks', 'rubdowns', 'acrid', 'favorites', 'cotter', 'arabic', 'lardner', 'sublease', 'flattens', 'firefight', 'politics', 'enfeeble', 'wallaby', 'reliving', 'pounded', 'stanched', 'pianist', 'ballsiest', 'rivalry', 'disliked', 'ceaseless', 'shoulder', 'locally', 'gluttons', 'bites', 'marshier', 'loosest', 'vanillas', 'galahad', 'monks', 'hifalutin', 'loathed', 'artifices', 'electors', 'deathtrap', 'sewn', 'veiling', 'silvan', 'perry', 'gravest', 'snap', 'repeats', 'potshots', 'michel', 'let', 'warning', 'twinning', 'bibs', 'firstly', 'puck', 'deviled', 'free', 'viennese', 'recopied', 'chorusing', 'yocks', 'motrin', 'whence', 'pivot', 'mandalay', 'cavils', 'gabbled', 'driers', 'toboggan', 'canisters', 'unsettles', 'airfield', 'tots', 'kennels', 'motorways', 'grouse', 'guffawed', 'milieux', 'begot', 'rolex', 'bawled', 'crispness', 'hafiz', 'purchased', 'simon', 'inmate', 'mottoes', 'sirs', 'exotics', 'smoulders', 'formula', 'walkman', 'sizzling', 'spaniels', 'quivers', 'remember', 'pious', 'rippled', 'gulling', 'orneriest', 'pestles', 'schmoozed', 'nitwits', 'ducts', 'lounged', 'unneeded', 'roughly', 'clubfoot', 'puffins', 'mid', 'affixing', 'walleyed', 'heave', 'grooved', 'conned', 'atrocity', 'relaxing', 'jeri', 'vizier', 'thralldom', 'nikki', 'cured', 'jonah', 'orderlies', 'plexuses', 'wheeziest', 'tatars', 'imps', 'mass', 'wets', 'neighed', 'sassanian', 'approved', 'overdrawn', 'planck', 'swisses', 'esophagi', 'outsold', 'robing', 'parses', 'sedater', 'segment', 'vendetta', 'chukchi', 'oversees', 'godfather', 'jalopy', 'garbanzo', 'cuttings', 'snorted', 'birdhouse', 'retooling', 'carfare', 'exerting', 'crosser', 'timeworn', 'cosigns', 'cuneiform', 'reeved', 'has', 'doggie', 'waster', 'barbells', 'grinning', 'burgeons', 'multi', 'shrimps', 'limbless', 'patellae', 'trouser', 'proctor', 'emigrated', 'crony', 'padded', 'utensils', 'buyers', 'moses', 'brigs', 'tobacco', 'urbanized', 'minnie', 'shorn', 'gonging', 'samarkand', 'faked', 'yammering', 'settable', 'goods', 'hertzes', 'dynamic', 'dulls', 'clarke', 'asserting', 'wassails', 'veal', 'divulges', 'anarchist', 'dictation', 'aztec', 'exhaled', 'kidnapped', 'manner', 'pomade', 'stockaded', 'cannibals', 'starching', 'freetown', 'slugged', 'cheekier', 'reran', 'shims', 'felice', 'yelping', 'stop', 'yearbooks', 'cello', 'revalues', 'cutesiest', 'crunched', 'megatons', 'finalizes', 'wizened', 'etching', 'slashed', 'fuzzed', 'muggings', 'pinches', 'digit', 'gaslights', 'procuring', 'sarcasm', 'sedan', 'kuznetsk', 'qaddafi', 'deafen', 'gleamed', 'appeals', 'unison', 'fdr', 'pockmark', 'hankers', 'upcountry', 'nearer', 'forenoons', 'knievel', 'bathhouse', 'pict', 'metaphor', 'assizes', 'ascribed', 'menzies', 'faculties', 'shares', 'panting', 'docudrama', 'poach', 'fleshed', 'equators', 'feeling', 'prankster', 'sailed', 'tamera', 'wiggle', 'sampson', 'pointedly', 'tormentor', 'jenny', 'rinds', 'almanac', 'saunters', 'nobility', 'prefixed', 'regard', 'zaniest', 'reveler', 'meh', 'tenement', 'dactyls', 'roberto', 'sadist', 'zillions', 'endanger', 'hope', 'weds', 'pervading', 'dinah', 'guyana', 'wordplay', 'traveler', 'judgeship', 'impurer', 'libel', 'dresden', 'doghouses', 'slakes', 'palpating', 'housing', 'datives', 'dowses', 'jobless', 'phrases', 'commodes', 'mats', 'basie', 'andy', 'pedestal', 'olivetti', 'bandanas', 'flammable', 'sand', 'truism', 'eloise', 'polished', 'cocksure', 'missilery', 'sublime', 'responded', 'moved', 'drastic', 'petard', 'voracity', 'racemes', 'imaginary', 'horology', 'located', 'strives', 'relied', 'stalwart', 'doors', 'riflemen', 'sew', 'reunion', 'amnesiacs', 'hedonists', 'wearies', 'madness', 'ridding', 'barton', 'jauntier', 'stuttgart', 'cabral', 'repair', 'divulged', 'phyla', 'rents', 'asteroids', 'elam', 'dominic', 'accusing', 'toe', 'exiling', 'embosses', 'maples', 'squirming', 'cambered', 'beseeches', 'edam', 'nate', 'disdained', 'bowery', 'vivify', 'rampaging', 'cast', 'cerebra', 'antitrust', 'mucky', 'dolt', 'malinger', 'net', 'firewalls', 'into', 'thawing', 'emphatic', 'mate', 'julia', 'briquet', 'bonnier', 'inflect', 'learns', 'whorls', 'coat', 'winfred', 'alec', 'nonmember', 'profiteer', 'gustier', 'sired', 'plateaus', 'reflex', 'fueling', 'forgave', 'stupors', 'jamaican', 'pestilent', 'champagne', 'dowsing', 'pralines', 'roadster', 'chucks', 'happen', 'reddening', 'dabbed', 'cheyenne', 'roadhouse', 'restocked', 'camisoles', 'bugs', 'bergen', 'neckline', 'earldoms', 'gonzales', 'moguls', 'headrests', 'gunned', 'fonts', 'braque', 'rallies', 'transfers', 'impromptu', 'ellie', 'grover', 'oleanders', 'maldives', 'cockatoos', 'levees', 'dumfound', 'northrup', 'vitamin', 'depressed', 'slinging', 'vitiates', 'bullshits', 'brahmans', 'inflected', 'revisit', 'glossy', 'spica', 'excreta', 'genoa', 'furloughs', 'unworthy', 'usenet', 'conjoined', 'jesuit', 'radiantly', 'raccoon', 'weller', 'leeched', 'inning', 'rebuilt', 'ingrained', 'fungicide', 'ewers', 'timidly', 'exuberant', 'rapine', 'thor', 'hijack', 'johnathon', 'sufi', 'deployed', 'miner', 'wearers', 'blurring', 'violet', 'suavity', 'keeling', 'aztecan', 'blazed', 'only', 'hymn', 'revocable', 'stout', 'meatloaf', 'gibbs', 'likening', 'limitless', 'brenner', 'grads', 'redgrave', 'monoxides', 'fleshiest', 'sternly', 'barge', 'columned', 'reverence', 'traveled', 'dialyses', 'mousiness', 'pigsty', 'outsmart', 'singular', 'absolve', 'overview', 'webmaster', 'perfectly', 'breakable', 'agreeably', 'overbook', 'shadowy', 'tarried', 'hummus', 'viler', 'maligning', 'athabasca', 'templates', 'yemeni', 'medicine', 'obduracy', 'seashore', 'genres', 'squeakier', 'medal', 'chambers', 'laundry', 'brine', 'privilege', 'maven', 'minolta', 'pluckier', 'fast', 'shingling', 'nigher', 'husband', 'betsy', 'elysian', 'berta', 'spankings', 'ravens', 'junketed', 'profaning', 'canberra', 'starlight', 'lend', 'gnarliest', 'woodshed', 'rancher', 'murasaki', 'outgrown', 'toy', 'drouths', 'libellers', 'overseas', 'strafes', 'edit', 'allying', 'lizzie', 'ducklings', 'knot', 'saracen', 'cockatoo', 'yakima', 'wicket', 'rioted', 'pursuit', 'akita', 'threefold', 'dung', 'professor', 'johnathan', 'semites', 'massacred', 'populates', 'applying', 'countably', 'diary', 'confined', 'volstead', 'deducting', 'slavonic', 'trifles', 'mingled', 'enemies', 'sampling', 'carpenter', 'commando', 'hearer', 'rowdiest', 'common', 'wheat', 'abscesses', 'flatbed', 'lying', 'fewest', 'gringos', 'communism', 'albums', 'reload', 'pullouts', 'paar', 'gazebo', 'bares', 'turpin', 'wrack', 'finny', 'unruly', 'unloved', 'conceited', 'lifespans', 'heroic', 'creole', 'parades', 'peacetime', 'sharped', 'pyorrhea', 'frailties', 'contact', 'pillages', 'yummier', 'agra', 'mull', 'solitaire', 'factions', 'outweighs', 'catalysts', 'golfer', 'bridged', 'energizes', 'fixative', 'assistant', 'poirot', 'weepier', 'chaos', 'raincoat', 'fortunate', 'falsified', 'recruited', 'idiotic', 'residues', 'login', 'sierra', 'dewy', 'conrail', 'cassias', 'shrewd', 'sugary', 'pigpen', 'bursted', 'motorboat', 'did', 'detoxes', 'earnest', 'gelid', 'fares', 'incision', 'incurs', 'scurviest', 'pavarotti', 'zebras', 'airdrop', 'dissing', 'maoris', 'clime', 'heehaw', 'wigeons', 'grows', 'falser', 'slurped', 'heating', 'overpass', 'menders', 'bologna', 'devi', 'rein', 'respond', 'slippages', 'innocents', 'begged', 'medium', 'cadging', 'novellas', 'nichiren', 'casing', 'integral', 'ringing', 'regicides', 'preachier', 'rebounds', 'pretence', 'writhe', 'kermit', 'urchin', 'cabals', 'duodena', 'deluges', 'dowsed', 'regaling', 'czarinas', 'benelux', 'thurmond', 'rhythms', 'cacao', 'rerouting', 'harvest', 'ashes', 'aguilar', 'blousing', 'stanch', 'accuses', 'vocals', 'crossing', 'showgirl', 'overturn', 'swinger', 'securing', 'woodiness', 'lapidary', 'biassing', 'ethics', 'city', 'brahmins', 'averaging', 'caesuras', 'cymbal', 'curtsying', 'napes', 'digitizes', 'assessor', 'twitter', 'welkin', 'groovier', 'reflexive', 'granada', 'pussycat', 'cute', 'yarns', 'clingy', 'discolor', 'nuanced', 'bucketed', 'weaving', 'alliance', 'jackson', 'touches', 'cantors', 'devoid', 'thymuses', 'halls', 'neuritis', 'peach', 'overhand', 'supports', 'airiness', 'crap', 'sabik', 'darnell', 'pileups', 'nigerians', 'prozac', 'judge', 'missouri', 'totally', 'hometown', 'annexes', 'grub', 'vocalist', 'lack', 'awakened', 'fairway', 'stuccos', 'deluged', 'derrida', 'sacrament', 'blacklist', 'arthritis', 'striped', 'stepped', 'rapacity', 'snapping', 'sherwood', 'oddball', 'queered', 'woodward', 'spinets', 'cagy', 'fractured', 'indicted', 'clorox', 'clubbed', 'decants', 'sinks', 'duration', 'isaiah', 'learnt', 'ampuls', 'marrying', 'overstock', 'producers', 'infatuate', 'sentry', 'grosbeak', 'log', 'hooted', 'add', 'dubcek', 'noisier', 'lenoir', 'decreeing', 'leisure', 'machetes', 'nobody', 'develop', 'overact', 'mescals', 'shillalah', 'seder', 'illegals', 'judases', 'scats', 'notions', 'feinting', 'equity', 'ramrod', 'mirrored', 'rascally', 'canvases', 'shadowier', 'eyestrain', 'boys', 'relate', 'scabbiest', 'thumbed', 'symbol', 'drill', 'bungalow', 'feces', 'pawpaws', 'agencies', 'syriac', 'furze', 'reeks', 'slim', 'waldo', 'knopf', 'romeo', 'footings', 'redheaded', 'sheep', 'scroll', 'stumping', 'craftily', 'chicano', 'ancients', 'pharisees', 'homered', 'sap', 'uniform', 'bleeds', 'glorious', 'gnarl', 'alnilam', 'wrong', 'crowed', 'relating', 'simpsons', 'quay', 'spastic', 'bequest', 'revenues', 'recoups', 'wounds', 'bayonet', 'damnable', 'supplier', 'fixable', 'disposal', 'honester', 'macrocosm', 'policing', 'genealogy', 'acerbic', 'pages', 'baby', 'turves', 'tinfoil', 'hairless', 'truant', 'pelee', 'maui', 'emilia', 'knox', 'smoothly', 'duelists', 'reheats', 'provider', 'aided', 'subtitle', 'lexus', 'opulence', 'treasure', 'equaled', 'mixtec', 'diagonal', 'galactic', 'exposing', 'raunchy', 'grimes', 'summon', 'unzipped', 'diereses', 'flushing', 'density', 'allegra', 'body', 'kansas', 'cornstalk', 'binging', 'pistil', 'haling', 'hawing', 'reaching', 'educator', 'duelling', 'sties', 'bayous', 'existed', 'vapor', 'fests', 'spearmint', 'deafer', 'lutherans', 'kelli', 'verbosity', 'whinier', 'megaphone', 'rhubarb', 'lurking', 'ubs', 'mainstay', 'bligh', 'decoys', 'noncoms', 'scantily', 'cruelties', 'aaron', 'luckier', 'strewn', 'germinate', 'illness', 'shackling', 'privet', 'preset', 'oxygenate', 'decal', 'rockne', 'thracian', 'clawing', 'range', 'during', 'lemon', 'revenges', 'manes', 'greenwich', 'tinkled', 'likely', 'rainstorm', 'vamoose', 'expensive', 'okra', 'programed', 'pooping', 'patriotic', 'gamin', 'gassier', 'mussels', 'earths', 'gripped', 'connect', 'accessing', 'displaced', 'chirruped', 'snuffbox', 'trustee', 'trampling', 'wranglers', 'caravans', 'snuffed', 'azov', 'tush', 'treading', 'richards', 'caesurae', 'thimbu', 'phoebes', 'timelier', 'mutants', 'kidnapers', 'expedited', 'demeter', 'reassure', 'sloven', 'holing', 'swearer', 'corruptly', 'lank', 'sip', 'retching', 'periods', 'canvasing', 'farragut', 'crossroad', 'batteries', 'cavil', 'delaney', 'gainsaid', 'oddest', 'placard', 'infamies', 'verandah', 'paradises', 'yaqui', 'adorns', 'craws', 'palled', 'mamie', 'starless', 'owens', 'allstate', 'suiting', 'sole', 'saratov', 'lividly', 'wronged', 'douse', 'kodak', 'heuristic', 'bootleg', 'cousteau', 'finch', 'gadabout', 'ampler', 'martial', 'churned', 'lavoisier', 'yogis', 'meets', 'awakening', 'obliging', 'tiniest', 'descants', 'hades', 'plexiglas', 'rattiest', 'ether', 'ran', 'hologram', 'windstorm', 'washer', 'bruskness', 'cobra', 'uncharted', 'pastoral', 'slackware', 'mannish', 'copping', 'overshoes', 'hip', 'diderot', 'condos', 'lumpier', 'signposts', 'today', 'brooked', 'loiterer', 'lodger', 'seniority', 'coverlet', 'orgasmic', 'paulette', 'murkier', 'morita', 'witless', 'rids', 'requested', 'unmissed', 'keening', 'managed', 'politicos', 'hooding', 'steuben', 'contented', 'earthworm', 'singled', 'coinages', 'aubrey', 'fuentes', 'plaiting', 'apex', 'fitness', 'omissions', 'terkel', 'beria', 'shudders', 'attar', 'spies', 'blade', 'peoples', 'hypnosis', 'fisheries', 'imposing', 'hatchets', 'liberties', 'commodity', 'papyruses', 'handout', 'regional', 'vividness', 'mousier', 'daintier', 'partly', 'lambaste', 'saddlebag', 'raindrop', 'transmits', 'styluses', 'planet', 'rifleman', 'dryers', 'clarify', 'lazily', 'fortunes', 'canceling', 'lamest', 'sigurd', 'harked', 'ratty', 'kieth', 'deplores', 'evaluated', 'wiser', 'lenin', 'moore', 'afterword', 'woollies', 'fulness', 'lyell', 'transacts', 'gourds', 'schticks', 'fakir', 'solarium', 'yardages', 'rapiers', 'rooks', 'perkins', 'donahue', 'breaching', 'right', 'srinagar', 'chromed', 'faucet', 'draftiest', 'defrayal', 'kusch', 'stateroom', 'manages', 'credenza', 'hebrew', 'sausages', 'obscene', 'sprucing', 'sucked', 'rutgers', 'reunited', 'turbid', 'scathing', 'serbia', 'salvos', 'gambia', 'bounties', 'glitters', 'obviously', 'pickerels', 'cauldron', 'horseman', 'lubing', 'scott', 'mentioned', 'sweepings', 'agnes', 'shiva', 'allotted', 'myles', 'acrider', 'windburn', 'curving', 'parents', 'predicate', 'riggs', 'pleaded', 'fogeys', 'jami', 'moments', 'skewing', 'depiction', 'louisiana', 'collared', 'idols', 'assaults', 'rewarded', 'ramify', 'jaime', 'day', 'farrows', 'barreled', 'sneering', 'assigned', 'claudius', 'heresies', 'shipyard', 'ruins', 'waddles', 'walruses', 'hint', 'meatiest', 'frilly', 'imagine', 'triumphal', 'mimes', 'honeydew', 'strength', 'triceps', 'juniors', 'withstand', 'snorting', 'flogging', 'milch', 'vidal', 'excised', 'freud', 'paprika', 'subsumed', 'cornrows', 'abraded', 'jinni', 'cindering', 'tingeing', 'spanner', 'strangled', 'terri', 'spiders', 'magoo', 'consuming', 'towed', 'brash', 'caspian', 'governed', 'enjoying', 'prides', 'frump', 'grunted', 'jells', 'pinched', 'blasters', 'passing', 'sofa', 'octal', 'shininess', 'marmosets', 'pancreas', 'bagging', 'corridors', 'blaming', 'tharp', 'bridled', 'matador', 'geraniums', 'tapers', 'xmas', 'consonant', 'conveyed', 'clasp', 'docket', 'serenest', 'benz', 'barnaul', 'florida', 'gustatory', 'rareness', 'xanthippe', 'gasp', 'writs', 'earphones', 'formatted', 'huang', 'dickered', 'delineate', 'proclaim', 'sewerage', 'aglaia', 'winced', 'barefaced', 'causality', 'linker', 'baneful', 'extruding', 'dawdlers', 'impugn', 'vellum', 'tendency', 'membrane', 'garlic', 'mismanage', 'yearn', 'huskiest', 'eyeballed', 'snowbelt', 'historian', 'saving', 'delano', 'alcatraz', 'solids', 'apprise', 'pooch', 'sloshed', 'headlined', 'trifectas', 'warns', 'trinity', 'timbuktu', 'longboats', 'loopiest', 'darn', 'banshees', 'stickups', 'patents', 'cusps', 'receipt', 'dome', 'clusters', 'definite', 'deana', 'bassinets', 'academy', 'perverse', 'nat', 'ins', 'eiffel', 'marked', 'runnier', 'lusher', 'shrouded', 'theism', 'uphold', 'laptop', 'vagaries', 'gauguin', 'snootiest', 'masters', 'napalms', 'paunchy', 'greets', 'peninsula', 'flypaper', 'grafters', 'adverser', 'mashers', 'escorted', 'renewed', 'bindings', 'edgy', 'welcoming', 'focus', 'irene', 'sanders', 'interlard', 'rawhide', 'carboloy', 'haircuts', 'billows', 'ordinary', 'ashy', 'doggies', 'navigate', 'librarian', 'horseshoe', 'constrain', 'sorry', 'caret', 'obscenely', 'tarmacs', 'household', 'neediness', 'owns', 'rattling', 'sightless', 'sloughs', 'unplug', 'jauntiest', 'undertow', 'twitch', 'camus', 'populist', 'priory', 'saucer', 'pudgy', 'incorrect', 'hardships', 'cavilled', 'slantwise', 'collapses', 'linnet', 'pushups', 'mouthing', 'titanium', 'uncounted', 'timbre', 'linda', 'shuteye', 'steeples', 'skipped', 'imprisons', 'retinues', 'crullers', 'kiosk', 'burst', 'cervix', 'thereon', 'caws', 'urinals', 'equating', 'schism', 'ranking', 'begets', 'gabbiest', 'customers', 'romper', 'badgering', 'camacho', 'wilburn', 'electric', 'windpipe', 'gallop', 'bulgiest', 'wended', 'sneakiest', 'turd', 'wives', 'undercoat', 'toweling', 'untried', 'amputate', 'hoping', 'shrillest', 'pun', 'licorice', 'cadges', 'hordes', 'fredric', 'brie', 'reflects', 'chastises', 'anaemic', 'mediocre', 'sleepier', 'cid', 'fogging', 'oversize', 'blackened', 'priestley', 'deckhands', 'clomped', 'octopus', 'condenses', 'mcclain', 'sweetmeat', 'balloon', 'ads', 'augustan', 'polestars', 'roasting', 'eminently', 'gory', 'scrubs', 'strumming', 'burka', 'ismail', 'wrinklier', 'foxholes', 'hardliner', 'pocket', 'grange', 'bridals', 'mavericks', 'persons', 'jewry', 'legalizes', 'frugality', 'overtaxed', 'shawls', 'helpings', 'rho', 'kevorkian', 'zapata', 'helped', 'lifework', 'invested', 'tzars', 'extremely', 'sneaking', 'revving', 'sorcerer', 'dustpans', 'baritone', 'stray', 'astrakhan', 'sextettes', 'jumpsuit', 'humored', 'initiates', 'wowed', 'feebler', 'sketchy', 'sugars', 'cherubims', 'hiding', 'peculiar', 'rival', 'cashmere', 'consisted', 'nebulae', 'waviest', 'mutt', 'receives', 'sharps', 'mushy', 'hyphening', 'palmyra', 'filet', 'scald', 'sawmills', 'rematches', 'food', 'nonunion', 'rim', 'foresails', 'prokofiev', 'marring', 'scent', 'mailings', 'estuary', 'anzac', 'exciting', 'unwonted', 'struggle', 'graceless', 'backpack', 'delusion', 'deadbolt', 'primeval', 'teals', 'websites', 'llama', 'legend', 'matzoh', 'outposts', 'arbitrary', 'fondles', 'rattle', 'shavings', 'loafer', 'layer', 'waggled', 'locke', 'elongates', 'keyed', 'compost', 'marciano', 'margins', 'rooster', 'kindled', 'pis', 'chinned', 'busheling', 'nutshell', 'basements', 'eurasian', 'gripe', 'noonday', 'seduces', 'gymnasium', 'firesides', 'cupped', 'monickers', 'early', 'milers', 'regain', 'outsides', 'petrarch', 'daffodil', 'placental', 'mirage', 'peeved', 'arrange', 'gerber', 'slopped', 'lhotse', 'angelina', 'selenium', 'grumbles', 'maltreats', 'gloaming', 'lorena', 'novocain', 'emaciated', 'whispered', 'flanked', 'scourging', 'shasta', 'harpy', 'permutes', 'orville', 'boldface', 'vaunts', 'unctions', 'attract', 'weave', 'oersted', 'shiners', 'enamored', 'gadding', 'demoting', 'hansom', 'tallied', 'tauter', 'sprout', 'salt', 'tainted', 'launched', 'diffident', 'sweat', 'stapled', 'callisto', 'masaryk', 'getting', 'impolite', 'slowly', 'horus', 'blurry', 'darned', 'squattest', 'snyder', 'crooks', 'tousling', 'bemoaning', 'plucking', 'harmonics', 'asturias', 'raped', 'latina', 'sly', 'admired', 'amnesia', 'longed', 'upstage', 'conning', 'alluring', 'directest', 'abated', 'balminess', 'have', 'blacktops', 'eben', 'fathers', 'noised', 'convulsed', 'woodenest', 'seljuk', 'pleat', 'disguise', 'pinto', 'beefiest', 'grannie', 'brahms', 'mickie', 'benny', 'secondly', 'angelic', 'yalow', 'pettifogs', 'draft', 'hectare', 'coolie', 'lacquered', 'vicarage', 'buttoned', 'poop', 'chanced', 'viscous', 'endorses', 'cretin', 'burring', 'sullenest', 'molls', 'triple', 'charcoal', 'attack', 'hewing', 'pal', 'aimed', 'repeater', 'reprisal', 'tool', 'resources', 'bicuspids', 'mansion', 'addiction', 'undercut', 'sterility', 'bayberry', 'quoted', 'rottenest', 'warlock', 'applicant', 'gruelings', 'misreads', 'coincides', 'yelling', 'misdid', 'archly', 'carrillo', 'knudsen', 'crossbred', 'startle', 'ivanhoe', 'fillip', 'husked', 'atelier', 'assist', 'mona', 'rhombuses', 'pawns', 'banknotes', 'unseated', 'anthills', 'legal', 'faintly', 'headiest', 'factoring', 'specify', 'preparing', 'crowds', 'topping', 'demo', 'graces', 'nasals', 'cadgers', 'architect', 'kshatriya', 'gompers', 'clones', 'lovers', 'jackass', 'flippant', 'brandeis', 'malted', 'lay', 'libelous', 'mainmast', 'longingly', 'solder', 'marksmen', 'change', 'enduring', 'snuggest', 'oatmeal', 'pouncing', 'mistrials', 'bridle', 'enthrall', 'janacek', 'domains', 'trivet', 'integrate', 'comports', 'jurassic', 'summits', 'chive', 'trinket', 'annuls', 'motility', 'purcell', 'ruptured', 'blintze', 'scythia', 'juliet', 'hopefully', 'reject', 'poignancy', 'tactic', 'anguish', 'calypsos', 'concepts', 'outcast', 'parroted', 'ark', 'aryans', 'janie', 'absently', 'berrying', 'cower', 'kamikaze', 'communal', 'hypo', 'mamma', 'humorist', 'sombreros', 'comer', 'licenses', 'mutuality', 'tatum', 'burgled', 'spacing', 'shimmed', 'classmate', 'hacks', 'answer', 'execs', 'kisser', 'blinked', 'snarkiest', 'admirably', 'cruddiest', 'feisty', 'deducing', 'embark', 'teacups', 'antlers', 'elevates', 'marinated', 'angler', 'expunge', 'adan', 'vamp', 'reordered', 'censored', 'answers', 'gambled', 'pablum', 'ism', 'unhitches', 'timpanist', 'habitual', 'scrubbier', 'perfects', 'fluky', 'coiffured', 'jabbers', 'hardest', 'drenching', 'musk', 'eels', 'bitterns', 'brandie', 'official', 'deflated', 'terry', 'biscuits', 'shinning', 'greeting', 'redoubt', 'matrixes', 'cistern', 'illegibly', 'gloria', 'upsurging', 'onsager', 'maxilla', 'susan', 'toastier', 'allies', 'aspirins', 'rock', 'thump', 'trey', 'mercies', 'masthead', 'benefice', 'festal', 'eraser', 'crepes', 'guesses', 'peiping', 'austere', 'womb', 'furies', 'plainest', 'liquor', 'colossus', 'noses', 'rosette', 'dimwitted', 'somber', 'lancer', 'alfredo', 'enos', 'dourest', 'mushiest', 'hesitates', 'molest', 'cassocks', 'aweigh', 'buzzing', 'asides', 'broach', 'olympics', 'refreshed', 'belles', 'swaddle', 'orchids', 'hermite', 'valenti', 'december', 'unscathed', 'docent', 'pelleting', 'warding', 'texturing', 'carter', 'minor', 'crumbier', 'bantu', 'choose', 'brush', 'rachael', 'artlessly', 'fault', 'tabu', 'injured', 'vitriolic', 'kickoff', 'tattoo', 'humidify', 'scuffle', 'innuendos', 'durant', 'arousal', 'stirrer', 'waned', 'sprats', 'ensued', 'jottings', 'baggage', 'snappiest', 'unearthed', 'hats', 'junked', 'bough', 'audience', 'trounced', 'motors', 'nether', 'neologism', 'gantry', 'dredged', 'duvalier', 'sustained', 'magnate', 'comfiest', 'dossiers', 'focuses', 'bentham', 'erosive', 'fattest', 'reformed', 'puffer', 'shtik', 'upmarket', 'opium', 'cuddle', 'piper', 'padlocked', 'briskets', 'spittoon', 'apart', 'contacted', 'scalp', 'seven', 'encourage', 'thief', 'rosary', 'sticker', 'rojas', 'winnings', 'catnaps', 'adds', 'convenes', 'enslaved', 'year', 'poured', 'thoth', 'plutocrat', 'prefixing', 'bulimic', 'ramon', 'bellicose', 'accrual', 'priciest', 'joaquin', 'stockpile', 'kurtis', 'claiming', 'goudas', 'outfox', 'ribbon', 'lyon', 'rakes', 'vane', 'puckett', 'lipsticks', 'actaeon', 'turmoil', 'mobility', 'work', 'perkier', 'goutiest', 'burrs', 'rewinding', 'cantered', 'omitted', 'swastika', 'drowned', 'sic', 'mordred', 'dwarf', 'canopying', 'crawls', 'crashes', 'doily', 'wasteland', 'moody', 'designers', 'keisha', 'floppiest', 'karyn', 'schusses', 'hokum', 'snippier', 'wedding', 'porous', 'overpower', 'jangle', 'vertices', 'chomp', 'puns', 'flush', 'wagons', 'courier', 'criminal', 'splotches', 'keeps', 'immodesty', 'bigamy', 'bronchos', 'minuses', 'database', 'clinks', 'ethnics', 'buy', 'prophecy', 'orbiting', 'stressful', 'conjurors', 'larry', 'alighting', 'pegasus', 'firsts', 'locoweeds', 'sacking', 'gateposts', 'holdover', 'tempering', 'giggly', 'devotee', 'moveable', 'phloem', 'tropism', 'bandying', 'gash', 'mumblers', 'snowshed', 'marcelo', 'diagnoses', 'stygian', 'exorcise', 'arguably', 'nip', 'refurbish', 'morbidity', 'jitneys', 'graven', 'varmint', 'flunks', 'pompey', 'petition', 'weeks', 'pythias', 'papacies', 'salvaged', 'candles', 'croissant', 'rebinding', 'retreat', 'atypical', 'content', 'pediments', 'endwise', 'learning', 'eugene', 'brainiest', 'uppercuts', 'stranded', 'composer', 'inexpert', 'hilarity', 'hurry', 'ninja', 'calmly', 'howler', 'toffee', 'anchovies', 'chives', 'appellate', 'yieldings', 'undersell', 'loutish', 'luaus', 'marquette', 'tax', 'fosters', 'coo', 'impeach', 'feinted', 'leftovers', 'endowment', 'jeers', 'finaglers', 'manse', 'sieve', 'mortal', 'vaseline', 'riposting', 'obscurest', 'matured', 'outlawing', 'filing', 'furrow', 'handcuff', 'evian', 'lodged', 'notifies', 'masks', 'dowagers', 'godparent', 'dished', 'artless', 'hunkering', 'started', 'gnawed', 'bastions', 'rawest', 'gins', 'yeshivah', 'uncorked', 'costumed', 'spiking', 'pigment', 'rasped', 'hastens', 'blood', 'carryout', 'racehorse', 'synch', 'canting', 'hinds', 'desisting', 'flogged', 'junctions', 'wrongness', 'seraph', 'dreamily', 'vixen', 'monthlies', 'both', 'caldwell', 'funafuti', 'adopt', 'wrinklies', 'sharable', 'smites', 'mascot', 'guessable', 'postmen', 'bathers', 'gyrating', 'mustiness', 'leaped', 'granary', 'hanker', 'meshing', 'chasuble', 'palaver', 'sower', 'defendant', 'unicorns', 'buyout', 'scales', 'heshvan', 'overturns', 'katowice', 'hubbard', 'akbar', 'hooper', 'pitiable', 'iterator', 'polo', 'runabout', 'venuses', 'livery', 'mack', 'prohibit', 'zeppelins', 'submitter', 'mattock', 'amortizes', 'bus', 'laocoon', 'glued', 'dirac', 'rigged', 'monsieur', 'kamikazes', 'gustavus', 'gentiles', 'cutlery', 'skimpier', 'constable', 'deal', 'resetting', 'curt', 'libretto', 'jonas', 'engrossed', 'sharpest', 'windbag', 'butteries', 'calgary', 'reelected', 'worse', 'resolves', 'ceased', 'entombing', 'racial', 'haul', 'esteems', 'baited', 'silica', 'calculate', 'yeshivot', 'tinselled', 'spookier', 'wining', 'purring', 'greener', 'fallacies', 'royally', 'jumble', 'uproars', 'hos', 'pox', 'plunged', 'idaho', 'whips', 'ruddy', 'mccall', 'dogs', 'collate', 'rowel', 'apparel', 'memories', 'carbide', 'spreading', 'gladiolus', 'potables', 'spice', 'trialed', 'yarmulke', 'devilled', 'marin', 'overdrive', 'successor', 'pepin', 'stomached', 'epsilon', 'periwig', 'meetings', 'cisterns', 'polymaths', 'taunts', 'urge', 'silencing', 'pulps', 'deviated', 'haggling', 'dramatize', 'looming', 'alertly', 'deicer', 'grunting', 'behavior', 'hotelier', 'loewi', 'epitomes', 'underbid', 'square', 'denser', 'flatted', 'floating', 'chipper', 'chicanery', 'financial', 'punches', 'neuralgic', 'astounded', 'sumps', 'clapped', 'mirabeau', 'obtuser', 'queening', 'seethes', 'mongering', 'drafted', 'tugs', 'ablaze', 'bluish', 'caplet', 'calibrate', 'waifs', 'unfrocks', 'patrician', 'limbos', 'yardage', 'spill', 'tailor', 'liberator', 'hardeners', 'tillman', 'realest', 'exclaims', 'windsors', 'rocket', 'custodian', 'equinoxes', 'obscured', 'kabul', 'screeches', 'bickers', 'unplanned', 'backache', 'scaliest', 'rainier', 'mucks', 'delius', 'dilatory', 'torsion', 'elections', 'submerges', 'lander', 'talbot', 'twaddled', 'rachelle', 'checked', 'tellers', 'ganders', 'gimcracks', 'gouges', 'gregorio', 'caroler', 'fluently', 'modesto', 'farces', 'lilt', 'armand', 'withdraws', 'turkestan', 'lorentz', 'sprinter', 'enshrine', 'draped', 'drunkard', 'swashed', 'maturity', 'snowing', 'trims', 'ingenious', 'secretive', 'catchers', 'wobegon', 'bigwigs', 'accounted', 'palsying', 'resenting', 'pebble', 'seabeds', 'uriah', 'demanded', 'lift', 'mercuries', 'slabbed', 'tanned', 'pointy', 'sodomites', 'mather', 'latent', 'arrayed', 'tushes', 'markups', 'whistle', 'connolly', 'sinuses', 'looniest', 'promised', 'debuting', 'pollutant', 'slain', 'wholesome', 'typewrote', 'mystifies', 'mucus', 'stove', 'concur', 'vilifies', 'tufting', 'grapnel', 'mane', 'neruda', 'hicks', 'heaven', 'chaitin', 'outsell', 'barnes', 'nacre', 'sanest', 'header', 'flutist', 'plummets', 'careered', 'drizzled', 'lea', 'bruisers', 'unpick', 'toddles', 'muscatel', 'reeling', 'specific', 'bede', 'cache', 'envied', 'crawfish', 'bimbos', 'zorn', 'mushier', 'resist', 'augusta', 'rumor', 'ethernet', 'buffalo', 'grenade', 'cartons', 'topped', 'maharishi', 'goodlier', 'envying', 'fistfuls', 'sea', 'protruded', 'plentiful', 'rid', 'sulphurs', 'muzzle', 'widen', 'equipment', 'caisson', 'absurdity', 'redoubts', 'sniffling', 'abjectly', 'creator', 'douala', 'sciatica', 'engorges', 'glueing', 'tubman', 'australia', 'crock', 'impose', 'pointed', 'demoing', 'ounces', 'bismarck', 'inmates', 'ignites', 'keyboards', 'santayana', 'booming', 'cleopatra', 'felines', 'praline', 'cynical', 'nettie', 'wardrobe', 'twaddling', 'conjugal', 'raceme', 'proffer', 'pulpy', 'bucolics', 'beagle', 'courtney', 'patenting', 'davits', 'misled', 'chung', 'jute', 'masefield', 'nutrias', 'marvel', 'according', 'clamped', 'rocking', 'calk', 'whiles', 'paragons', 'maddest', 'disavowed', 'roadsides', 'ponder', 'saul', 'diversify', 'specialty', 'epilogues', 'sicken', 'activists', 'hoaxed', 'defectors', 'choker', 'visayans', 'departing', 'ignite', 'subtly', 'purchases', 'exults', 'cerberus', 'enthroned', 'cliff', 'mainframe', 'zachariah', 'creel', 'aglitter', 'hazed', 'abuzz', 'veneers', 'basins', 'hoarder', 'elma', 'swatted', 'sorrel', 'gil', 'ararat', 'graze', 'jars', 'pekoe', 'ithaca', 'acoustic', 'tabbing', 'lineups', 'gannets', 'cassavas', 'toilsome', 'brouhaha', 'fumbled', 'conversed', 'activist', 'nites', 'stake', 'sirups', 'geniuses', 'workflows', 'patch', 'spawns', 'threading', 'halts', 'movers', 'sulfurs', 'climb', 'negations', 'ayrshire', 'rethink', 'writ', 'pravda', 'flabbiest', 'chosen', 'beer', 'brainwash', 'nauseated', 'upended', 'consumer', 'buddies', 'tooled', 'kabob', 'miming', 'stimulus', 'nicknames', 'ripping', 'asset', 'zigzagged', 'furring', 'invar', 'fracked', 'hospitals', 'berated', 'syncs', 'fanning', 'dogmas', 'film', 'dunne', 'cooker', 'bitcoins', 'gent', 'cookie', 'infirmity', 'rudest', 'simmering', 'exalt', 'scarring', 'himself', 'languidly', 'kookie', 'jewelled', 'addicting', 'varanasi', 'densely', 'climatic', 'ilene', 'lighted', 'country', 'secludes', 'entitled', 'octet', 'trysted', 'gambits', 'dairy', 'dreamers', 'assuage', 'sagan', 'rolodex', 'devalues', 'rumba', 'bite', 'firebug', 'worthies', 'strikeout', 'nailed', 'periwigs', 'jodie', 'mazurkas', 'arranger', 'epson', 'entraps', 'briefing', 'creepers', 'heavily', 'torpedoed', 'caribbean', 'baobabs', 'madras', 'bushed', 'izmir', 'canopy', 'spitfire', 'morbidly', 'vast', 'ribs', 'warders', 'ports', 'unmasked', 'celebrant', 'moods', 'sophism', 'pawls', 'precocity', 'bathing', 'menes', 'southpaws', 'woodcraft', 'imputing', 'hindi', 'marianne', 'pollock', 'unwinding', 'chichis', 'recumbent', 'audacious', 'cormorant', 'blazoned', 'jacuzzi', 'jocosely', 'hops', 'amorously', 'banjoes', 'riposted', 'arbiter', 'disunited', 'targets', 'gasolene', 'crispiest', 'storks', 'doris', 'pull', 'irately', 'viceroy', 'tonnages', 'mongrels', 'sprucer', 'cravats', 'woefully', 'septum', 'moodily', 'ukeleles', 'instills', 'dogfights', 'accolade', 'wheels', 'reconnect', 'arthur', 'slower', 'refined', 'harrow', 'warmed', 'meanest', 'pullover', 'brimstone', 'indignant', 'parboil', 'schemes', 'mcleod', 'dwarfism', 'doodad', 'altruism', 'cowered', 'unzip', 'reagents', 'gibbons', 'zoned', 'misspent', 'redeem', 'minutia', 'cedes', 'outwore', 'dietitian', 'bottles', 'match', 'baits', 'timider', 'alchemist', 'normalcy', 'gazillion', 'palazzi', 'sousa', 'exact', 'calked', 'adonis', 'deducts', 'etchings', 'speakers', 'solidify', 'egyptian', 'prevents', 'shepard', 'riffled', 'becoming', 'bribe', 'profanes', 'spore', 'klan', 'laminate', 'giraudoux', 'jeering', 'scrawny', 'hove', 'european', 'strip', 'investing', 'emma', 'lovelorn', 'mandate', 'frizzled', 'llano', 'sandstone', 'dewayne', 'fungus', 'vetted', 'rebuilds', 'caned', 'prosody', 'bauer', 'rested', 'unbosomed', 'remarried', 'reagent', 'shlep', 'uniquer', 'deflating', 'virulent', 'propel', 'grimed', 'sidewise', 'foresting', 'stye', 'tackled', 'silvers', 'pizarro', 'pithy', 'menhadens', 'lavished', 'casings', 'convulses', 'cyclic', 'angling', 'disses', 'smallish', 'regroups', 'enthrones', 'chillest', 'incline', 'saucier', 'torches', 'blanks', 'frets', 'signed', 'disabuses', 'harshness', 'disk', 'flexes', 'underbids', 'repossess', 'filtering', 'decreed', 'disarray', 'spiting', 'formulaic', 'jolly', 'caper', 'wallowed', 'lurid', 'ahmadabad', 'hiccuping', 'anchormen', 'provoke', 'frees', 'downfall', 'ruckuses', 'phooey', 'outvote', 'fritters', 'mesdames', 'dialings', 'leicester', 'rewards', 'sects', 'muscat', 'yugoslav', 'mites', 'rings', 'guineas', 'sonny', 'foray', 'atkinson', 'walnuts', 'heartier', 'pennon', 'holier', 'juncture', 'schussed', 'sweepers', 'liqueurs', 'demurs', 'medics', 'tared', 'tongans', 'unfit', 'revokable', 'piaget', 'narrate', 'chemistry', 'airspace', 'brimfull', 'trilogy', 'hems', 'resisted', 'concerted', 'snootier', 'slapdash', 'synced', 'aquavit', 'ebonies', 'gemstones', 'unsound', 'wrote', 'topics', 'penknives', 'misspells', 'saw', 'columbia', 'vouchsafe', 'unhorsing', 'cupsful', 'lips', 'feedbags', 'seizing', 'whiffs', 'surrender', 'minded', 'dotage', 'knife', 'sating', 'threats', 'strapped', 'gentries', 'kestrels', 'marathons', 'fizzles', 'skylines', 'mariners', 'awaking', 'vends', 'biopsies', 'bilking', 'clement', 'bucketing', 'bowler', 'dissuaded', 'milky', 'neckties', 'initial', 'garret', 'lattice', 'unchecked', 'pervasive', 'copulated', 'overtaken', 'alacrity', 'emory', 'sphinx', 'asians', 'partakers', 'vamoosed', 'strophe', 'decimate', 'ronny', 'commended', 'genie', 'discuses', 'creak', 'amphibian', 'pastors', 'botches', 'underpays', 'toughs', 'study', 'wittingly', 'drawings', 'grounding', 'cruel', 'attila', 'coopered', 'conceive', 'cinders', 'bacteria', 'pasts', 'noh', 'jeeps', 'roquefort', 'sunburns', 'udder', 'elevation', 'soprano', 'latvians', 'gaucher', 'thong', 'infantry', 'lumberman', 'marquises', 'knell', 'barter', 'imitator', 'grumman', 'calumny', 'outbid', 'pilgrim', 'scented', 'permeable', 'waterloo', 'fuchsia', 'blip', 'polanski', 'yodeling', 'anglicans', 'mandrills', 'armour', 'pierre', 'junkier', 'tailwind', 'mature', 'kenning', 'meshed', 'tiling', 'pituitary', 'hoodies', 'lucrative', 'wilful', 'brandt', 'angevin', 'bedrooms', 'careful', 'kayaking', 'tics', 'group', 'utopian', 'seurat', 'versed', 'thunder', 'gnat', 'lourdes', 'prouder', 'fixate', 'sepals', 'optioned', 'sudsy', 'corpus', 'gestures', 'atari', 'clean', 'pharynges', 'elite', 'bootees', 'ernesto', 'rotarian', 'forms', 'canniest', 'besought', 'gilchrist', 'googled', 'coquette', 'honorific', 'sonnet', 'estonia', 'reba', 'belatedly', 'physician', 'stoniest', 'denuded', 'affixed', 'lyx', 'annie', 'hawks', 'hexagons', 'occluding', 'allure', 'stilt', 'chiseling', 'adjusting', 'jacobin', 'orphic', 'twiggy', 'imports', 'tennessee', 'allocates', 'druggists', 'backrest', 'contrives', 'feeblest', 'swinging', 'cinematic', 'osman', 'bullfight', 'kinky', 'ozark', 'tomatoes', 'hollows', 'burro', 'ravaging', 'ruthie', 'havanas', 'aspell', 'peas', 'lusty', 'such', 'workweek', 'lankiest', 'squabble', 'hispanic', 'doormen', 'rotting', 'efface', 'dramamine', 'ripple', 'grimly', 'blender', 'loudmouth', 'fiftieth', 'massenet', 'satiated', 'unafraid', 'euclid', 'misspell', 'hbo', 'pectoral', 'jinny', 'shoves', 'corded', 'snowsuit', 'improves', 'forge', 'overlie', 'telltale', 'dubiety', 'ganymede', 'rosebuds', 'gulags', 'donates', 'decoder', 'wreathes', 'deploying', 'poring', 'shopper', 'swaths', 'scabrous', 'verdigris', 'party', 'arc', 'elbe', 'acuter', 'insider', 'perjury', 'candies', 'cataracts', 'girl', 'seville', 'ellis', 'hypertext', 'whittling', 'cessation', 'texted', 'arthropod', 'emulator', 'marrow', 'purrs', 'millers', 'railways', 'squints', 'horsefly', 'ventured', 'catwalk', 'insure', 'hideaways', 'profit', 'sedna', 'funnel', 'suchlike', 'thread', 'mossiest', 'arguments', 'elba', 'airbrush', 'sourcing', 'baritones', 'priority', 'humid', 'occult', 'bayer', 'idol', 'syllabus', 'improving', 'olympias', 'rumblings', 'mumford', 'perjuries', 'tortoises', 'querying', 'opponents', 'sponsored', 'erupted', 'loathes', 'causeless', 'whacked', 'miguel', 'weigh', 'monkeys', 'observers', 'defeatist', 'subsides', 'arguable', 'ghoul', 'mildness', 'cupcake', 'dankest', 'aright', 'stubbiest', 'godthaab', 'senators', 'barren', 'chicories', 'concretes', 'unending', 'conduits', 'genus', 'aroma', 'awol', 'prompting', 'teller', 'ratliff', 'rhythm', 'plunger', 'heels', 'extolls', 'veer', 'mocks', 'economic', 'syria', 'jamaal', 'thrift', 'dendrite', 'arneb', 'hussy', 'orwell', 'florists', 'feedbag', 'sympathy', 'primer', 'couches', 'stringy', 'shiitake', 'greenspan', 'cave', 'undergone', 'woodener', 'gluiest', 'impostors', 'coarsened', 'copra', 'supervene', 'hissed', 'remanding', 'hobbit', 'godsend', 'hereabout', 'huffing', 'dealers', 'heartfelt', 'bongs', 'textural', 'lofty', 'kowloon', 'malignity', 'solo', 'elide', 'tumbrel', 'deon', 'tiredest', 'sponger', 'uncle', 'backfired', 'child', 'trisha', 'umpteenth', 'piranhas', 'frittered', 'charwoman', 'amps', 'mothering', 'hazy', 'obloquy', 'crosswise', 'robotics', 'mendez', 'scuzziest', 'womankind', 'conjuring', 'pintoes', 'macao', 'cry', 'annoys', 'border', 'govern', 'nicknack', 'shimmer', 'periled', 'beryllium', 'edgier', 'reinvents', 'clenches', 'snider', 'truants', 'westward', 'gertrude', 'amethysts', 'publicity', 'geekier', 'sadducee', 'stonier', 'misted', 'female', 'jitterier', 'maytag', 'infests', 'mali', 'antigone', 'challenge', 'temperate', 'dreams', 'burroughs', 'ores', 'bulgier', 'despaired', 'militant', 'deliriums', 'fulled', 'sachs', 'nunnery', 'sorbets', 'madison', 'naval', 'glop', 'fighter', 'flybys', 'vanguards', 'sires', 'prows', 'broths', 'salinity', 'allaying', 'waxy', 'dahlias', 'ptomaine', 'picket', 'plight', 'veronica', 'stancher', 'paleness', 'polka', 'shysters', 'soupy', 'fruitcake', 'boyish', 'flustered', 'rumbling', 'shined', 'birded', 'parsnip', 'rinses', 'bulimia', 'hulls', 'avis', 'fistful', 'pommel', 'alaskan', 'nankings', 'flamed', 'hotkey', 'fiord', 'rugged', 'limericks', 'creeping', 'vigils', 'rootless', 'gandhi', 'repelled', 'lassoing', 'pickaback', 'gowned', 'lord', 'analysts', 'ritz', 'mathis', 'zeniths', 'misdirect', 'reading', 'sleaziest', 'abettors', 'lets', 'smoothing', 'yesenia', 'eyre', 'rustics', 'rewrite', 'cudgeling', 'blintz', 'dutchman', 'trials', 'looney', 'spruce', 'acetone', 'bouillons', 'principal', 'sensed', 'bed', 'gobbled', 'color', 'somali', 'wigwags', 'pettiness', 'sold', 'gigolo', 'acme', 'puppies', 'smelted', 'percents', 'actuary', 'faustian', 'martens', 'gouge', 'slang', 'midst', 'borlaug', 'raveled', 'urbane', 'ishtar', 'villager', 'baudouin', 'kirkland', 'lodge', 'trike', 'fox', 'talons', 'freddie', 'smells', 'strikers', 'drains', 'opuses', 'jewelling', 'georgians', 'disabused', 'molder', 'plunders', 'jar', 'poky', 'goslings', 'leah', 'twee', 'pidgin', 'leaning', 'eminence', 'tabling', 'trucking', 'seltzer', 'fumes', 'toner', 'pertest', 'retinal', 'unbutton', 'oxymorons', 'opened', 'bluntest', 'polities', 'harlow', 'letdowns', 'slaves', 'incloses', 'waffled', 'toilets', 'lash', 'dead', 'stalest', 'muller', 'gleamings', 'affords', 'disguises', 'sumerian', 'burdened', 'hoarse', 'lampoon', 'swanking', 'reside', 'uccello', 'secondary', 'plainly', 'dawes', 'mewled', 'anorexic', 'raffles', 'inaudible', 'varlets', 'reducing', 'personage', 'disposes', 'goodie', 'hybrid', 'hardener', 'removals', 'swirly', 'poled', 'argosies', 'rulers', 'purloins', 'mutely', 'twain', 'spending', 'shula', 'relic', 'autocrat', 'heeding', 'olajuwon', 'quarrels', 'wreathe', 'crimping', 'sukkot', 'oracular', 'limburger', 'slough', 'curtains', 'milwaukee', 'fascists', 'insigne', 'bruno', 'perusal', 'cline', 'topsail', 'situated', 'shoshone', 'guilder', 'lilac', 'brassy', 'spinster', 'gooks', 'concerti', 'sprouts', 'release', 'universal', 'fugues', 'topknot', 'mazzini', 'awoke', 'scrapping', 'huygens', 'borden', 'howe', 'biko', 'regrets', 'rudiment', 'bobtail', 'strikes', 'yawl', 'seeger', 'globules', 'emmanuel', 'married', 'overflow', 'aching', 'kurosawa', 'illusory', 'redo', 'parenting', 'adhere', 'benares', 'marisa', 'scad', 'blurbs', 'myriads', 'electing', 'kronor', 'caramels', 'impulses', 'annam', 'yuck', 'paniers', 'yiddish', 'mills', 'limier', 'reposed', 'sprees', 'jaw', 'classed', 'warped', 'wobbles', 'retaining', 'upon', 'heavens', 'requital', 'endear', 'satisfies', 'ats', 'shuffled', 'oinking', 'noriega', 'warblers', 'finals', 'foils', 'inflating', 'plymouth', 'narrowly', 'shankara', 'averages', 'preface', 'crafty', 'swag', 'shoveled', 'evened', 'tuckers', 'webinars', 'swindle', 'stalking', 'extort', 'smooch', 'ethically', 'seedlings', 'druids', 'quietness', 'ethelred', 'people', 'crescent', 'riddled', 'soda', 'captor', 'districts', 'badinage', 'bias', 'potomac', 'reamer', 'beating', 'elton', 'dado', 'differ', 'spinoff', 'caloric', 'indecency', 'declaimed', 'whizzing', 'esquires', 'impounded', 'lymph', 'prosier', 'booting', 'roundup', 'defused', 'davids', 'bunted', 'clocked', 'gradually', 'sloping', 'yogin', 'subduing', 'jostling', 'spectra', 'yolk', 'ululates', 'roars', 'account', 'missals', 'dillon', 'fender', 'view', 'doodlers', 'charley', 'live', 'sombre', 'playhouse', 'mussed', 'underdone', 'gale', 'instance', 'drawers', 'troopship', 'alleyway', 'lending', 'doughnuts', 'lorries', 'pepped', 'kingliest', 'eyeballs', 'splashing', 'overheard', 'madrid', 'hubbub', 'byplay', 'entailed', 'dolmens', 'broaden', 'givens', 'humors', 'androgen', 'convened', 'punctuate', 'lately', 'overheat', 'avocado', 'dimer', 'numb', 'sitcom', 'boat', 'cripples', 'congo', 'potluck', 'nominees', 'trunks', 'deletion', 'battered', 'entitles', 'puberty', 'porting', 'couple', 'bridal', 'forenames', 'slits', 'brigands', 'dushanbe', 'metals', 'blushers', 'brazening', 'radium', 'tricia', 'nairobi', 'mind', 'accidents', 'verticals', 'refilled', 'snaps', 'cranial', 'pederasty', 'moraines', 'pas', 'lang', 'labrador', 'timidest', 'dream', 'syllogism', 'worthily', 'bierce', 'purr', 'jousts', 'finishing', 'sniffing', 'kathleen', 'blackfoot', 'grazed', 'biassed', 'graduates', 'phobia', 'peeping', 'ashamed', 'prattles', 'titles', 'years', 'arsenic', 'innermost', 'waitress', 'untenable', 'nannies', 'queerly', 'sequined', 'provided', 'dzungaria', 'radishes', 'parable', 'midas', 'acridest', 'bar', 'watchband', 'polymer', 'antonia', 'cryings', 'fiber', 'credit', 'wrapt', 'bolting', 'minions', 'gossamer', 'wiggly', 'nicaragua', 'napalm', 'gullies', 'safest', 'sweating', 'hobbes', 'footrest', 'trots', 'profusely', 'calais', 'muzzled', 'tints', 'deficient', 'rectangle', 'mulches', 'ignorance', 'crease', 'uncover', 'emending', 'lakota', 'equably', 'asgard', 'stoking', 'redevelop', 'kenton', 'encrypt', 'lifelines', 'alleging', 'mermaids', 'objective', 'booze', 'maltese', 'feelings', 'duns', 'spartans', 'roxanne', 'flotsam', 'towelled', 'unwell', 'bamako', 'unstable', 'miring', 'buggers', 'alit', 'mooching', 'exiles', 'tatted', 'walpole', 'distrait', 'tramps', 'concerned', 'occlude', 'gorging', 'dukedom', 'nurses', 'fanboy', 'limy', 'completes', 'glossier', 'sackfuls', 'guidebook', 'surgery', 'freebased', 'spartacus', 'unbolting', 'raping', 'porpoises', 'races', 'caginess', 'stowing', 'postured', 'sidles', 'pedigree', 'burliest', 'sleighed', 'ire', 'freedman', 'mooning', 'forecasts', 'humanoid', 'cassino', 'granges', 'sourest', 'thymi', 'bartholdi', 'aired', 'cuddliest', 'dipole', 'nuder', 'highboys', 'libertine', 'leaders', 'barmaid', 'effective', 'tory', 'bowing', 'marten', 'ordered', 'bummed', 'maturer', 'peruvian', 'overalls', 'toggled', 'crier', 'fitted', 'keillor', 'josh', 'thirties', 'foundling', 'cutting', 'waive', 'hemlines', 'splotchy', 'parabolas', 'birthrate', 'lovecraft', 'coasted', 'crams', 'epoxy', 'zambians', 'flimflams', 'ina', 'cepheus', 'glistened', 'beg', 'bevels', 'moralized', 'dermis', 'cetacean', 'hippo', 'entryway', 'synagogue', 'lindy', 'mat', 'scamp', 'naismith', 'litterbug', 'monster', 'niggaz', 'anchovy', 'knowings', 'trillions', 'toilette', 'chatterer', 'rowers', 'eagerer', 'vouchers', 'contrived', 'tearier', 'junkyard', 'surfed', 'rashly', 'informer', 'rivetted', 'subbed', 'tympana', 'amnesty', 'scratchy', 'porcelain', 'simpleton', 'trailing', 'hearkens', 'blithely', 'hes', 'rudyard', 'sherman', 'catkin', 'jailed', 'spread', 'acolytes', 'owe', 'orphaning', 'jalousie', 'esperanto', 'stateside', 'loaned', 'thriller', 'inheres', 'langley', 'embalm', 'lifestyle', 'massive', 'pinked', 'paroxysm', 'condenser', 'innovate', 'foxiest', 'pummeling', 'jedi', 'visited', 'creeper', 'braying', 'disrobed', 'premyslid', 'grassland', 'lotuses', 'wriggles', 'eroses', 'write', 'ghetto', 'arachnid', 'wickers', 'twinged', 'leggin', 'nudism', 'floor', 'prettify', 'diction', 'spat', 'flattops', 'legates', 'slumlord', 'abstained', 'castings', 'molina', 'kyle', 'swindling', 'nope', 'auditory', 'villas', 'pliancy', 'grizzlier', 'sister', 'ahriman', 'seafood', 'duping', 'appalled', 'sinecure', 'randy', 'overjoy', 'bowmen', 'demur', 'spunky', 'savior', 'swanked', 'fuselage', 'daft', 'greats', 'disports', 'lairs', 'scudding', 'foregoing', 'chump', 'boudoir', 'fling', 'kornberg', 'monroe', 'sambaing', 'artifacts', 'kyushu', 'snapper', 'coining', 'tuvalu', 'intone', 'fasts', 'mordants', 'unmade', 'whitehead', 'fickler', 'rivalling', 'kingdom', 'roentgens', 'excoriate', 'sierras', 'sony', 'upbeat', 'whiner', 'baedeker', 'cornelia', 'uppercase', 'monday', 'comings', 'befuddles', 'silkier', 'princely', 'africans', 'decreases', 'homerooms', 'ups', 'auctions', 'discs', 'freeze', 'rinsing', 'adjoins', 'tempered', 'parlayed', 'totters', 'repulsion', 'nurtures', 'specifier', 'perfecter', 'tactful', 'survives', 'phobics', 'crassest', 'harmony', 'journeys', 'dungs', 'sexton', 'holocaust', 'pym', 'gabriel', 'song', 'ammeter', 'maws', 'bumblers', 'dark', 'neutrals', 'initiator', 'ukraine', 'cowpokes', 'projects', 'chubbiest', 'syrian', 'hydra', 'beloveds', 'swordsman', 'debugs', 'cornets', 'swashing', 'wordings', 'brews', 'force', 'corporal', 'trounce', 'deposing', 'pummel', 'rhyming', 'coven', 'stone', 'punchy', 'freddy', 'seekers', 'ash', 'intrusion', 'mott', 'prophetic', 'admirers', 'loom', 'dwarfs', 'worsened', 'lemuel', 'shine', 'forums', 'fret', 'sculley', 'scotchmen', 'laurasia', 'arisen', 'lineament', 'palmed', 'sandbar', 'vesta', 'buckler', 'tonics', 'overstays', 'insecure', 'nerdiest', 'satires', 'zens', 'umps', 'rend', 'proverbs', 'vexed', 'coors', 'cuckold', 'steads', 'dwellings', 'lofts', 'than', 'unions', 'ferris', 'confess', 'rating', 'bleat', 'juiciest', 'regimens', 'reckoning', 'landslide', 'goldsmith', 'liability', 'synagog', 'herd', 'convene', 'accompany', 'peafowl', 'baronets', 'squeal', 'pocks', 'retches', 'umbels', 'plantains', 'sullying', 'paleozoic', 'dosing', 'pop', 'amaranths', 'pope', 'distastes', 'quartet', 'kahlua', 'scarcely', 'massacre', 'frowzy', 'agism', 'wezen', 'moreover', 'slugs', 'dynastic', 'kenyan', 'defogger', 'caskets', 'wifi', 'vetoing', 'terrorist', 'glutton', 'haleakala', 'acetylene', 'aloofness', 'marquetry', 'lucking', 'bunked', 'jellies', 'reissues', 'escarole', 'cameramen', 'algerians', 'drenches', 'jannie', 'baotou', 'mitty', 'crusting', 'towpath', 'hymns', 'okay', 'vault', 'booklet', 'filament', 'mantels', 'unceasing', 'quails', 'pansies', 'scrimp', 'botanical', 'leprous', 'molecules', 'gaggle', 'riming', 'entered', 'ledgers', 'basques', 'anacin', 'vitamins', 'jaipur', 'imploring', 'belinda', 'keats', 'flintlock', 'stalemate', 'acacia', 'haber', 'lassos', 'pone', 'witlessly', 'bet', 'memes', 'headers', 'insets', 'rests', 'sophocles', 'bisection', 'crazed', 'beech', 'carcasses', 'stammerer', 'shetland', 'coercing', 'streetcar', 'spurn', 'lerner', 'unwashed', 'isolate', 'catechise', 'squids', 'ration', 'tripled', 'malware', 'replete', 'bunking', 'scorsese', 'thorniest', 'debriefs', 'meanwhile', 'achievers', 'symphony', 'burke', 'sing', 'jilin', 'lyricist', 'lights', 'populists', 'fireball', 'curlycues', 'albania', 'revokes', 'solemnly', 'inelegant', 'warier', 'angel', 'joshing', 'chunkier', 'jeer', 'egghead', 'denizen', 'sunday', 'hare', 'termites', 'genuflect', 'practises', 'outsiders', 'clements', 'breaded', 'impute', 'balds', 'benching', 'brambles', 'intercept', 'truly', 'quintets', 'malone', 'prototype', 'quackery', 'natalie', 'onto', 'ounce', 'termini', 'giants', 'toque', 'cradling', 'gibe', 'sallies', 'aunt', 'amber', 'balkan', 'eluding', 'obeisance', 'frontier', 'quantity', 'laziness', 'licences', 'leftism', 'commands', 'divisors', 'gybes', 'worthless', 'cotopaxi', 'invoicing', 'wisp', 'analogy', 'lizzy', 'supersize', 'coiled', 'iguana', 'inciting', 'polity', 'tattoos', 'point', 'parkas', 'tackiness', 'wigging', 'raphael', 'summit', 'hairstyle', 'innately', 'court', 'raster', 'soundings', 'conspire', 'vamps', 'steady', 'thaw', 'borne', 'settles', 'appends', 'killdeer', 'con', 'reno', 'rook', 'hailed', 'redoubled', 'harrods', 'grapple', 'grisliest', 'sanctuary', 'donating', 'campfire', 'mobilized', 'massaging', 'delegates', 'shutting', 'heliport', 'freeloads', 'rebekah', 'muggle', 'landmarks', 'slouching', 'beeline', 'ashram', 'chaffs', 'mingle', 'troikas', 'jingoists', 'titbit', 'baseline', 'dairies', 'adulated', 'engels', 'innocence', 'downscale', 'fulsome', 'funking', 'rankings', 'bats', 'dishing', 'smudgiest', 'lake', 'sniffle', 'poppycock', 'seattle', 'ravelled', 'coziest', 'creosote', 'flurrying', 'lactic', 'radiator', 'alcestis', 'squaw', 'balancing', 'mistyping', 'anime', 'nazis', 'sphere', 'averred', 'fall', 'erectness', 'skydiver', 'updates', 'musician', 'obscurer', 'pasterns', 'ploughs', 'tableaus', 'serenely', 'erect', 'faze', 'groan', 'peggy', 'droopy', 'twofers', 'toasts', 'fleeter', 'saltiest', 'massage', 'freshened', 'barrett', 'linkups', 'wantoning', 'storing', 'play', 'marauders', 'touching', 'paired', 'linden', 'littered', 'foresight', 'iambs', 'concrete', 'rare', 'limbaugh', 'stops', 'hears', 'hasp', 'diadem', 'marketed', 'ensembles', 'slicers', 'loretta', 'roof', 'grandness', 'recovers', 'axial', 'pitch', 'monsanto', 'sis', 'pissed', 'countries', 'gems', 'gaming', 'factorize', 'retention', 'depended', 'coleen', 'allah', 'citruses', 'fertilize', 'depresses', 'firebreak', 'implores', 'quintuple', 'woodlands', 'residuals', 'toulouse', 'lawlessly', 'celeste', 'eileen', 'attacks', 'ganglia', 'maxim', 'bloody', 'peritonea', 'support', 'basically', 'resistors', 'cheekiest', 'ail', 'boy', 'marlowe', 'airlifts', 'sophist', 'saffrons', 'mileposts', 'spites', 'bradbury', 'rectitude', 'ionizing', 'oilcloths', 'sofia', 'tries', 'coaching', 'shoppers', 'pleader', 'allusions', 'premiers', 'wily', 'strutted', 'medan', 'geniality', 'vacua', 'moiety', 'sapsucker', 'detriment', 'rightist', 'oink', 'girlhood', 'colas', 'boyishly', 'consuelo', 'flopping', 'sanhedrin', 'holistic', 'faucets', 'above', 'seduce', 'doubleday', 'bishopric', 'kicky', 'calcutta', 'epoxying', 'blister', 'hasted', 'courser', 'puckers', 'dustbin', 'majority', 'prom', 'king', 'tocantins', 'armies', 'rwandas', 'ciphered', 'curtsy', 'pursues', 'find', 'doggoning', 'fracks', 'cordon', 'ductless', 'gestapo', 'ptolemy', 'kangaroos', 'unhappy', 'chilled', 'stung', 'ordinals', 'profanely', 'hitters', 'thwacks', 'canticle', 'plum', 'twangs', 'yammer', 'kissing', 'vine', 'restocks', 'crueller', 'arrogate', 'retrying', 'gurneys', 'cocooned', 'fateful', 'tux', 'sterling', 'clothes', 'rafael', 'hackney', 'act', 'flashier', 'peals', 'sunken', 'hegel', 'tibia', 'brawny', 'privacy', 'radar', 'guild', 'angolan', 'devotees', 'prudery', 'consents', 'yap', 'pried', 'letting', 'argyles', 'bakery', 'reporting', 'vapes', 'sups', 'sylvan', 'chisholm', 'stoicism', 'flails', 'subplots', 'horne', 'mambo', 'haunt', 'gerardo', 'crates', 'bojangles', 'inundated', 'scofflaws', 'propping', 'welland', 'bailey', 'libido', 'yucked', 'matte', 'goulashes', 'bisectors', 'tuckered', 'involve', 'sniveled', 'laciest', 'iyar', 'carotids', 'prowlers', 'bewilder', 'shelby', 'depleting', 'congruent', 'sieves', 'swaddles', 'cudgel', 'cyclone', 'bender', 'swordplay', 'airman', 'allusive', 'mob', 'leviticus', 'geez', 'picketed', 'elided', 'tinkering', 'juster', 'lorded', 'untaught', 'singed', 'djinni', 'tabulator', 'dyspepsia', 'patterson', 'postpaid', 'injected', 'used', 'silurian', 'tike', 'fiascos', 'soupiest', 'bulges', 'dabbles', 'tran', 'unasked', 'strife', 'duodenum', 'adores', 'vedas', 'puffier', 'misplace', 'noticing', 'mosque', 'passersby', 'exorcized', 'cerebrum', 'suppliers', 'jeweled', 'monogram', 'requiring', 'mayo', 'byblos', 'pallid', 'ruskin', 'pariah', 'acidifies', 'trunk', 'jiujitsu', 'utilities', 'serengeti', 'beelzebub', 'brier', 'impolitic', 'washings', 'pennons', 'perjures', 'cowgirl', 'hums', 'martians', 'syntheses', 'creamer', 'wielded', 'eliciting', 'roundness', 'donnie', 'soulless', 'hinting', 'warily', 'vises', 'olsen', 'laxatives', 'plumping', 'wifely', 'untruer', 'nachos', 'gray', 'gad', 'hamming', 'astonish', 'maricela', 'margo', 'physic', 'napped', 'miters', 'umbilici', 'patagonia', 'whetted', 'borglum', 'herniae', 'juliana', 'subtract', 'lures', 'sang', 'womanhood', 'pecans', 'hassle', 'brilliant', 'fondled', 'acmes', 'francisca', 'avenges', 'polemical', 'mainsail', 'selvedges', 'whiffing', 'midyears', 'yakut', 'gaunt', 'flub', 'forsaking', 'whatnot', 'lenders', 'appellant', 'smother', 'rusting', 'destitute', 'staring', 'cathedral', 'balmy', 'teenage', 'cattily', 'robins', 'palermo', 'forelocks', 'yearnings', 'goolagong', 'amatory', 'dissect', 'deviling', 'domed', 'backdates', 'wigwam', 'atavistic', 'thwarts', 'buffoon', 'lutheran', 'feting', 'offends', 'bawdiest', 'iridium', 'pasted', 'tahiti', 'wined', 'orals', 'spider', 'pine', 'contender', 'tacitus', 'snobbish', 'tammie', 'looser', 'bergs', 'pension', 'disagree', 'driveway', 'helena', 'defer', 'weest', 'tuneless', 'italians', 'mops', 'hokkaido', 'gemini', 'genera', 'cabbies', 'tend', 'flumes', 'aperture', 'scarlet', 'disgust', 'araby', 'fibroid', 'pizzas', 'bluebirds', 'ossifying', 'descent', 'skedaddle', 'lester', 'cellini', 'gaffed', 'judson', 'snatched', 'pitchman', 'pantheism', 'svelter', 'copiously', 'gophers', 'frightens', 'minuet', 'mixers', 'dubrovnik', 'buzzkill', 'gunmen', 'bloomer', 'limply', 'cygnets', 'abducting', 'cheerful', 'often', 'sweetly', 'departs', 'pets', 'daddies', 'evoked', 'pals', 'mock', 'demerit', 'brad', 'fishnets', 'dicks', 'willie', 'dull', 'honor', 'kills', 'crackling', 'grooves', 'ridicules', 'glorify', 'pager', 'loiters', 'blitzes', 'koala', 'wads', 'delegated', 'fusion', 'gauges', 'bled', 'paltrier', 'manful', 'handily', 'barrens', 'leif', 'peppering', 'bungling', 'fuchs', 'coiffure', 'webbed', 'exorcizes', 'towards', 'vermin', 'deadwood', 'ocher', 'hid', 'behalves', 'emirs', 'spirited', 'burton', 'hover', 'specking', 'quavery', 'pullback', 'kenned', 'filigrees', 'muleteer', 'privately', 'stinks', 'condole', 'loathing', 'inability', 'lumbers', 'yips', 'luger', 'coalesces', 'brute', 'quilts', 'tempting', 'rhine', 'plumbed', 'henrietta', 'fridge', 'cupid', 'accenture', 'fogs', 'castanets', 'backs', 'pederasts', 'turrets', 'axioms', 'jeopardy', 'moats', 'hooves', 'atwitter', 'writhing', 'brillo', 'islander', 'dinnering', 'trumpet', 'wine', 'casanova', 'gibberish', 'bandaged', 'dictating', 'honed', 'scurvy', 'tableaux', 'wallpaper', 'breezily', 'liker', 'cupola', 'aphrodite', 'rainiest', 'hierarchy', 'coasters', 'harlot', 'dedicates', 'sextant', 'tethers', 'quick', 'docilely', 'trellised', 'futilely', 'fourth', 'fishy', 'aspiring', 'anion', 'hines', 'daugherty', 'supplying', 'snappers', 'penis', 'adornment', 'expose', 'tinctures', 'straining', 'passer', 'woodmen', 'soughing', 'tealights', 'pulling', 'gore', 'albion', 'paraclete', 'fluidly', 'handbag', 'rankled', 'leached', 'balaton', 'mainland', 'gazpacho', 'eucalypti', 'coercion', 'vaporizes', 'femoral', 'bogies', 'cradles', 'pacifier', 'carolling', 'leapfrogs', 'mustier', 'gougers', 'parches', 'cognomen', 'earn', 'normalize', 'takeout', 'fasteners', 'doodling', 'forestall', 'morass', 'strudel', 'sander', 'vessel', 'helplines', 'avatars', 'zionist', 'nervously', 'mistreats', 'hank', 'elegant', 'apartheid', 'kochab', 'flawed', 'arkwright', 'trieste', 'biden', 'pugs', 'nautilus', 'lookout', 'galibi', 'maharajas', 'transvaal', 'animating', 'elbrus', 'narrow', 'shrieks', 'farted', 'strabo', 'scorch', 'savanna', 'sickness', 'flanges', 'mann', 'doggoned', 'wiper', 'raved', 'enures', 'ulyanovsk', 'queuing', 'workhorse', 'blows', 'yeasty', 'rabid', 'bonded', 'sadism', 'accept', 'trigger', 'adapted', 'densities', 'gay', 'scrambles', 'ancillary', 'ampoule', 'scoops', 'actuate', 'harbinger', 'ashe', 'hunspell', 'recopies', 'hebraic', 'flinty', 'remedied', 'grilling', 'drown', 'friday', 'jungles', 'irking', 'cremated', 'ranginess', 'crews', 'toyota', 'riveting', 'eatables', 'junkets', 'biathlon', 'tsunamis', 'offhand', 'braver', 'mankind', 'emits', 'cloaked', 'itself', 'sundering', 'brooder', 'pilaff', 'sheik', 'devin', 'enroll', 'cuticles', 'asterisks', 'lived', 'iowans', 'kimberly', 'funeral', 'nepali', 'riverbed', 'iqaluit', 'eons', 'deborah', 'disbar', 'thriven', 'gulley', 'encrypts', 'montague', 'anglo', 'germane', 'crushed', 'dmitri', 'ingest', 'resent', 'ashier', 'acclaims', 'nays', 'havarti', 'essene', 'cricking', 'dented', 'barks', 'hounded', 'nikolayev', 'gala', 'plushy', 'damasks', 'glistens', 'mires', 'vuvuzelas', 'footfalls', 'paramount', 'letdown', 'fourths', 'crinkles', 'foolishly', 'helping', 'civilize', 'gauzier', 'boiled', 'exporting', 'systemics', 'prince', 'scummed', 'mushed', 'topsails', 'encode', 'sepsis', 'mollusks', 'graphic', 'plateau', 'uncleanly', 'arenas', 'elliot', 'overkill', 'mckinney', 'whose', 'meriting', 'deceives', 'huddling', 'rendered', 'rulings', 'tiger', 'foregone', 'chervil', 'persuaded', 'ungodlier', 'dandiest', 'rarely', 'piglet', 'flat', 'zibo', 'tables', 'matrices', 'fluorine', 'longhair', 'pomading', 'moralist', 'veldts', 'rehearse', 'callow', 'career', 'elbows', 'christen', 'pleurisy', 'movements', 'spoors', 'submerse', 'fukuoka', 'nicer', 'equitable', 'deigning', 'ecosystem', 'aston', 'dissolves', 'knighted', 'shire', 'sues', 'stoppages', 'noyes', 'chaucer', 'greta', 'intrepid', 'parodying', 'thrives', 'eaten', 'buzzwords', 'subleased', 'aides', 'headaches', 'zippy', 'fraying', 'prickled', 'cat', 'sipped', 'slummed', 'mounds', 'mach', 'pomaded', 'vestigial', 'poseurs', 'sniping', 'along', 'curio', 'giggled', 'diplomata', 'rightest', 'recurrent', 'snakebite', 'sparring', 'mannikin', 'immune', 'buckwheat', 'courtier', 'dare', 'galatia', 'cerf', 'unplumbed', 'dockyard', 'wholes', 'leonor', 'flavors', 'scapulas', 'coworkers', 'scuffled', 'reality', 'tans', 'leggiest', 'penguins', 'hickey', 'aptitudes', 'hoorayed', 'buttes', 'erna', 'glamours', 'flings', 'afoot', 'hollerith', 'petted', 'outwits', 'janice', 'expound', 'galosh', 'summoner', 'unleashed', 'swash', 'durban', 'october', 'ruth', 'tucuman', 'bounce', 'knells', 'soviet', 'asthmatic', 'comrade', 'apostates', 'ulcers', 'virtue', 'drays', 'salvation', 'airless', 'dainty', 'ingrid', 'addict', 'ostriches', 'homeboy', 'puebla', 'kayla', 'avila', 'disbars']
caller - /home/vitekkor/PycharmProjects/hephaestus/src/args.py:41:<module>; method - ['    "-n", "--name",\n', '    default=randomUtil.str(),\n']; args - (), kwargs - {}, result - b6GC7
caller - /home/vitekkor/PycharmProjects/hephaestus/src/args.py:192:<module>; method - ['}\n', 'randomUtil.remove_reserved_words(args.language)\n']; args - ('kotlin',), kwargs - {}, result - None
caller - /home/vitekkor/PycharmProjects/hephaestus/hephaestus.py:483:run; method - ['    utils.randomUtil.reset_word_pool()\n', '    packages = (utils.randomUtil.word(), utils.randomUtil.word())\n']; args - (), kwargs - {}, result - crusting
caller - /home/vitekkor/PycharmProjects/hephaestus/hephaestus.py:483:run; method - ['    utils.randomUtil.reset_word_pool()\n', '    packages = (utils.randomUtil.word(), utils.randomUtil.word())\n']; args - (), kwargs - {}, result - zings
caller - /home/vitekkor/PycharmProjects/hephaestus/src/utils.py:241:range; method - ['        self.previous_call = self.call\n', '        self.result = range(0, self.integer(from_value, to_value))\n']; args - (5, 10), kwargs - {}, result - 9
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:94:generate; method - ['        self.context = context or Context()\n', '        for _ in ut.randomUtil.range(cfg.limits.min_top_level,\n']; args - (5, 10), kwargs - {}, result - range(0, 9)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:118:gen_top_level_declaration; method - ['        ]\n', '        gen_func = ut.randomUtil.choice(candidates)\n']; args - ([<bound method Generator.gen_variable_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>, <bound method Generator.gen_class_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>, <bound method Generator.gen_func_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>],), kwargs - {}, result - <bound method Generator.gen_class_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - peeved
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:80:select_class_type; method - ["    # there's higher probability to generate a regular class.\n", '    if ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:86:select_class_type; method - ['        candidates.append(ast.ClassDeclaration.INTERFACE)\n', '    return ut.randomUtil.choice(candidates)\n']; args - ([2, 1],), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:456:gen_class_decl; method - ['        class_type = gu.select_class_type(field_type is not None)\n', '        is_final = ut.randomUtil.bool() and class_type == \\\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2128:gen_type_params; method - ['        """\n', '        if not count and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2139:gen_type_params; method - ['        )\n', '        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n']; args - (1, 3), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2140:gen_type_params; method - ['        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n', '            name = ut.randomUtil.caps(blacklist=type_param_names)\n']; args - (), kwargs - {'blacklist': []}, result - J
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2151:gen_type_params; method - ['            bound = None\n', '            if ut.randomUtil.bool(cfg.prob.bounded_type_parameters):\n']; args - (0.5,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2140:gen_type_params; method - ['        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n', '            name = ut.randomUtil.caps(blacklist=type_param_names)\n']; args - (), kwargs - {'blacklist': ['J']}, result - L
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2151:gen_type_params; method - ['            bound = None\n', '            if ut.randomUtil.bool(cfg.prob.bounded_type_parameters):\n']; args - (0.5,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([J <: Char],), kwargs - {}, result - J <: Char
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:671:gen_class_functions; method - ['        if not super_cls_info:\n', '            for _ in range(ut.randomUtil.integer(0, max_funcs)):\n']; args - (0, 2), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:118:gen_top_level_declaration; method - ['        ]\n', '        gen_func = ut.randomUtil.choice(candidates)\n']; args - ([<bound method Generator.gen_variable_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>, <bound method Generator.gen_class_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>, <bound method Generator.gen_func_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>],), kwargs - {}, result - <bound method Generator.gen_variable_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35bd0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35c60>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35cf0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde35900>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde35870>, <function gen_integer_constant at 0x7ffafdfcd990>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde35870>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35bd0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - shiva
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:80:select_class_type; method - ["    # there's higher probability to generate a regular class.\n", '    if ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:456:gen_class_decl; method - ['        class_type = gu.select_class_type(field_type is not None)\n', '        is_final = ut.randomUtil.bool() and class_type == \\\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2128:gen_type_params; method - ['        """\n', '        if not count and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2139:gen_type_params; method - ['        )\n', '        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n']; args - (1, 3), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2140:gen_type_params; method - ['        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n', '            name = ut.randomUtil.caps(blacklist=type_param_names)\n']; args - (), kwargs - {'blacklist': []}, result - R
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2151:gen_type_params; method - ['            bound = None\n', '            if ut.randomUtil.bool(cfg.prob.bounded_type_parameters):\n']; args - (0.5,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:519:_select_superclass; method - ['            return None\n', '        class_decl = ut.randomUtil.choice(class_decls)\n']; args - ([Peeved],), kwargs - {}, result - interface Peeved<J <: Char, L <: J> {

   }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Char(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Char(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - grumbled
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:851:gen_field_decl; method - ['        can_override = not class_is_final and ut.randomUtil.bool()\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:577:gen_class_fields; method - ['                .get_overridable_fields()\n', '            k = ut.randomUtil.integer(0, min(max_fields, len(overridable_fields)))\n']; args - (0, 0), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:593:gen_class_fields; method - ['                return fields\n', '            for _ in range(ut.randomUtil.integer(0, max_fields)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:701:gen_class_functions; method - ['                return funcs\n', '            k = ut.randomUtil.integer(0, min(max_funcs, len_over_f))\n']; args - (0, 0), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/utils.py:212:sample; method - ['        self.call = "sample {} k={}".format(str(choices), k)\n', '        k = k or self.integer(0, len(choices))\n']; args - (0, 0), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:705:gen_class_functions; method - ['                if not max_funcs or curr_cls.is_interface()\n', '                else ut.randomUtil.sample(overridable_funcs, k=k)\n']; args - ([],), kwargs - {'k': 0}, result - []
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:716:gen_class_functions; method - ['                return funcs\n', '            for _ in range(ut.randomUtil.integer(0, max_funcs)):\n']; args - (0, 2), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Long(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Long(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Shiva<Long(kotlin-builtin)>],), kwargs - {}, result - Shiva<Long(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36710>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde367a0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36830>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde363b0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde35a20>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36440>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36440>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Shiva],), kwargs - {}, result - class Shiva<R <: Long> : Peeved {
  grumbled: Int(kotlin-builtin)
   }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36a70>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36b00>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36b90>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde365f0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36560>, <function gen_integer_constant at 0x7ffafdfcd990>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36560>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36560>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36dd0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36e60>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36ef0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde369e0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36950>, <function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36ef0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - -1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - coaching
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1122:gen_field_access; method - ['        objs = [(obj.receiver_expr, obj.attr_decl) for obj in objs]\n', '        receiver, attr = ut.randomUtil.choice(objs)\n']; args - ([(<src.ir.ast.New object at 0x7ffaffd30220>, grumbled)],), kwargs - {}, result - (<src.ir.ast.New object at 0x7ffaffd30220>, grumbled)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - preparing
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - routed
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:118:gen_top_level_declaration; method - ['        ]\n', '        gen_func = ut.randomUtil.choice(candidates)\n']; args - ([<bound method Generator.gen_variable_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>, <bound method Generator.gen_class_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>, <bound method Generator.gen_func_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>],), kwargs - {}, result - <bound method Generator.gen_func_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - inception
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:340:gen_func_decl; method - ['                    for_function=True\n', '                ) if ut.randomUtil.bool(prob=cfg.prob.parameterized_functions) \\\n']; args - (), kwargs - {'prob': 0.3}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:353:gen_func_decl; method - ['                self._gen_func_params()\n', '                if (ut.randomUtil.bool(prob=0.25) or is_interface)\n']; args - (), kwargs - {'prob': 0.25}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:395:_gen_func_params_with_default; method - ['        params = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_params)):\n']; args - (0, 2), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Boolean(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Float(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Byte(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde370a0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde364d0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36680>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37130>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36c20>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37250>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37250>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1855:_gen_func_ref_lambda; method - ['        # We are unable to produce function references in super calls.\n', '        if ut.randomUtil.bool(cfg.prob.func_ref) and not self._in_super_call:\n']; args - (0.5,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2611:_gen_matching_func; method - ['        gen_method = (\n', '                ut.randomUtil.bool() or\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - kilowatt
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:80:select_class_type; method - ["    # there's higher probability to generate a regular class.\n", '    if ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:86:select_class_type; method - ['        candidates.append(ast.ClassDeclaration.INTERFACE)\n', '    return ut.randomUtil.choice(candidates)\n']; args - ([2, 1],), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:456:gen_class_decl; method - ['        class_type = gu.select_class_type(field_type is not None)\n', '        is_final = ut.randomUtil.bool() and class_type == \\\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2128:gen_type_params; method - ['        """\n', '        if not count and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:519:_select_superclass; method - ['            return None\n', '        class_decl = ut.randomUtil.choice(class_decls)\n']; args - ([Peeved],), kwargs - {}, result - interface Peeved<J <: Char, L <: J> {

   }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Char(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Char(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - cancer
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - procurer
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - morally
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - only
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:340:gen_func_decl; method - ['                    for_function=True\n', '                ) if ut.randomUtil.bool(prob=cfg.prob.parameterized_functions) \\\n']; args - (), kwargs - {'prob': 0.3}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:701:gen_class_functions; method - ['                return funcs\n', '            k = ut.randomUtil.integer(0, min(max_funcs, len_over_f))\n']; args - (0, 0), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:716:gen_class_functions; method - ['                return funcs\n', '            for _ in range(ut.randomUtil.integer(0, max_funcs)):\n']; args - (0, 1), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - addicting
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:340:gen_func_decl; method - ['                    for_function=True\n', '                ) if ut.randomUtil.bool(prob=cfg.prob.parameterized_functions) \\\n']; args - (), kwargs - {'prob': 0.3}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:353:gen_func_decl; method - ['                self._gen_func_params()\n', '                if (ut.randomUtil.bool(prob=0.25) or is_interface)\n']; args - (), kwargs - {'prob': 0.25}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2288:_gen_func_params; method - ['        vararg = None\n', '        for i in range(ut.randomUtil.integer(0, cfg.limits.fn.max_params)):\n']; args - (0, 2), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)],), kwargs - {}, result - Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37490>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37520>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde375b0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde36cb0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36f80>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37010>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde375b0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36d40>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36d40>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - platform
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - ridicules
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37880>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37010>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37010>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1005:gen_assignment; method - ['                                                     only_leaves, subtype))\n', '        receiver, variable = ut.randomUtil.choice(variables)\n']; args - ([(None, preparing), (None, routed), (None, platform)],), kwargs - {}, result - (None, platform)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)],), kwargs - {}, result - Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde372e0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde379a0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37400>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37520>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36cb0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36f80>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36f80>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - alps
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:118:gen_top_level_declaration; method - ['        ]\n', '        gen_func = ut.randomUtil.choice(candidates)\n']; args - ([<bound method Generator.gen_variable_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>, <bound method Generator.gen_class_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>, <bound method Generator.gen_func_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>],), kwargs - {}, result - <bound method Generator.gen_variable_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Byte(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Boolean(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Byte(kotlin-builtin)],), kwargs - {}, result - Byte(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Int(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Boolean(kotlin-builtin)],), kwargs - {}, result - Boolean(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Double(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Function3<Byte(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Double(kotlin-builtin)>],), kwargs - {}, result - Function3<Byte(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Double(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37880>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36d40>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde375b0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde372e0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36f80>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde379a0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde372e0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1548:gen_func_call; method - ['        """\n', '        if ut.randomUtil.bool(cfg.prob.func_ref_call):\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2611:_gen_matching_func; method - ['        gen_method = (\n', '                ut.randomUtil.bool() or\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - defectors
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:80:select_class_type; method - ["    # there's higher probability to generate a regular class.\n", '    if ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:456:gen_class_decl; method - ['        class_type = gu.select_class_type(field_type is not None)\n', '        is_final = ut.randomUtil.bool() and class_type == \\\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2128:gen_type_params; method - ['        """\n', '        if not count and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:519:_select_superclass; method - ['            return None\n', '        class_decl = ut.randomUtil.choice(class_decls)\n']; args - ([Peeved, Kilowatt],), kwargs - {}, result - interface Peeved<J <: Char, L <: J> {

   }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Char(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Char(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:577:gen_class_fields; method - ['                .get_overridable_fields()\n', '            k = ut.randomUtil.integer(0, min(max_fields, len(overridable_fields)))\n']; args - (0, 0), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:593:gen_class_fields; method - ['                return fields\n', '            for _ in range(ut.randomUtil.integer(0, max_fields)):\n']; args - (0, 2), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - sheep
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:851:gen_field_decl; method - ['        can_override = not class_is_final and ut.randomUtil.bool()\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Boolean(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - fourth
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:340:gen_func_decl; method - ['                    for_function=True\n', '                ) if ut.randomUtil.bool(prob=cfg.prob.parameterized_functions) \\\n']; args - (), kwargs - {'prob': 0.3}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2128:gen_type_params; method - ['        """\n', '        if not count and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2139:gen_type_params; method - ['        )\n', '        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n']; args - (1, 3), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2140:gen_type_params; method - ['        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n', '            name = ut.randomUtil.caps(blacklist=type_param_names)\n']; args - (), kwargs - {'blacklist': []}, result - N
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2151:gen_type_params; method - ['            bound = None\n', '            if ut.randomUtil.bool(cfg.prob.bounded_type_parameters):\n']; args - (0.5,), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:353:gen_func_decl; method - ['                self._gen_func_params()\n', '                if (ut.randomUtil.bool(prob=0.25) or is_interface)\n']; args - (), kwargs - {'prob': 0.25}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:395:_gen_func_params_with_default; method - ['        params = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_params)):\n']; args - (0, 2), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - writhe
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([F_N],), kwargs - {}, result - F_N
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:398:_gen_func_params_with_default; method - ['            if not has_default:\n', '                has_default = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([F_N],), kwargs - {}, result - F_N
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37010>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37010>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - roulette
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - 32
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35bd0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35c60>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35cf0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde370a0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde37010>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde364d0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35cf0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Byte(kotlin-builtin)],), kwargs - {}, result - Byte(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Int(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Boolean(kotlin-builtin)],), kwargs - {}, result - Boolean(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Double(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Function3<Byte(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Double(kotlin-builtin)>],), kwargs - {}, result - Function3<Byte(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Double(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffb00c427a0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffb00c427a0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1855:_gen_func_ref_lambda; method - ['        # We are unable to produce function references in super calls.\n', '        if ut.randomUtil.bool(cfg.prob.func_ref) and not self._in_super_call:\n']; args - (0.5,), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - parkway
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - dakota
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - brenton
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35900>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36c20>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36ef0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffb00c6d090>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffb00c409d0>, <function gen_real_constant at 0x7ffafdfcda20>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffb00c409d0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffb00c6d090>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1548:gen_func_call; method - ['        """\n', '        if ut.randomUtil.bool(cfg.prob.func_ref_call):\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2611:_gen_matching_func; method - ['        gen_method = (\n', '                ut.randomUtil.bool() or\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2623:_gen_matching_func; method - ['                self.namespace\n', '                if ut.randomUtil.bool() or etype.has_type_variables()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - microcosm
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:340:gen_func_decl; method - ['                    for_function=True\n', '                ) if ut.randomUtil.bool(prob=cfg.prob.parameterized_functions) \\\n']; args - (), kwargs - {'prob': 0.3}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:353:gen_func_decl; method - ['                self._gen_func_params()\n', '                if (ut.randomUtil.bool(prob=0.25) or is_interface)\n']; args - (), kwargs - {'prob': 0.25}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:395:_gen_func_params_with_default; method - ['        params = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_params)):\n']; args - (0, 2), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - foodstuff
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Float(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:398:_gen_func_params_with_default; method - ['            if not has_default:\n', '                has_default = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Float(kotlin-builtin)],), kwargs - {}, result - Float(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_real_constant at 0x7ffafdfcda20>],), kwargs - {}, result - <function gen_real_constant at 0x7ffafdfcda20>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:35:gen_real_constant; method - ['    """\n', '    prefix = str(utils.randomUtil.integer(0, 100))\n']; args - (0, 100), kwargs - {}, result - 29
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:36:gen_real_constant; method - ['    prefix = str(utils.randomUtil.integer(0, 100))\n', '    suffix = str(utils.randomUtil.integer(0, 1000))\n']; args - (0, 1000), kwargs - {}, result - 822
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:37:gen_real_constant; method - ['    suffix = str(utils.randomUtil.integer(0, 1000))\n', "    sign = utils.randomUtil.choice(['', '-'])\n"]; args - (['', '-'],), kwargs - {}, result - -
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - harelips
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Peeved<J <: Char, L <: J>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Char(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Char(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36b00>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36b00>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Defectors],), kwargs - {}, result - class Defectors : Peeved {
  sheep: Boolean(kotlin-builtin)
  <F_N> fun fourth(writhe: F_N = _B_,roulette: Int(kotlin-builtin) = 32): Function3<Byte(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Double(kotlin-builtin)> =
  _B_ }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_bool_constant at 0x7ffafdfcdab0>],), kwargs - {}, result - <function gen_bool_constant at 0x7ffafdfcdab0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:45:gen_bool_constant; method - ['    """\n', "    return ast.BooleanConstant(utils.randomUtil.choice(['true', 'false']))\n"]; args - (['true', 'false'],), kwargs - {}, result - true
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_real_constant at 0x7ffafdfcda20>],), kwargs - {}, result - <function gen_real_constant at 0x7ffafdfcda20>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:35:gen_real_constant; method - ['    """\n', '    prefix = str(utils.randomUtil.integer(0, 100))\n']; args - (0, 100), kwargs - {}, result - 14
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:36:gen_real_constant; method - ['    prefix = str(utils.randomUtil.integer(0, 100))\n', '    suffix = str(utils.randomUtil.integer(0, 1000))\n']; args - (0, 1000), kwargs - {}, result - 901
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:37:gen_real_constant; method - ['    suffix = str(utils.randomUtil.integer(0, 1000))\n', "    sign = utils.randomUtil.choice(['', '-'])\n"]; args - (['', '-'],), kwargs - {}, result - -
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2344:_gen_func_body; method - ['            # type is not Unit. So, we can create an expression-based function.\n', '            body = expr if ut.randomUtil.bool(cfg.prob.function_expr) else \\\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1589:_gen_func_call; method - ['\n', '        rand_func = ut.randomUtil.choice(funcs)\n']; args - ([AttrReceiverInfo(receiver_expr=None, receiver_inst={}, attr_decl=microcosm, attr_inst={})],), kwargs - {}, result - AttrReceiverInfo(receiver_expr=None, receiver_inst={}, attr_decl=microcosm, attr_inst={})
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_real_constant at 0x7ffafdfcda20>],), kwargs - {}, result - <function gen_real_constant at 0x7ffafdfcda20>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:35:gen_real_constant; method - ['    """\n', '    prefix = str(utils.randomUtil.integer(0, 100))\n']; args - (0, 100), kwargs - {}, result - 72
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:36:gen_real_constant; method - ['    prefix = str(utils.randomUtil.integer(0, 100))\n', '    suffix = str(utils.randomUtil.integer(0, 1000))\n']; args - (0, 1000), kwargs - {}, result - 388
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:37:gen_real_constant; method - ['    suffix = str(utils.randomUtil.integer(0, 1000))\n', "    sign = utils.randomUtil.choice(['', '-'])\n"]; args - (['', '-'],), kwargs - {}, result - -
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - angelina
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - nineteen
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde36950>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde365f0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde36950>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1548:gen_func_call; method - ['        """\n', '        if ut.randomUtil.bool(cfg.prob.func_ref_call):\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2611:_gen_matching_func; method - ['        gen_method = (\n', '                ut.randomUtil.bool() or\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2623:_gen_matching_func; method - ['                self.namespace\n', '                if ut.randomUtil.bool() or etype.has_type_variables()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - hatsheput
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:340:gen_func_decl; method - ['                    for_function=True\n', '                ) if ut.randomUtil.bool(prob=cfg.prob.parameterized_functions) \\\n']; args - (), kwargs - {'prob': 0.3}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:353:gen_func_decl; method - ['                self._gen_func_params()\n', '                if (ut.randomUtil.bool(prob=0.25) or is_interface)\n']; args - (), kwargs - {'prob': 0.25}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:395:_gen_func_params_with_default; method - ['        params = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_params)):\n']; args - (0, 2), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Unit(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Int(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - -18
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - cower
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde36b90>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36710>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde36b90>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1548:gen_func_call; method - ['        """\n', '        if ut.randomUtil.bool(cfg.prob.func_ref_call):\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2611:_gen_matching_func; method - ['        gen_method = (\n', '                ut.randomUtil.bool() or\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2623:_gen_matching_func; method - ['                self.namespace\n', '                if ut.randomUtil.bool() or etype.has_type_variables()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - rummer
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:353:gen_func_decl; method - ['                self._gen_func_params()\n', '                if (ut.randomUtil.bool(prob=0.25) or is_interface)\n']; args - (), kwargs - {'prob': 0.25}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2288:_gen_func_params; method - ['        vararg = None\n', '        for i in range(ut.randomUtil.integer(0, cfg.limits.fn.max_params)):\n']; args - (0, 2), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Unit(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Function1<A1, R>  <: Any(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Any(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35900>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffb00c409d0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35900>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1855:_gen_func_ref_lambda; method - ['        # We are unable to produce function references in super calls.\n', '        if ut.randomUtil.bool(cfg.prob.func_ref) and not self._in_super_call:\n']; args - (0.5,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2611:_gen_matching_func; method - ['        gen_method = (\n', '                ut.randomUtil.bool() or\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - astounded
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:80:select_class_type; method - ["    # there's higher probability to generate a regular class.\n", '    if ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:86:select_class_type; method - ['        candidates.append(ast.ClassDeclaration.INTERFACE)\n', '    return ut.randomUtil.choice(candidates)\n']; args - ([2, 1],), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:456:gen_class_decl; method - ['        class_type = gu.select_class_type(field_type is not None)\n', '        is_final = ut.randomUtil.bool() and class_type == \\\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2128:gen_type_params; method - ['        """\n', '        if not count and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2139:gen_type_params; method - ['        )\n', '        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n']; args - (1, 3), kwargs - {}, result - 3
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2140:gen_type_params; method - ['        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n', '            name = ut.randomUtil.caps(blacklist=type_param_names)\n']; args - (), kwargs - {'blacklist': []}, result - N
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2151:gen_type_params; method - ['            bound = None\n', '            if ut.randomUtil.bool(cfg.prob.bounded_type_parameters):\n']; args - (0.5,), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2140:gen_type_params; method - ['        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n', '            name = ut.randomUtil.caps(blacklist=type_param_names)\n']; args - (), kwargs - {'blacklist': ['N']}, result - Z
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2151:gen_type_params; method - ['            bound = None\n', '            if ut.randomUtil.bool(cfg.prob.bounded_type_parameters):\n']; args - (0.5,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Any(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2140:gen_type_params; method - ['        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n', '            name = ut.randomUtil.caps(blacklist=type_param_names)\n']; args - (), kwargs - {'blacklist': ['N', 'Z']}, result - R
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2151:gen_type_params; method - ['            bound = None\n', '            if ut.randomUtil.bool(cfg.prob.bounded_type_parameters):\n']; args - (0.5,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Function0<R>  <: Any(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([N, Z <: Any],), kwargs - {}, result - N
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:519:_select_superclass; method - ['            return None\n', '        class_decl = ut.randomUtil.choice(class_decls)\n']; args - ([Peeved, Kilowatt],), kwargs - {}, result - interface Kilowatt : Peeved {

  fun only(cancer: Boolean(kotlin-builtin),procurer: Float(kotlin-builtin),morally: Char(kotlin-builtin)): Byte(kotlin-builtin) =
  None
  fun addicting(): Int(kotlin-builtin) =
  None }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - agism
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - stickups
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:340:gen_func_decl; method - ['                    for_function=True\n', '                ) if ut.randomUtil.bool(prob=cfg.prob.parameterized_functions) \\\n']; args - (), kwargs - {'prob': 0.3}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Any(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Double(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Function0<Double(kotlin-builtin)>],), kwargs - {}, result - Function0<Double(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Double(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Char(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Double(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Function0<Double(kotlin-builtin)>],), kwargs - {}, result - Function0<Double(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Astounded<Double(kotlin-builtin), Char(kotlin-builtin), Function0<Double(kotlin-builtin)>>],), kwargs - {}, result - Astounded<Double(kotlin-builtin), Char(kotlin-builtin), Function0<Double(kotlin-builtin)>>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde368c0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36a70>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36a70>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Double(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Char(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Double(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Function0<Double(kotlin-builtin)>],), kwargs - {}, result - Function0<Double(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Astounded<Double(kotlin-builtin), Char(kotlin-builtin), Function0<Double(kotlin-builtin)>>],), kwargs - {}, result - Astounded<Double(kotlin-builtin), Char(kotlin-builtin), Function0<Double(kotlin-builtin)>>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36680>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36680>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - hibachi
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - couple
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - cultured
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37250>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde363b0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde363b0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1005:gen_assignment; method - ['                                                     only_leaves, subtype))\n', '        receiver, variable = ut.randomUtil.choice(variables)\n']; args - ([(None, preparing), (None, routed), (None, cower), (None, hibachi), (None, couple)],), kwargs - {}, result - (None, preparing)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - 86
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1589:_gen_func_call; method - ['\n', '        rand_func = ut.randomUtil.choice(funcs)\n']; args - ([AttrReceiverInfo(receiver_expr=None, receiver_inst={}, attr_decl=rummer, attr_inst={})],), kwargs - {}, result - AttrReceiverInfo(receiver_expr=None, receiver_inst={}, attr_decl=rummer, attr_inst={})
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1589:_gen_func_call; method - ['\n', '        rand_func = ut.randomUtil.choice(funcs)\n']; args - ([AttrReceiverInfo(receiver_expr=None, receiver_inst={}, attr_decl=hatsheput, attr_inst={})],), kwargs - {}, result - AttrReceiverInfo(receiver_expr=None, receiver_inst={}, attr_decl=hatsheput, attr_inst={})
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2344:_gen_func_body; method - ['            # type is not Unit. So, we can create an expression-based function.\n', '            body = expr if ut.randomUtil.bool(cfg.prob.function_expr) else \\\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:701:gen_class_functions; method - ['                return funcs\n', '            k = ut.randomUtil.integer(0, min(max_funcs, len_over_f))\n']; args - (0, 0), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/utils.py:212:sample; method - ['        self.call = "sample {} k={}".format(str(choices), k)\n', '        k = k or self.integer(0, len(choices))\n']; args - (0, 0), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:705:gen_class_functions; method - ['                if not max_funcs or curr_cls.is_interface()\n', '                else ut.randomUtil.sample(overridable_funcs, k=k)\n']; args - ([],), kwargs - {'k': 0}, result - []
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:716:gen_class_functions; method - ['                return funcs\n', '            for _ in range(ut.randomUtil.integer(0, max_funcs)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)],), kwargs - {}, result - Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36c20>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35870>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36dd0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde36830>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36560>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36680>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35870>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35a20>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36440>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37370>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde36b00>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde35900>, <function gen_bool_constant at 0x7ffafdfcdab0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36e60>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde369e0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde367a0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde35900>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde35900>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Boolean(kotlin-builtin)],), kwargs - {}, result - Boolean(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37910>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36cb0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde377f0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37400>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36a70>, <function gen_bool_constant at 0x7ffafdfcdab0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37760>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37520>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37490>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37520>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin)],), kwargs - {}, result - Boolean(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1203:gen_equality_expr; method - ['        etype = self.select_type(exclude_function_types=exclude_function_types)\n', '        op = ut.randomUtil.choice(ast.EqualityExpr.VALID_OPERATORS[self.language])\n']; args - ([<src.ir.ast.Operator object at 0x7ffafde7ef50>, <src.ir.ast.Operator object at 0x7ffafde7efb0>],), kwargs - {}, result - !=
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_bool_constant at 0x7ffafdfcdab0>],), kwargs - {}, result - <function gen_bool_constant at 0x7ffafdfcdab0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:45:gen_bool_constant; method - ['    """\n', "    return ast.BooleanConstant(utils.randomUtil.choice(['true', 'false']))\n"]; args - (['true', 'false'],), kwargs - {}, result - true
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_bool_constant at 0x7ffafdfcdab0>],), kwargs - {}, result - <function gen_bool_constant at 0x7ffafdfcdab0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:45:gen_bool_constant; method - ['    """\n', "    return ast.BooleanConstant(utils.randomUtil.choice(['true', 'false']))\n"]; args - (['true', 'false'],), kwargs - {}, result - true
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - deodorant
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1316:gen_conditional; method - ['                                        include_self=True, concrete_only=True)\n', '            true_type = ut.randomUtil.choice(subtypes)\n']; args - ([Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)],), kwargs - {}, result - Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1317:gen_conditional; method - ['            true_type = ut.randomUtil.choice(subtypes)\n', '            false_type = ut.randomUtil.choice(subtypes)\n']; args - ([Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)],), kwargs - {}, result - Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1318:gen_conditional; method - ['            false_type = ut.randomUtil.choice(subtypes)\n', '            tmp_t = ut.randomUtil.choice(subtypes)\n']; args - ([Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)],), kwargs - {}, result - Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37be0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37640>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37e20>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37c70>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde37ac0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37a30>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37be0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - enclave
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:80:select_class_type; method - ["    # there's higher probability to generate a regular class.\n", '    if ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:86:select_class_type; method - ['        candidates.append(ast.ClassDeclaration.INTERFACE)\n', '    return ut.randomUtil.choice(candidates)\n']; args - ([2],), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:456:gen_class_decl; method - ['        class_type = gu.select_class_type(field_type is not None)\n', '        is_final = ut.randomUtil.bool() and class_type == \\\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2128:gen_type_params; method - ['        """\n', '        if not count and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:519:_select_superclass; method - ['            return None\n', '        class_decl = ut.randomUtil.choice(class_decls)\n']; args - ([Peeved, Kilowatt, Astounded],), kwargs - {}, result - interface Astounded<N, Z <: Any, R <: Function0<N>> : Kilowatt {

  fun stickups(agism: String(kotlin-builtin)): Any(kotlin-builtin) =
  None }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave, Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Float(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Any(kotlin-builtin)],), kwargs - {}, result - Float(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Float(kotlin-builtin)],), kwargs - {}, result - Float(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Function0<Float(kotlin-builtin)>],), kwargs - {}, result - Function0<Float(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - billows
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:850:gen_field_decl; method - ["        name = gu.gen_identifier('lower')\n", '        can_override = not class_is_final and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:851:gen_field_decl; method - ['        can_override = not class_is_final and ut.randomUtil.bool()\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:577:gen_class_fields; method - ['                .get_overridable_fields()\n', '            k = ut.randomUtil.integer(0, min(max_fields, len(overridable_fields)))\n']; args - (0, 0), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:593:gen_class_fields; method - ['                return fields\n', '            for _ in range(ut.randomUtil.integer(0, max_fields)):\n']; args - (0, 1), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - duodenum
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:850:gen_field_decl; method - ["        name = gu.gen_identifier('lower')\n", '        can_override = not class_is_final and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:851:gen_field_decl; method - ['        can_override = not class_is_final and ut.randomUtil.bool()\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Array<out T>  <: Any(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:701:gen_class_functions; method - ['                return funcs\n', '            k = ut.randomUtil.integer(0, min(max_funcs, len_over_f))\n']; args - (0, 1), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:705:gen_class_functions; method - ['                if not max_funcs or curr_cls.is_interface()\n', '                else ut.randomUtil.sample(overridable_funcs, k=k)\n']; args - ([stickups],), kwargs - {'k': 1}, result - [stickups]
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:314:gen_func_decl; method - ['        can_override = abstract or is_interface or (class_method and not\n', '        class_is_final and ut.randomUtil.bool())\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>],), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Boolean(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Boolean(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>],), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)>, Function0<Double(kotlin-builtin)>, Function1<in String, out Int>, Function2<Int(kotlin-builtin), in Enclave, Boolean(kotlin-builtin)>, Function3<in Boolean, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), in Defectors, out Long>, Any(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_string_constant at 0x7ffafe120310>],), kwargs - {}, result - <function gen_string_constant at 0x7ffafe120310>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - lassos
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2344:_gen_func_body; method - ['            # type is not Unit. So, we can create an expression-based function.\n', '            body = expr if ut.randomUtil.bool(cfg.prob.function_expr) else \\\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:716:gen_class_functions; method - ['                return funcs\n', '            for _ in range(ut.randomUtil.integer(0, max_funcs)):\n']; args - (0, 1), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - fashions
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:340:gen_func_decl; method - ['                    for_function=True\n', '                ) if ut.randomUtil.bool(prob=cfg.prob.parameterized_functions) \\\n']; args - (), kwargs - {'prob': 0.3}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:353:gen_func_decl; method - ['                self._gen_func_params()\n', '                if (ut.randomUtil.bool(prob=0.25) or is_interface)\n']; args - (), kwargs - {'prob': 0.25}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:395:_gen_func_params_with_default; method - ['        params = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_params)):\n']; args - (0, 2), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - abducted
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:398:_gen_func_params_with_default; method - ['            if not has_default:\n', '                has_default = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - acronyms
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:398:_gen_func_params_with_default; method - ['            if not has_default:\n', '                has_default = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2191:_get_func_ret_type; method - ["                                  'variance', None) != tp.Contravariant]\n", '        if param_types and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Number(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:357:gen_func_decl; method - ['        ret_type = self._get_func_ret_type(params, etype, not_void=not_void)\n', '        if is_interface or (abstract and ut.randomUtil.bool()):\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)],), kwargs - {}, result - Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde377f0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde377f0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1122:gen_field_access; method - ['        objs = [(obj.receiver_expr, obj.attr_decl) for obj in objs]\n', '        receiver, attr = ut.randomUtil.choice(objs)\n']; args - ([(<src.ir.ast.BottomConstant object at 0x7ffafdef49a0>, billows)],), kwargs - {}, result - (<src.ir.ast.BottomConstant object at 0x7ffafdef49a0>, billows)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37520>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37400>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36440>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde368c0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde37490>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35a20>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35a20>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Defectors],), kwargs - {}, result - class Defectors : Peeved {
  sheep: Boolean(kotlin-builtin)
  <F_N> fun fourth(writhe: F_N = _B_,roulette: Int(kotlin-builtin) = 32): Function3<Byte(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Double(kotlin-builtin)> =
  lambda (parkway: Byte(kotlin-builtin),dakota: Int(kotlin-builtin),brenton: Boolean(kotlin-builtin)): Double(kotlin-builtin) =
  {
  val angelina: Float(kotlin-builtin) = -72.388
  val nineteen: Double(kotlin-builtin) = microcosm()
  hatsheput()
  nineteen
} }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_bool_constant at 0x7ffafdfcdab0>],), kwargs - {}, result - <function gen_bool_constant at 0x7ffafdfcdab0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:45:gen_bool_constant; method - ['    """\n', "    return ast.BooleanConstant(utils.randomUtil.choice(['true', 'false']))\n"]; args - (['true', 'false'],), kwargs - {}, result - true
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1589:_gen_func_call; method - ['\n', '        rand_func = ut.randomUtil.choice(funcs)\n']; args - ([AttrReceiverInfo(receiver_expr=<src.ir.ast.Conditional object at 0x7ffafded7f10>, receiver_inst={}, attr_decl=fourth, attr_inst={F_N: Double(kotlin-builtin)})],), kwargs - {}, result - AttrReceiverInfo(receiver_expr=<src.ir.ast.Conditional object at 0x7ffafded7f10>, receiver_inst={}, attr_decl=fourth, attr_inst={F_N: Double(kotlin-builtin)})
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35900>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36cb0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37760>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde369e0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36e60>, <function gen_real_constant at 0x7ffafdfcda20>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36e60>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35900>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - ashamedly
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:80:select_class_type; method - ["    # there's higher probability to generate a regular class.\n", '    if ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:456:gen_class_decl; method - ['        class_type = gu.select_class_type(field_type is not None)\n', '        is_final = ut.randomUtil.bool() and class_type == \\\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2128:gen_type_params; method - ['        """\n', '        if not count and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:519:_select_superclass; method - ['            return None\n', '        class_decl = ut.randomUtil.choice(class_decls)\n']; args - ([Peeved, Kilowatt, Astounded, Enclave],), kwargs - {}, result - interface Astounded<N, Z <: Any, R <: Function0<N>> : Kilowatt {

  fun stickups(agism: String(kotlin-builtin)): Any(kotlin-builtin) =
  None }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly, Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Number(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Any(kotlin-builtin)],), kwargs - {}, result - Short(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Number(kotlin-builtin)],), kwargs - {}, result - Number(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Function0<Number(kotlin-builtin)>],), kwargs - {}, result - Function0<Number(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - colonial
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:850:gen_field_decl; method - ["        name = gu.gen_identifier('lower')\n", '        can_override = not class_is_final and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:851:gen_field_decl; method - ['        can_override = not class_is_final and ut.randomUtil.bool()\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:577:gen_class_fields; method - ['                .get_overridable_fields()\n', '            k = ut.randomUtil.integer(0, min(max_fields, len(overridable_fields)))\n']; args - (0, 0), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:593:gen_class_fields; method - ['                return fields\n', '            for _ in range(ut.randomUtil.integer(0, max_fields)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:314:gen_func_decl; method - ['        can_override = abstract or is_interface or (class_method and not\n', '        class_is_final and ut.randomUtil.bool())\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>],), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Float(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>],), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Byte(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Float(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>],), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Any(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Short(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>],), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<Int(kotlin-builtin)>, Function0<out Defectors>, Function1<in Int, out Float>, Function2<Byte(kotlin-builtin), in Float, out Char>, Function3<Any(kotlin-builtin), in Enclave, in Long, out Short>, Any(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - -77
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2344:_gen_func_body; method - ['            # type is not Unit. So, we can create an expression-based function.\n', '            body = expr if ut.randomUtil.bool(cfg.prob.function_expr) else \\\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:314:gen_func_decl; method - ['        can_override = abstract or is_interface or (class_method and not\n', '        class_is_final and ut.randomUtil.bool())\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Int(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - -79
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - roumania
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:314:gen_func_decl; method - ['        can_override = abstract or is_interface or (class_method and not\n', '        class_is_final and ut.randomUtil.bool())\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - 84
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - borrowers
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde376d0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37d90>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36a70>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde36b00>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde37d00>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37b50>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde37d00>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf08280>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf08310>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf083a0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37370>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde37f40>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde367a0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf08310>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Boolean(kotlin-builtin)],), kwargs - {}, result - Boolean(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_bool_constant at 0x7ffafdfcdab0>],), kwargs - {}, result - <function gen_bool_constant at 0x7ffafdfcdab0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:45:gen_bool_constant; method - ['    """\n', "    return ast.BooleanConstant(utils.randomUtil.choice(['true', 'false']))\n"]; args - (['true', 'false'],), kwargs - {}, result - true
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1316:gen_conditional; method - ['                                        include_self=True, concrete_only=True)\n', '            true_type = ut.randomUtil.choice(subtypes)\n']; args - ([Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1317:gen_conditional; method - ['            true_type = ut.randomUtil.choice(subtypes)\n', '            false_type = ut.randomUtil.choice(subtypes)\n']; args - ([Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1318:gen_conditional; method - ['            false_type = ut.randomUtil.choice(subtypes)\n', '            tmp_t = ut.randomUtil.choice(subtypes)\n']; args - ([Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf08700>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf08700>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Ashamedly],), kwargs - {}, result - class Ashamedly : Astounded {
  colonial: Double(kotlin-builtin)
  fun stickups(agism: String(kotlin-builtin)): Any(kotlin-builtin) =
  -77
  fun addicting(): Int(kotlin-builtin) =
  {
  val roumania: Int(kotlin-builtin) = -79
  roumania
}
  fun only(cancer: Boolean(kotlin-builtin),procurer: Float(kotlin-builtin),morally: Char(kotlin-builtin)): Byte(kotlin-builtin) =
  {
  var borrowers: Byte(kotlin-builtin) = 84
  borrowers
} }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_real_constant at 0x7ffafdfcda20>],), kwargs - {}, result - <function gen_real_constant at 0x7ffafdfcda20>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:35:gen_real_constant; method - ['    """\n', '    prefix = str(utils.randomUtil.integer(0, 100))\n']; args - (0, 100), kwargs - {}, result - 77
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:36:gen_real_constant; method - ['    prefix = str(utils.randomUtil.integer(0, 100))\n', '    suffix = str(utils.randomUtil.integer(0, 1000))\n']; args - (0, 1000), kwargs - {}, result - 520
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:37:gen_real_constant; method - ['    suffix = str(utils.randomUtil.integer(0, 1000))\n', "    sign = utils.randomUtil.choice(['', '-'])\n"]; args - (['', '-'],), kwargs - {}, result -
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf08790>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf08790>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Ashamedly],), kwargs - {}, result - class Ashamedly : Astounded {
  colonial: Double(kotlin-builtin)
  fun stickups(agism: String(kotlin-builtin)): Any(kotlin-builtin) =
  -77
  fun addicting(): Int(kotlin-builtin) =
  {
  val roumania: Int(kotlin-builtin) = -79
  roumania
}
  fun only(cancer: Boolean(kotlin-builtin),procurer: Float(kotlin-builtin),morally: Char(kotlin-builtin)): Byte(kotlin-builtin) =
  {
  var borrowers: Byte(kotlin-builtin) = 84
  borrowers
} }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_real_constant at 0x7ffafdfcda20>],), kwargs - {}, result - <function gen_real_constant at 0x7ffafdfcda20>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:35:gen_real_constant; method - ['    """\n', '    prefix = str(utils.randomUtil.integer(0, 100))\n']; args - (0, 100), kwargs - {}, result - 42
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:36:gen_real_constant; method - ['    prefix = str(utils.randomUtil.integer(0, 100))\n', '    suffix = str(utils.randomUtil.integer(0, 1000))\n']; args - (0, 1000), kwargs - {}, result - 236
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:37:gen_real_constant; method - ['    suffix = str(utils.randomUtil.integer(0, 1000))\n', "    sign = utils.randomUtil.choice(['', '-'])\n"]; args - (['', '-'],), kwargs - {}, result - -
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1122:gen_field_access; method - ['        objs = [(obj.receiver_expr, obj.attr_decl) for obj in objs]\n', '        receiver, attr = ut.randomUtil.choice(objs)\n']; args - ([(<src.ir.ast.Conditional object at 0x7ffafdf07dc0>, colonial)],), kwargs - {}, result - (<src.ir.ast.Conditional object at 0x7ffafdf07dc0>, colonial)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Int(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf085e0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf08160>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf081f0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf08550>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf080d0>, <function gen_integer_constant at 0x7ffafdfcd990>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf080d0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf080d0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1161:gen_variable; method - ['                                      subtype=subtype, exclude_var=True)\n', '        varia = ut.randomUtil.choice([v.name for v in variables])\n']; args - (['coaching', 'preparing', 'routed'],), kwargs - {}, result - routed
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - coxcombs
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:118:gen_top_level_declaration; method - ['        ]\n', '        gen_func = ut.randomUtil.choice(candidates)\n']; args - ([<bound method Generator.gen_variable_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>, <bound method Generator.gen_class_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>, <bound method Generator.gen_func_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>],), kwargs - {}, result - <bound method Generator.gen_func_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - waite
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:340:gen_func_decl; method - ['                    for_function=True\n', '                ) if ut.randomUtil.bool(prob=cfg.prob.parameterized_functions) \\\n']; args - (), kwargs - {'prob': 0.3}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2128:gen_type_params; method - ['        """\n', '        if not count and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:353:gen_func_decl; method - ['                self._gen_func_params()\n', '                if (ut.randomUtil.bool(prob=0.25) or is_interface)\n']; args - (), kwargs - {'prob': 0.25}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:395:_gen_func_params_with_default; method - ['        params = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_params)):\n']; args - (0, 2), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Double(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36b00>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37d00>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37b50>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37f40>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde37370>, <function gen_real_constant at 0x7ffafdfcda20>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde37370>],), kwargs - {}, result - <function gen_real_constant at 0x7ffafdfcda20>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:35:gen_real_constant; method - ['    """\n', '    prefix = str(utils.randomUtil.integer(0, 100))\n']; args - (0, 100), kwargs - {}, result - 15
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:36:gen_real_constant; method - ['    prefix = str(utils.randomUtil.integer(0, 100))\n', '    suffix = str(utils.randomUtil.integer(0, 1000))\n']; args - (0, 1000), kwargs - {}, result - 333
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:37:gen_real_constant; method - ['    suffix = str(utils.randomUtil.integer(0, 1000))\n', "    sign = utils.randomUtil.choice(['', '-'])\n"]; args - (['', '-'],), kwargs - {}, result -
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2344:_gen_func_body; method - ['            # type is not Unit. So, we can create an expression-based function.\n', '            body = expr if ut.randomUtil.bool(cfg.prob.function_expr) else \\\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:118:gen_top_level_declaration; method - ['        ]\n', '        gen_func = ut.randomUtil.choice(candidates)\n']; args - ([<bound method Generator.gen_variable_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>, <bound method Generator.gen_class_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>, <bound method Generator.gen_func_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>],), kwargs - {}, result - <bound method Generator.gen_func_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - flubs
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:340:gen_func_decl; method - ['                    for_function=True\n', '                ) if ut.randomUtil.bool(prob=cfg.prob.parameterized_functions) \\\n']; args - (), kwargs - {'prob': 0.3}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2128:gen_type_params; method - ['        """\n', '        if not count and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:353:gen_func_decl; method - ['                self._gen_func_params()\n', '                if (ut.randomUtil.bool(prob=0.25) or is_interface)\n']; args - (), kwargs - {'prob': 0.25}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:395:_gen_func_params_with_default; method - ['        params = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_params)):\n']; args - (0, 2), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Int(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36a70>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37eb0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde367a0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37d00>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36b00>, <function gen_integer_constant at 0x7ffafdfcd990>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36b00>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde367a0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Int(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - 58
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2344:_gen_func_body; method - ['            # type is not Unit. So, we can create an expression-based function.\n', '            body = expr if ut.randomUtil.bool(cfg.prob.function_expr) else \\\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:118:gen_top_level_declaration; method - ['        ]\n', '        gen_func = ut.randomUtil.choice(candidates)\n']; args - ([<bound method Generator.gen_variable_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>, <bound method Generator.gen_class_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>, <bound method Generator.gen_func_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>],), kwargs - {}, result - <bound method Generator.gen_variable_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35900>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36cb0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37b50>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde369e0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde37760>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36e60>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde369e0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1548:gen_func_call; method - ['        """\n', '        if ut.randomUtil.bool(cfg.prob.func_ref_call):\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2611:_gen_matching_func; method - ['        gen_method = (\n', '                ut.randomUtil.bool() or\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2623:_gen_matching_func; method - ['                self.namespace\n', '                if ut.randomUtil.bool() or etype.has_type_variables()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - raccoon
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:340:gen_func_decl; method - ['                    for_function=True\n', '                ) if ut.randomUtil.bool(prob=cfg.prob.parameterized_functions) \\\n']; args - (), kwargs - {'prob': 0.3}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:353:gen_func_decl; method - ['                self._gen_func_params()\n', '                if (ut.randomUtil.bool(prob=0.25) or is_interface)\n']; args - (), kwargs - {'prob': 0.25}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:395:_gen_func_params_with_default; method - ['        params = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_params)):\n']; args - (0, 2), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - raster
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:398:_gen_func_params_with_default; method - ['            if not has_default:\n', '                has_default = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37910>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37910>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1855:_gen_func_ref_lambda; method - ['        # We are unable to produce function references in super calls.\n', '        if ut.randomUtil.bool(cfg.prob.func_ref) and not self._in_super_call:\n']; args - (0.5,), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - sheller
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - girlhood
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - bayonet
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)],), kwargs - {}, result - Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37400>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37370>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35a20>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde368c0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36440>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37490>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35a20>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)],), kwargs - {}, result - Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde376d0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde376d0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - crushed
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37d90>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10040>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10040>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1005:gen_assignment; method - ['                                                     only_leaves, subtype))\n', '        receiver, variable = ut.randomUtil.choice(variables)\n']; args - ([(None, preparing), (None, routed), (None, deodorant)],), kwargs - {}, result - (None, routed)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Int(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10310>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf103a0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10430>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37520>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde376d0>, <function gen_integer_constant at 0x7ffafdfcd990>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde376d0>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - 25
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - wadding
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf101f0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf101f0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Ashamedly],), kwargs - {}, result - class Ashamedly : Astounded {
  colonial: Double(kotlin-builtin)
  fun stickups(agism: String(kotlin-builtin)): Any(kotlin-builtin) =
  -77
  fun addicting(): Int(kotlin-builtin) =
  {
  val roumania: Int(kotlin-builtin) = -79
  roumania
}
  fun only(cancer: Boolean(kotlin-builtin),procurer: Float(kotlin-builtin),morally: Char(kotlin-builtin)): Byte(kotlin-builtin) =
  {
  var borrowers: Byte(kotlin-builtin) = 84
  borrowers
} }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_real_constant at 0x7ffafdfcda20>],), kwargs - {}, result - <function gen_real_constant at 0x7ffafdfcda20>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:35:gen_real_constant; method - ['    """\n', '    prefix = str(utils.randomUtil.integer(0, 100))\n']; args - (0, 100), kwargs - {}, result - 29
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:36:gen_real_constant; method - ['    prefix = str(utils.randomUtil.integer(0, 100))\n', '    suffix = str(utils.randomUtil.integer(0, 1000))\n']; args - (0, 1000), kwargs - {}, result - 927
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:37:gen_real_constant; method - ['    suffix = str(utils.randomUtil.integer(0, 1000))\n', "    sign = utils.randomUtil.choice(['', '-'])\n"]; args - (['', '-'],), kwargs - {}, result -
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)],), kwargs - {}, result - Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf105e0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10160>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf100d0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37d90>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde37f40>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37520>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37d90>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1548:gen_func_call; method - ['        """\n', '        if ut.randomUtil.bool(cfg.prob.func_ref_call):\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1684:_gen_func_call_ref; method - ['\n', '        signature, name, receiver = ut.randomUtil.choice(refs)\n']; args - ([(Function3<Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Int(kotlin-builtin), String(kotlin-builtin), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)>, 'raster', None)],), kwargs - {}, result - (Function3<Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Int(kotlin-builtin), String(kotlin-builtin), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)>, 'raster', None)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10670>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10040>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10310>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf10550>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde376d0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10280>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10670>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - toilets
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:80:select_class_type; method - ["    # there's higher probability to generate a regular class.\n", '    if ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:86:select_class_type; method - ['        candidates.append(ast.ClassDeclaration.INTERFACE)\n', '    return ut.randomUtil.choice(candidates)\n']; args - ([2],), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:456:gen_class_decl; method - ['        class_type = gu.select_class_type(field_type is not None)\n', '        is_final = ut.randomUtil.bool() and class_type == \\\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2128:gen_type_params; method - ['        """\n', '        if not count and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:519:_select_superclass; method - ['            return None\n', '        class_decl = ut.randomUtil.choice(class_decls)\n']; args - ([Peeved, Kilowatt, Astounded, Enclave, Ashamedly],), kwargs - {}, result - abstract class Enclave : Astounded {
  billows: Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)
  duodenum: Array<String(kotlin-builtin)>
  fun stickups(agism: String(kotlin-builtin)): Any(kotlin-builtin) =
  "lassos"
  fun fashions(abducted: String(kotlin-builtin),acronyms: Double(kotlin-builtin)): Function3<Int(kotlin-builtin), Number(kotlin-builtin), String(kotlin-builtin), Long(kotlin-builtin)> =
  None }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)],), kwargs - {}, result - Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf101f0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf101f0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Defectors],), kwargs - {}, result - class Defectors : Peeved {
  sheep: Boolean(kotlin-builtin)
  <F_N> fun fourth(writhe: F_N = _B_,roulette: Int(kotlin-builtin) = 32): Function3<Byte(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Double(kotlin-builtin)> =
  lambda (parkway: Byte(kotlin-builtin),dakota: Int(kotlin-builtin),brenton: Boolean(kotlin-builtin)): Double(kotlin-builtin) =
  {
  val angelina: Float(kotlin-builtin) = -72.388
  val nineteen: Double(kotlin-builtin) = microcosm()
  hatsheput()
  nineteen
} }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_bool_constant at 0x7ffafdfcdab0>],), kwargs - {}, result - <function gen_bool_constant at 0x7ffafdfcdab0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:45:gen_bool_constant; method - ['    """\n', "    return ast.BooleanConstant(utils.randomUtil.choice(['true', 'false']))\n"]; args - (['true', 'false'],), kwargs - {}, result - true
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([String(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Array<String(kotlin-builtin)>],), kwargs - {}, result - Array<String(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10af0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10af0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1176:gen_array_expr; method - ['        """\n', '        arr_len = ut.randomUtil.integer(0, 3)\n']; args - (0, 3), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([String(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_string_constant at 0x7ffafe120310>],), kwargs - {}, result - <function gen_string_constant at 0x7ffafe120310>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - detailing
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_string_constant at 0x7ffafe120310>],), kwargs - {}, result - <function gen_string_constant at 0x7ffafe120310>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - alighieri
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - wobbliest
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:850:gen_field_decl; method - ["        name = gu.gen_identifier('lower')\n", '        can_override = not class_is_final and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:851:gen_field_decl; method - ['        can_override = not class_is_final and ut.randomUtil.bool()\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:577:gen_class_fields; method - ['                .get_overridable_fields()\n', '            k = ut.randomUtil.integer(0, min(max_fields, len(overridable_fields)))\n']; args - (0, 1), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:579:gen_class_fields; method - ['            if overridable_fields:\n', '                chosen_fields = ut.randomUtil.sample(overridable_fields, k=k)\n']; args - ([billows],), kwargs - {'k': 1}, result - [billows]
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - beak
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:850:gen_field_decl; method - ["        name = gu.gen_identifier('lower')\n", '        can_override = not class_is_final and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:851:gen_field_decl; method - ['        can_override = not class_is_final and ut.randomUtil.bool()\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:593:gen_class_fields; method - ['                return fields\n', '            for _ in range(ut.randomUtil.integer(0, max_fields)):\n']; args - (0, 0), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:701:gen_class_functions; method - ['                return funcs\n', '            k = ut.randomUtil.integer(0, min(max_funcs, len_over_f))\n']; args - (0, 2), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/utils.py:212:sample; method - ['        self.call = "sample {} k={}".format(str(choices), k)\n', '        k = k or self.integer(0, len(choices))\n']; args - (0, 2), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:705:gen_class_functions; method - ['                if not max_funcs or curr_cls.is_interface()\n', '                else ut.randomUtil.sample(overridable_funcs, k=k)\n']; args - ([stickups, fashions],), kwargs - {'k': 0}, result - []
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:716:gen_class_functions; method - ['                return funcs\n', '            for _ in range(ut.randomUtil.integer(0, max_funcs)):\n']; args - (0, 2), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - marcie
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:340:gen_func_decl; method - ['                    for_function=True\n', '                ) if ut.randomUtil.bool(prob=cfg.prob.parameterized_functions) \\\n']; args - (), kwargs - {'prob': 0.3}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:353:gen_func_decl; method - ['                self._gen_func_params()\n', '                if (ut.randomUtil.bool(prob=0.25) or is_interface)\n']; args - (), kwargs - {'prob': 0.25}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:395:_gen_func_params_with_default; method - ['        params = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_params)):\n']; args - (0, 2), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - lest
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:398:_gen_func_params_with_default; method - ['            if not has_default:\n', '                has_default = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2191:_get_func_ret_type; method - ["                                  'variance', None) != tp.Contravariant]\n", '        if param_types and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2192:_get_func_ret_type; method - ['        if param_types and ut.randomUtil.bool():\n', '            return ut.randomUtil.choice(param_types)\n']; args - ([Long(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:357:gen_func_decl; method - ['        ret_type = self._get_func_ret_type(params, etype, not_void=not_void)\n', '        if is_interface or (abstract and ut.randomUtil.bool()):\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Long(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - 50
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - bound
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde368c0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37d00>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde368c0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1548:gen_func_call; method - ['        """\n', '        if ut.randomUtil.bool(cfg.prob.func_ref_call):\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2611:_gen_matching_func; method - ['        gen_method = (\n', '                ut.randomUtil.bool() or\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2623:_gen_matching_func; method - ['                self.namespace\n', '                if ut.randomUtil.bool() or etype.has_type_variables()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - backs
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:353:gen_func_decl; method - ['                self._gen_func_params()\n', '                if (ut.randomUtil.bool(prob=0.25) or is_interface)\n']; args - (), kwargs - {'prob': 0.25}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2288:_gen_func_params; method - ['        vararg = None\n', '        for i in range(ut.randomUtil.integer(0, cfg.limits.fn.max_params)):\n']; args - (0, 2), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - pilafs
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Unit(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Long(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde367a0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde37490>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde367a0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Shiva],), kwargs - {}, result - class Shiva<R <: Long> : Peeved {
  grumbled: Int(kotlin-builtin)
   }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - 42
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - warns
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - instance
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde35a20>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10a60>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10a60>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1005:gen_assignment; method - ['                                                     only_leaves, subtype))\n', '        receiver, variable = ut.randomUtil.choice(variables)\n']; args - ([(None, preparing), (None, routed), (None, deodorant), (None, bound), (None, instance)],), kwargs - {}, result - (None, preparing)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Int(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - 47
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1589:_gen_func_call; method - ['\n', '        rand_func = ut.randomUtil.choice(funcs)\n']; args - ([AttrReceiverInfo(receiver_expr=None, receiver_inst={}, attr_decl=backs, attr_inst={})],), kwargs - {}, result - AttrReceiverInfo(receiver_expr=None, receiver_inst={}, attr_decl=backs, attr_inst={})
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - -8
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - colander
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - olsen
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:340:gen_func_decl; method - ['                    for_function=True\n', '                ) if ut.randomUtil.bool(prob=cfg.prob.parameterized_functions) \\\n']; args - (), kwargs - {'prob': 0.3}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:353:gen_func_decl; method - ['                self._gen_func_params()\n', '                if (ut.randomUtil.bool(prob=0.25) or is_interface)\n']; args - (), kwargs - {'prob': 0.25}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2288:_gen_func_params; method - ['        vararg = None\n', '        for i in range(ut.randomUtil.integer(0, cfg.limits.fn.max_params)):\n']; args - (0, 2), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - cannibals
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Short(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - undiluted
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Function2<A1, A2, R>  <: Any(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Boolean(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2191:_get_func_ret_type; method - ["                                  'variance', None) != tp.Contravariant]\n", '        if param_types and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2192:_get_func_ret_type; method - ['        if param_types and ut.randomUtil.bool():\n', '            return ut.randomUtil.choice(param_types)\n']; args - ([Short(kotlin-builtin), Function2<Boolean(kotlin-builtin), Int(kotlin-builtin), Char(kotlin-builtin)>],), kwargs - {}, result - Function2<Boolean(kotlin-builtin), Int(kotlin-builtin), Char(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:357:gen_func_decl; method - ['        ret_type = self._get_func_ret_type(params, etype, not_void=not_void)\n', '        if is_interface or (abstract and ut.randomUtil.bool()):\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde368c0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36a70>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde368c0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1855:_gen_func_ref_lambda; method - ['        # We are unable to produce function references in super calls.\n', '        if ut.randomUtil.bool(cfg.prob.func_ref) and not self._in_super_call:\n']; args - (0.5,), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - noncoms
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - nonunion
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Char(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_char_constant at 0x7ffafdfcdb40>],), kwargs - {}, result - <function gen_char_constant at 0x7ffafdfcdb40>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:52:gen_char_constant; method - ['    """\n', '    return ast.CharConstant(utils.randomUtil.char())\n']; args - (), kwargs - {}, result - X
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - drowned
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37400>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10a60>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37400>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1548:gen_func_call; method - ['        """\n', '        if ut.randomUtil.bool(cfg.prob.func_ref_call):\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2611:_gen_matching_func; method - ['        gen_method = (\n', '                ut.randomUtil.bool() or\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2623:_gen_matching_func; method - ['                self.namespace\n', '                if ut.randomUtil.bool() or etype.has_type_variables()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - cassocks
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:353:gen_func_decl; method - ['                self._gen_func_params()\n', '                if (ut.randomUtil.bool(prob=0.25) or is_interface)\n']; args - (), kwargs - {'prob': 0.25}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:395:_gen_func_params_with_default; method - ['        params = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_params)):\n']; args - (0, 2), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Unit(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)],), kwargs - {}, result - Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37910>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde35a20>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde35a20>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1161:gen_variable; method - ['                                      subtype=subtype, exclude_var=True)\n', '        varia = ut.randomUtil.choice([v.name for v in variables])\n']; args - (['billows'],), kwargs - {}, result - billows
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - delius
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1589:_gen_func_call; method - ['\n', '        rand_func = ut.randomUtil.choice(funcs)\n']; args - ([AttrReceiverInfo(receiver_expr=None, receiver_inst={}, attr_decl=cassocks, attr_inst={})],), kwargs - {}, result - AttrReceiverInfo(receiver_expr=None, receiver_inst={}, attr_decl=cassocks, attr_inst={})
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - inveighed
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37eb0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10430>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10430>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1005:gen_assignment; method - ['                                                     only_leaves, subtype))\n', '        receiver, variable = ut.randomUtil.choice(variables)\n']; args - ([(None, preparing), (None, routed), (None, deodorant)],), kwargs - {}, result - (None, deodorant)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_bool_constant at 0x7ffafdfcdab0>],), kwargs - {}, result - <function gen_bool_constant at 0x7ffafdfcdab0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:45:gen_bool_constant; method - ['    """\n', "    return ast.BooleanConstant(utils.randomUtil.choice(['true', 'false']))\n"]; args - (['true', 'false'],), kwargs - {}, result - false
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - olympics
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))],), kwargs - {}, result - Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10940>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf103a0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10b80>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde367a0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde37490>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37370>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10b80>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))],), kwargs - {}, result - Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10820>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10820>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - greenwich
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1122:gen_field_access; method - ['        objs = [(obj.receiver_expr, obj.attr_decl) for obj in objs]\n', '        receiver, attr = ut.randomUtil.choice(objs)\n']; args - ([(greenwich, wobbliest)],), kwargs - {}, result - (greenwich, wobbliest)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - luger
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Int(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10940>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf103a0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10b80>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf10c10>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36b00>, <function gen_integer_constant at 0x7ffafdfcd990>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36b00>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10940>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2673:_get_matching_class; method - ['            return None\n', '        cls, type_var_map, attr = ut.randomUtil.choice(class_decls)\n']; args - ([(Shiva, {}, grumbled)],), kwargs - {}, result - (Shiva, {}, grumbled)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Long(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Long(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([in Long, Long(kotlin-builtin)],), kwargs - {}, result - in Long
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Shiva<in Long>],), kwargs - {}, result - Shiva<in Long>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36a70>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37370>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37d00>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37eb0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde37490>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36440>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37370>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Boolean(kotlin-builtin)],), kwargs - {}, result - Boolean(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_bool_constant at 0x7ffafdfcdab0>],), kwargs - {}, result - <function gen_bool_constant at 0x7ffafdfcdab0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:45:gen_bool_constant; method - ['    """\n', "    return ast.BooleanConstant(utils.randomUtil.choice(['true', 'false']))\n"]; args - (['true', 'false'],), kwargs - {}, result - false
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - nice
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([in Long, Long(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1316:gen_conditional; method - ['                                        include_self=True, concrete_only=True)\n', '            true_type = ut.randomUtil.choice(subtypes)\n']; args - ([Shiva<Long(kotlin-builtin)>, Shiva<in Long>],), kwargs - {}, result - Shiva<Long(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1317:gen_conditional; method - ['            true_type = ut.randomUtil.choice(subtypes)\n', '            false_type = ut.randomUtil.choice(subtypes)\n']; args - ([Shiva<Long(kotlin-builtin)>, Shiva<in Long>],), kwargs - {}, result - Shiva<in Long>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1318:gen_conditional; method - ['            false_type = ut.randomUtil.choice(subtypes)\n', '            tmp_t = ut.randomUtil.choice(subtypes)\n']; args - ([Shiva<Long(kotlin-builtin)>, Shiva<in Long>],), kwargs - {}, result - Shiva<in Long>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde367a0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde367a0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Shiva],), kwargs - {}, result - class Shiva<R <: Long> : Peeved {
  grumbled: Int(kotlin-builtin)
   }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - 71
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37400>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37400>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Shiva],), kwargs - {}, result - class Shiva<R <: Long> : Peeved {
  grumbled: Int(kotlin-builtin)
   }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - 71
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1122:gen_field_access; method - ['        objs = [(obj.receiver_expr, obj.attr_decl) for obj in objs]\n', '        receiver, attr = ut.randomUtil.choice(objs)\n']; args - ([(<src.ir.ast.Conditional object at 0x7ffafdf1ebf0>, grumbled)],), kwargs - {}, result - (<src.ir.ast.Conditional object at 0x7ffafdf1ebf0>, grumbled)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([String(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35a20>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde367a0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37910>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37370>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36a70>, <function gen_string_constant at 0x7ffafe120310>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36a70>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36a70>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10a60>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf104c0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10d30>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37400>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36440>, <function gen_string_constant at 0x7ffafe120310>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10a60>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - herd
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:80:select_class_type; method - ["    # there's higher probability to generate a regular class.\n", '    if ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:86:select_class_type; method - ['        candidates.append(ast.ClassDeclaration.INTERFACE)\n', '    return ut.randomUtil.choice(candidates)\n']; args - ([2],), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:456:gen_class_decl; method - ['        class_type = gu.select_class_type(field_type is not None)\n', '        is_final = ut.randomUtil.bool() and class_type == \\\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2128:gen_type_params; method - ['        """\n', '        if not count and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2139:gen_type_params; method - ['        )\n', '        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n']; args - (1, 3), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2140:gen_type_params; method - ['        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n', '            name = ut.randomUtil.caps(blacklist=type_param_names)\n']; args - (), kwargs - {'blacklist': []}, result - L
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2151:gen_type_params; method - ['            bound = None\n', '            if ut.randomUtil.bool(cfg.prob.bounded_type_parameters):\n']; args - (0.5,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2140:gen_type_params; method - ['        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n', '            name = ut.randomUtil.caps(blacklist=type_param_names)\n']; args - (), kwargs - {'blacklist': ['L']}, result - C
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2151:gen_type_params; method - ['            bound = None\n', '            if ut.randomUtil.bool(cfg.prob.bounded_type_parameters):\n']; args - (0.5,), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:519:_select_superclass; method - ['            return None\n', '        class_decl = ut.randomUtil.choice(class_decls)\n']; args - ([Peeved, Kilowatt, Astounded, Enclave, Ashamedly, Toilets],), kwargs - {}, result - interface Astounded<N, Z <: Any, R <: Function0<N>> : Kilowatt {

  fun stickups(agism: String(kotlin-builtin)): Any(kotlin-builtin) =
  None }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([L <: Ashamedly, C],), kwargs - {}, result - L <: Ashamedly
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Any(kotlin-builtin)],), kwargs - {}, result - Any(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([L <: Ashamedly],), kwargs - {}, result - L <: Ashamedly
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Function0<L <: Ashamedly>],), kwargs - {}, result - Function0<L <: Ashamedly>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - eleazar
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:850:gen_field_decl; method - ["        name = gu.gen_identifier('lower')\n", '        can_override = not class_is_final and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:851:gen_field_decl; method - ['        can_override = not class_is_final and ut.randomUtil.bool()\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:577:gen_class_fields; method - ['                .get_overridable_fields()\n', '            k = ut.randomUtil.integer(0, min(max_fields, len(overridable_fields)))\n']; args - (0, 0), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:593:gen_class_fields; method - ['                return fields\n', '            for _ in range(ut.randomUtil.integer(0, max_fields)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:701:gen_class_functions; method - ['                return funcs\n', '            k = ut.randomUtil.integer(0, min(max_funcs, len_over_f))\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/utils.py:212:sample; method - ['        self.call = "sample {} k={}".format(str(choices), k)\n', '        k = k or self.integer(0, len(choices))\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:705:gen_class_functions; method - ['                if not max_funcs or curr_cls.is_interface()\n', '                else ut.randomUtil.sample(overridable_funcs, k=k)\n']; args - ([stickups],), kwargs - {'k': 0}, result - []
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:716:gen_class_functions; method - ['                return funcs\n', '            for _ in range(ut.randomUtil.integer(0, max_funcs)):\n']; args - (0, 2), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - cuckold
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:340:gen_func_decl; method - ['                    for_function=True\n', '                ) if ut.randomUtil.bool(prob=cfg.prob.parameterized_functions) \\\n']; args - (), kwargs - {'prob': 0.3}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2128:gen_type_params; method - ['        """\n', '        if not count and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:353:gen_func_decl; method - ['                self._gen_func_params()\n', '                if (ut.randomUtil.bool(prob=0.25) or is_interface)\n']; args - (), kwargs - {'prob': 0.25}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:395:_gen_func_params_with_default; method - ['        params = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_params)):\n']; args - (0, 2), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([L <: Ashamedly, C],), kwargs - {}, result - C
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:357:gen_func_decl; method - ['        ret_type = self._get_func_ret_type(params, etype, not_void=not_void)\n', '        if is_interface or (abstract and ut.randomUtil.bool()):\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36b00>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde368c0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36b00>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2344:_gen_func_body; method - ['            # type is not Unit. So, we can create an expression-based function.\n', '            body = expr if ut.randomUtil.bool(cfg.prob.function_expr) else \\\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - stud
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:340:gen_func_decl; method - ['                    for_function=True\n', '                ) if ut.randomUtil.bool(prob=cfg.prob.parameterized_functions) \\\n']; args - (), kwargs - {'prob': 0.3}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:353:gen_func_decl; method - ['                self._gen_func_params()\n', '                if (ut.randomUtil.bool(prob=0.25) or is_interface)\n']; args - (), kwargs - {'prob': 0.25}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:395:_gen_func_params_with_default; method - ['        params = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_params)):\n']; args - (0, 2), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - totems
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([L <: Ashamedly, C],), kwargs - {}, result - C
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:398:_gen_func_params_with_default; method - ['            if not has_default:\n', '                has_default = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2191:_get_func_ret_type; method - ["                                  'variance', None) != tp.Contravariant]\n", '        if param_types and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2192:_get_func_ret_type; method - ['        if param_types and ut.randomUtil.bool():\n', '            return ut.randomUtil.choice(param_types)\n']; args - ([C],), kwargs - {}, result - C
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:357:gen_func_decl; method - ['        ret_type = self._get_func_ret_type(params, etype, not_void=not_void)\n', '        if is_interface or (abstract and ut.randomUtil.bool()):\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([C],), kwargs - {}, result - C
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37d00>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36b00>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36b00>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([C],), kwargs - {}, result - C
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf103a0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf103a0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - escorted
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10c10>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10ca0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10820>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37eb0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde368c0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf103a0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde368c0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10e50>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10ee0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10f70>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf10940>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf101f0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10430>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10ee0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_bool_constant at 0x7ffafdfcdab0>],), kwargs - {}, result - <function gen_bool_constant at 0x7ffafdfcdab0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:45:gen_bool_constant; method - ['    """\n', "    return ast.BooleanConstant(utils.randomUtil.choice(['true', 'false']))\n"]; args - (['true', 'false'],), kwargs - {}, result - true
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([String(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1316:gen_conditional; method - ['                                        include_self=True, concrete_only=True)\n', '            true_type = ut.randomUtil.choice(subtypes)\n']; args - ([Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), String(kotlin-builtin)>],), kwargs - {}, result - Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), String(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1317:gen_conditional; method - ['            true_type = ut.randomUtil.choice(subtypes)\n', '            false_type = ut.randomUtil.choice(subtypes)\n']; args - ([Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), String(kotlin-builtin)>],), kwargs - {}, result - Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), String(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1318:gen_conditional; method - ['            false_type = ut.randomUtil.choice(subtypes)\n', '            tmp_t = ut.randomUtil.choice(subtypes)\n']; args - ([Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), String(kotlin-builtin)>],), kwargs - {}, result - Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), String(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf112d0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf112d0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10dc0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10dc0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1122:gen_field_access; method - ['        objs = [(obj.receiver_expr, obj.attr_decl) for obj in objs]\n', '        receiver, attr = ut.randomUtil.choice(objs)\n']; args - ([(<src.ir.ast.Conditional object at 0x7ffafdd3e2c0>, eleazar)],), kwargs - {}, result - (<src.ir.ast.Conditional object at 0x7ffafdd3e2c0>, eleazar)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf112d0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11240>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11240>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1005:gen_assignment; method - ['                                                     only_leaves, subtype))\n', '        receiver, variable = ut.randomUtil.choice(variables)\n']; args - ([(None, preparing), (None, routed), (None, deodorant), (None, luger)],), kwargs - {}, result - (None, routed)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Int(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11090>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf109d0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf113f0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf111b0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf108b0>, <function gen_integer_constant at 0x7ffafdfcd990>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf108b0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11090>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2673:_get_matching_class; method - ['            return None\n', '        cls, type_var_map, attr = ut.randomUtil.choice(class_decls)\n']; args - ([(Shiva, {}, grumbled)],), kwargs - {}, result - (Shiva, {}, grumbled)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Long(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Long(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Long(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Shiva<Long(kotlin-builtin)>],), kwargs - {}, result - Shiva<Long(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf115a0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11630>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf116c0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf11120>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf11360>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10b80>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11630>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Boolean(kotlin-builtin)],), kwargs - {}, result - Boolean(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_bool_constant at 0x7ffafdfcdab0>],), kwargs - {}, result - <function gen_bool_constant at 0x7ffafdfcdab0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:45:gen_bool_constant; method - ['    """\n', "    return ast.BooleanConstant(utils.randomUtil.choice(['true', 'false']))\n"]; args - (['true', 'false'],), kwargs - {}, result - false
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Long(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1316:gen_conditional; method - ['                                        include_self=True, concrete_only=True)\n', '            true_type = ut.randomUtil.choice(subtypes)\n']; args - ([Shiva<Long(kotlin-builtin)>],), kwargs - {}, result - Shiva<Long(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1317:gen_conditional; method - ['            true_type = ut.randomUtil.choice(subtypes)\n', '            false_type = ut.randomUtil.choice(subtypes)\n']; args - ([Shiva<Long(kotlin-builtin)>],), kwargs - {}, result - Shiva<Long(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1318:gen_conditional; method - ['            false_type = ut.randomUtil.choice(subtypes)\n', '            tmp_t = ut.randomUtil.choice(subtypes)\n']; args - ([Shiva<Long(kotlin-builtin)>],), kwargs - {}, result - Shiva<Long(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11a20>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11a20>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Shiva],), kwargs - {}, result - class Shiva<R <: Long> : Peeved {
  grumbled: Int(kotlin-builtin)
   }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - 9
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11480>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11480>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Shiva],), kwargs - {}, result - class Shiva<R <: Long> : Peeved {
  grumbled: Int(kotlin-builtin)
   }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - -96
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1122:gen_field_access; method - ['        objs = [(obj.receiver_expr, obj.attr_decl) for obj in objs]\n', '        receiver, attr = ut.randomUtil.choice(objs)\n']; args - ([(<src.ir.ast.Conditional object at 0x7ffafdd3d510>, grumbled)],), kwargs - {}, result - (<src.ir.ast.Conditional object at 0x7ffafdd3d510>, grumbled)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1589:_gen_func_call; method - ['\n', '        rand_func = ut.randomUtil.choice(funcs)\n']; args - ([AttrReceiverInfo(receiver_expr=None, receiver_inst={}, attr_decl=raccoon, attr_inst={})],), kwargs - {}, result - AttrReceiverInfo(receiver_expr=None, receiver_inst={}, attr_decl=raccoon, attr_inst={})
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)],), kwargs - {}, result - Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Int(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([String(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)],), kwargs - {}, result - Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Function3<Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Int(kotlin-builtin), String(kotlin-builtin), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)>],), kwargs - {}, result - Function3<Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Int(kotlin-builtin), String(kotlin-builtin), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10b80>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11480>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10e50>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde368c0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde37eb0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf115a0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde37eb0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf113f0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf111b0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf108b0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf11360>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf11120>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11630>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf108b0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf112d0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf112d0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1855:_gen_func_ref_lambda; method - ['        # We are unable to produce function references in super calls.\n', '        if ut.randomUtil.bool(cfg.prob.func_ref) and not self._in_super_call:\n']; args - (0.5,), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - dowses
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - nigher
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - loveable
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf101f0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10ee0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10ca0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf10700>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf10430>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10c10>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf10430>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1161:gen_variable; method - ['                                      subtype=subtype, exclude_var=True)\n', '        varia = ut.randomUtil.choice([v.name for v in variables])\n']; args - (['dowses'],), kwargs - {}, result - dowses
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2344:_gen_func_body; method - ['            # type is not Unit. So, we can create an expression-based function.\n', '            body = expr if ut.randomUtil.bool(cfg.prob.function_expr) else \\\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Any(kotlin-builtin)],), kwargs - {}, result - Number(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Double(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Function0<Double(kotlin-builtin)>],), kwargs - {}, result - Function0<Double(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Astounded<Double(kotlin-builtin), Number(kotlin-builtin), Function0<Double(kotlin-builtin)>>, Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), String(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)],), kwargs - {}, result - Astounded<Double(kotlin-builtin), Number(kotlin-builtin), Function0<Double(kotlin-builtin)>>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf116c0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf113f0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf111b0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37eb0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde368c0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10f70>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37eb0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1548:gen_func_call; method - ['        """\n', '        if ut.randomUtil.bool(cfg.prob.func_ref_call):\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2611:_gen_matching_func; method - ['        gen_method = (\n', '                ut.randomUtil.bool() or\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - placard
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:80:select_class_type; method - ["    # there's higher probability to generate a regular class.\n", '    if ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:456:gen_class_decl; method - ['        class_type = gu.select_class_type(field_type is not None)\n', '        is_final = ut.randomUtil.bool() and class_type == \\\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2128:gen_type_params; method - ['        """\n', '        if not count and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2139:gen_type_params; method - ['        )\n', '        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n']; args - (1, 3), kwargs - {}, result - 3
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2140:gen_type_params; method - ['        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n', '            name = ut.randomUtil.caps(blacklist=type_param_names)\n']; args - (), kwargs - {'blacklist': []}, result - J
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2151:gen_type_params; method - ['            bound = None\n', '            if ut.randomUtil.bool(cfg.prob.bounded_type_parameters):\n']; args - (0.5,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Herd<L <: Ashamedly, C>  <: Astounded<L <: Ashamedly, Any(kotlin-builtin), Function0<L <: Ashamedly>>, Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2140:gen_type_params; method - ['        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n', '            name = ut.randomUtil.caps(blacklist=type_param_names)\n']; args - (), kwargs - {'blacklist': ['J']}, result - P
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2151:gen_type_params; method - ['            bound = None\n', '            if ut.randomUtil.bool(cfg.prob.bounded_type_parameters):\n']; args - (0.5,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Herd<L <: Ashamedly, C>  <: Astounded<L <: Ashamedly, Any(kotlin-builtin), Function0<L <: Ashamedly>>, Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2140:gen_type_params; method - ['        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n', '            name = ut.randomUtil.caps(blacklist=type_param_names)\n']; args - (), kwargs - {'blacklist': ['J', 'P']}, result - S
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2151:gen_type_params; method - ['            bound = None\n', '            if ut.randomUtil.bool(cfg.prob.bounded_type_parameters):\n']; args - (0.5,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Herd<L <: Ashamedly, C>  <: Astounded<L <: Ashamedly, Any(kotlin-builtin), Function0<L <: Ashamedly>>, Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:519:_select_superclass; method - ['            return None\n', '        class_decl = ut.randomUtil.choice(class_decls)\n']; args - ([Peeved, Kilowatt, Astounded, Enclave, Ashamedly, Toilets, Herd],), kwargs - {}, result - abstract class Herd<L <: Ashamedly, C> : Astounded {
  eleazar: String(kotlin-builtin)
  fun cuckold(): C =
  _B_
  fun stud(totems: C): C =
  {
  val escorted: C = _B_
  escorted
} }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_string_constant at 0x7ffafe120310>],), kwargs - {}, result - <function gen_string_constant at 0x7ffafe120310>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - daft
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:577:gen_class_fields; method - ['                .get_overridable_fields()\n', '            k = ut.randomUtil.integer(0, min(max_fields, len(overridable_fields)))\n']; args - (0, 0), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:593:gen_class_fields; method - ['                return fields\n', '            for _ in range(ut.randomUtil.integer(0, max_fields)):\n']; args - (0, 2), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - caption
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:851:gen_field_decl; method - ['        can_override = not class_is_final and ut.randomUtil.bool()\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([J <: Toilets, P <: Kilowatt, S <: Char],), kwargs - {}, result - S <: Char
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - rim
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:340:gen_func_decl; method - ['                    for_function=True\n', '                ) if ut.randomUtil.bool(prob=cfg.prob.parameterized_functions) \\\n']; args - (), kwargs - {'prob': 0.3}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2128:gen_type_params; method - ['        """\n', '        if not count and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:353:gen_func_decl; method - ['                self._gen_func_params()\n', '                if (ut.randomUtil.bool(prob=0.25) or is_interface)\n']; args - (), kwargs - {'prob': 0.25}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2288:_gen_func_params; method - ['        vararg = None\n', '        for i in range(ut.randomUtil.integer(0, cfg.limits.fn.max_params)):\n']; args - (0, 2), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - applying
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Herd<L <: Ashamedly, C>  <: Astounded<L <: Ashamedly, Any(kotlin-builtin), Function0<L <: Ashamedly>>, Placard<J <: Toilets, P <: Kilowatt, S <: Char>  <: Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Long(kotlin-builtin)>, Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Double(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Number(kotlin-builtin)],), kwargs - {}, result - Number(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Double(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Function0<Double(kotlin-builtin)>],), kwargs - {}, result - Function0<Double(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Astounded<Double(kotlin-builtin), Number(kotlin-builtin), Function0<Double(kotlin-builtin)>>],), kwargs - {}, result - Astounded<Double(kotlin-builtin), Number(kotlin-builtin), Function0<Double(kotlin-builtin)>>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11630>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf108b0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10b80>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf112d0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf11240>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11090>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11630>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - maligned
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:80:select_class_type; method - ["    # there's higher probability to generate a regular class.\n", '    if ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:86:select_class_type; method - ['        candidates.append(ast.ClassDeclaration.INTERFACE)\n', '    return ut.randomUtil.choice(candidates)\n']; args - ([2],), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:456:gen_class_decl; method - ['        class_type = gu.select_class_type(field_type is not None)\n', '        is_final = ut.randomUtil.bool() and class_type == \\\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2128:gen_type_params; method - ['        """\n', '        if not count and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2139:gen_type_params; method - ['        )\n', '        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n']; args - (1, 3), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2140:gen_type_params; method - ['        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n', '            name = ut.randomUtil.caps(blacklist=type_param_names)\n']; args - (), kwargs - {'blacklist': []}, result - R
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2151:gen_type_params; method - ['            bound = None\n', '            if ut.randomUtil.bool(cfg.prob.bounded_type_parameters):\n']; args - (0.5,), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2140:gen_type_params; method - ['        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n', '            name = ut.randomUtil.caps(blacklist=type_param_names)\n']; args - (), kwargs - {'blacklist': ['R']}, result - O
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2151:gen_type_params; method - ['            bound = None\n', '            if ut.randomUtil.bool(cfg.prob.bounded_type_parameters):\n']; args - (0.5,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([R],), kwargs - {}, result - R
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:519:_select_superclass; method - ['            return None\n', '        class_decl = ut.randomUtil.choice(class_decls)\n']; args - ([Peeved, Kilowatt, Astounded, Enclave, Ashamedly, Toilets, Herd],), kwargs - {}, result - abstract class Herd<L <: Ashamedly, C> : Astounded {
  eleazar: String(kotlin-builtin)
  fun cuckold(): C =
  _B_
  fun stud(totems: C): C =
  {
  val escorted: C = _B_
  escorted
} }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Any(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_string_constant at 0x7ffafe120310>],), kwargs - {}, result - <function gen_string_constant at 0x7ffafe120310>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - musically
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - truants
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:850:gen_field_decl; method - ["        name = gu.gen_identifier('lower')\n", '        can_override = not class_is_final and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:851:gen_field_decl; method - ['        can_override = not class_is_final and ut.randomUtil.bool()\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:577:gen_class_fields; method - ['                .get_overridable_fields()\n', '            k = ut.randomUtil.integer(0, min(max_fields, len(overridable_fields)))\n']; args - (0, 0), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:593:gen_class_fields; method - ['                return fields\n', '            for _ in range(ut.randomUtil.integer(0, max_fields)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:701:gen_class_functions; method - ['                return funcs\n', '            k = ut.randomUtil.integer(0, min(max_funcs, len_over_f))\n']; args - (0, 2), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:705:gen_class_functions; method - ['                if not max_funcs or curr_cls.is_interface()\n', '                else ut.randomUtil.sample(overridable_funcs, k=k)\n']; args - ([cuckold, stud],), kwargs - {'k': 1}, result - [stud]
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:314:gen_func_decl; method - ['        can_override = abstract or is_interface or (class_method and not\n', '        class_is_final and ut.randomUtil.bool())\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10700>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf11480>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10700>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2344:_gen_func_body; method - ['            # type is not Unit. So, we can create an expression-based function.\n', '            body = expr if ut.randomUtil.bool(cfg.prob.function_expr) else \\\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:716:gen_class_functions; method - ['                return funcs\n', '            for _ in range(ut.randomUtil.integer(0, max_funcs)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([String(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([String(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Maligned<String(kotlin-builtin), String(kotlin-builtin)>],), kwargs - {}, result - Maligned<String(kotlin-builtin), String(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf101f0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf10700>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf10700>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([String(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Maligned<String(kotlin-builtin), String(kotlin-builtin)>],), kwargs - {}, result - Maligned<String(kotlin-builtin), String(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11480>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11480>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - front
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - yelping
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1122:gen_field_access; method - ['        objs = [(obj.receiver_expr, obj.attr_decl) for obj in objs]\n', '        receiver, attr = ut.randomUtil.choice(objs)\n']; args - ([(yelping, truants)],), kwargs - {}, result - (yelping, truants)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - tactful
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10c10>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10430>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10ca0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf10700>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf101f0>, <function gen_integer_constant at 0x7ffafdfcd990>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf101f0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf101f0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1161:gen_variable; method - ['                                      subtype=subtype, exclude_var=True)\n', '        varia = ut.randomUtil.choice([v.name for v in variables])\n']; args - (['coaching', 'preparing', 'routed'],), kwargs - {}, result - routed
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - put
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10820>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf103a0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11900>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf109d0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf11120>, <function gen_integer_constant at 0x7ffafdfcd990>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf11120>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf11120>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Byte(kotlin-builtin)],), kwargs - {}, result - Byte(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11000>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11750>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11a20>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf10940>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf10ee0>, <function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11750>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_bool_constant at 0x7ffafdfcdab0>],), kwargs - {}, result - <function gen_bool_constant at 0x7ffafdfcdab0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:45:gen_bool_constant; method - ['    """\n', "    return ast.BooleanConstant(utils.randomUtil.choice(['true', 'false']))\n"]; args - (['true', 'false'],), kwargs - {}, result - true
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - somali
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1316:gen_conditional; method - ['                                        include_self=True, concrete_only=True)\n', '            true_type = ut.randomUtil.choice(subtypes)\n']; args - ([Byte(kotlin-builtin)],), kwargs - {}, result - Byte(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1317:gen_conditional; method - ['            true_type = ut.randomUtil.choice(subtypes)\n', '            false_type = ut.randomUtil.choice(subtypes)\n']; args - ([Byte(kotlin-builtin)],), kwargs - {}, result - Byte(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1318:gen_conditional; method - ['            false_type = ut.randomUtil.choice(subtypes)\n', '            tmp_t = ut.randomUtil.choice(subtypes)\n']; args - ([Byte(kotlin-builtin)],), kwargs - {}, result - Byte(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - -6
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - ganders
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - 51
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - furl
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Any(kotlin-builtin)],), kwargs - {}, result - Any(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf115a0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11990>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11510>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf11ab0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf11870>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11b40>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11510>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Any(kotlin-builtin)],), kwargs - {}, result - Any(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10e50>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10e50>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - jiffies
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))],), kwargs - {}, result - Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)],), kwargs - {}, result - Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Char(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11d80>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11bd0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11fc0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf11e10>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf11ea0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11f30>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf11ea0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))],), kwargs - {}, result - Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)],), kwargs - {}, result - Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Char(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Placard<Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Char(kotlin-builtin)>],), kwargs - {}, result - Placard<Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Char(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11b40>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11000>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11750>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf10e50>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf10dc0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf115a0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11b40>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - patrician
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:80:select_class_type; method - ["    # there's higher probability to generate a regular class.\n", '    if ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:456:gen_class_decl; method - ['        class_type = gu.select_class_type(field_type is not None)\n', '        is_final = ut.randomUtil.bool() and class_type == \\\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2128:gen_type_params; method - ['        """\n', '        if not count and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:519:_select_superclass; method - ['            return None\n', '        class_decl = ut.randomUtil.choice(class_decls)\n']; args - ([Peeved, Kilowatt, Astounded, Enclave, Ashamedly, Toilets, Herd, Maligned],), kwargs - {}, result - interface Kilowatt : Peeved {

  fun only(cancer: Boolean(kotlin-builtin),procurer: Float(kotlin-builtin),morally: Char(kotlin-builtin)): Byte(kotlin-builtin) =
  None
  fun addicting(): Int(kotlin-builtin) =
  None }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - compass
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:851:gen_field_decl; method - ['        can_override = not class_is_final and ut.randomUtil.bool()\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:577:gen_class_fields; method - ['                .get_overridable_fields()\n', '            k = ut.randomUtil.integer(0, min(max_fields, len(overridable_fields)))\n']; args - (0, 0), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:593:gen_class_fields; method - ['                return fields\n', '            for _ in range(ut.randomUtil.integer(0, max_fields)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - -90
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - dietetic
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf103a0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf109d0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf109d0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1005:gen_assignment; method - ['                                                     only_leaves, subtype))\n', '        receiver, variable = ut.randomUtil.choice(variables)\n']; args - ([(None, preparing), (None, routed), (None, deodorant)],), kwargs - {}, result - (None, routed)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Int(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - 27
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - attila
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Int(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - -61
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2344:_gen_func_body; method - ['            # type is not Unit. So, we can create an expression-based function.\n', '            body = expr if ut.randomUtil.bool(cfg.prob.function_expr) else \\\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:701:gen_class_functions; method - ['                return funcs\n', '            k = ut.randomUtil.integer(0, min(max_funcs, len_over_f))\n']; args - (0, 0), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:716:gen_class_functions; method - ['                return funcs\n', '            for _ in range(ut.randomUtil.integer(0, max_funcs)):\n']; args - (0, 0), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>))],), kwargs - {}, result - Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11360>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11ab0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10940>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf109d0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf103a0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10ee0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11ab0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Boolean(kotlin-builtin)],), kwargs - {}, result - Boolean(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_bool_constant at 0x7ffafdfcdab0>],), kwargs - {}, result - <function gen_bool_constant at 0x7ffafdfcdab0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:45:gen_bool_constant; method - ['    """\n', "    return ast.BooleanConstant(utils.randomUtil.choice(['true', 'false']))\n"]; args - (['true', 'false'],), kwargs - {}, result - true
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1316:gen_conditional; method - ['                                        include_self=True, concrete_only=True)\n', '            true_type = ut.randomUtil.choice(subtypes)\n']; args - ([Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>))],), kwargs - {}, result - Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1317:gen_conditional; method - ['            true_type = ut.randomUtil.choice(subtypes)\n', '            false_type = ut.randomUtil.choice(subtypes)\n']; args - ([Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>))],), kwargs - {}, result - Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1318:gen_conditional; method - ['            false_type = ut.randomUtil.choice(subtypes)\n', '            tmp_t = ut.randomUtil.choice(subtypes)\n']; args - ([Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>))],), kwargs - {}, result - Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10ca0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10ca0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Patrician],), kwargs - {}, result - class Patrician : Kilowatt {
  compass: Placard<Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Char(kotlin-builtin)>
  fun only(cancer: Boolean(kotlin-builtin),procurer: Float(kotlin-builtin),morally: Char(kotlin-builtin)): Byte(kotlin-builtin) =
  {
  val dietetic: Byte(kotlin-builtin) = -90
  val attila: Int(kotlin-builtin) = 27
  routed = attila
  dietetic
}
  fun addicting(): Int(kotlin-builtin) =
  -61 }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf101f0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf101f0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Placard],), kwargs - {}, result - class Placard<J <: Toilets, P <: Kilowatt, S <: Char> : Herd("daft") {
  caption: S <: Char
  fun rim(applying: Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))): Astounded<Double(kotlin-builtin), Number(kotlin-builtin), Function0<Double(kotlin-builtin)>> =
  {
  val front: Maligned<String(kotlin-builtin), String(kotlin-builtin)> = _B_
  val yelping: Maligned<String(kotlin-builtin), String(kotlin-builtin)> = front
  val tactful: Astounded<Double(kotlin-builtin), Number(kotlin-builtin), Function0<Double(kotlin-builtin)>> = yelping.truants
  tactful
}
  fun addicting(): Int(kotlin-builtin) =
  {
  var put: Int(kotlin-builtin) = routed
  put
}
  fun only(cancer: Boolean(kotlin-builtin),procurer: Float(kotlin-builtin),morally: Char(kotlin-builtin)): Byte(kotlin-builtin) =
  {
  val somali: Boolean(kotlin-builtin) = true
  var ganders: Byte(kotlin-builtin) = -6
  val furl: Byte(kotlin-builtin) = if (somali)
  ganders
else
  51
  furl
}
  fun stickups(agism: String(kotlin-builtin)): Any(kotlin-builtin) =
  {
  var jiffies: Any(kotlin-builtin) = new Any()
  jiffies
} }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_char_constant at 0x7ffafdfcdb40>],), kwargs - {}, result - <function gen_char_constant at 0x7ffafdfcdb40>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:52:gen_char_constant; method - ['    """\n', '    return ast.CharConstant(utils.randomUtil.char())\n']; args - (), kwargs - {}, result - z
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10700>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10700>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Patrician],), kwargs - {}, result - class Patrician : Kilowatt {
  compass: Placard<Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Char(kotlin-builtin)>
  fun only(cancer: Boolean(kotlin-builtin),procurer: Float(kotlin-builtin),morally: Char(kotlin-builtin)): Byte(kotlin-builtin) =
  {
  val dietetic: Byte(kotlin-builtin) = -90
  val attila: Int(kotlin-builtin) = 27
  routed = attila
  dietetic
}
  fun addicting(): Int(kotlin-builtin) =
  -61 }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11900>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11900>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Placard],), kwargs - {}, result - class Placard<J <: Toilets, P <: Kilowatt, S <: Char> : Herd("daft") {
  caption: S <: Char
  fun rim(applying: Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))): Astounded<Double(kotlin-builtin), Number(kotlin-builtin), Function0<Double(kotlin-builtin)>> =
  {
  val front: Maligned<String(kotlin-builtin), String(kotlin-builtin)> = _B_
  val yelping: Maligned<String(kotlin-builtin), String(kotlin-builtin)> = front
  val tactful: Astounded<Double(kotlin-builtin), Number(kotlin-builtin), Function0<Double(kotlin-builtin)>> = yelping.truants
  tactful
}
  fun addicting(): Int(kotlin-builtin) =
  {
  var put: Int(kotlin-builtin) = routed
  put
}
  fun only(cancer: Boolean(kotlin-builtin),procurer: Float(kotlin-builtin),morally: Char(kotlin-builtin)): Byte(kotlin-builtin) =
  {
  val somali: Boolean(kotlin-builtin) = true
  var ganders: Byte(kotlin-builtin) = -6
  val furl: Byte(kotlin-builtin) = if (somali)
  ganders
else
  51
  furl
}
  fun stickups(agism: String(kotlin-builtin)): Any(kotlin-builtin) =
  {
  var jiffies: Any(kotlin-builtin) = new Any()
  jiffies
} }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_char_constant at 0x7ffafdfcdb40>],), kwargs - {}, result - <function gen_char_constant at 0x7ffafdfcdb40>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:52:gen_char_constant; method - ['    """\n', '    return ast.CharConstant(utils.randomUtil.char())\n']; args - (), kwargs - {}, result - E
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1122:gen_field_access; method - ['        objs = [(obj.receiver_expr, obj.attr_decl) for obj in objs]\n', '        receiver, attr = ut.randomUtil.choice(objs)\n']; args - ([(<src.ir.ast.Conditional object at 0x7ffafddf7e80>, compass)],), kwargs - {}, result - (<src.ir.ast.Conditional object at 0x7ffafddf7e80>, compass)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1589:_gen_func_call; method - ['\n', '        rand_func = ut.randomUtil.choice(funcs)\n']; args - ([AttrReceiverInfo(receiver_expr=<src.ir.ast.FieldAccess object at 0x7ffafddf7670>, receiver_inst={J <: Toilets: Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), P <: Kilowatt: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), S <: Char: Char(kotlin-builtin)}, attr_decl=rim, attr_inst={})],), kwargs - {}, result - AttrReceiverInfo(receiver_expr=<src.ir.ast.FieldAccess object at 0x7ffafddf7670>, receiver_inst={J <: Toilets: Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), P <: Kilowatt: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), S <: Char: Char(kotlin-builtin)}, attr_decl=rim, attr_inst={})
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11900>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11990>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11120>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf11ab0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf11360>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10940>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11900>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - martens
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:80:select_class_type; method - ["    # there's higher probability to generate a regular class.\n", '    if ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:456:gen_class_decl; method - ['        class_type = gu.select_class_type(field_type is not None)\n', '        is_final = ut.randomUtil.bool() and class_type == \\\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2128:gen_type_params; method - ['        """\n', '        if not count and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:519:_select_superclass; method - ['            return None\n', '        class_decl = ut.randomUtil.choice(class_decls)\n']; args - ([Peeved, Kilowatt, Astounded, Enclave, Ashamedly, Toilets, Herd, Maligned],), kwargs - {}, result - abstract class Maligned<R, O <: R> : Herd("musically") {
  truants: Astounded<Double(kotlin-builtin), Number(kotlin-builtin), Function0<Double(kotlin-builtin)>>
  fun stud(totems: Any(kotlin-builtin)): Any(kotlin-builtin) =
  new Any() }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens, Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Byte(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Byte(kotlin-builtin)],), kwargs - {}, result - Byte(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11bd0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11bd0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - entryway
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:850:gen_field_decl; method - ["        name = gu.gen_identifier('lower')\n", '        can_override = not class_is_final and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:851:gen_field_decl; method - ['        can_override = not class_is_final and ut.randomUtil.bool()\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:577:gen_class_fields; method - ['                .get_overridable_fields()\n', '            k = ut.randomUtil.integer(0, min(max_fields, len(overridable_fields)))\n']; args - (0, 0), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:593:gen_class_fields; method - ['                return fields\n', '            for _ in range(ut.randomUtil.integer(0, max_fields)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:314:gen_func_decl; method - ['        can_override = abstract or is_interface or (class_method and not\n', '        class_is_final and ut.randomUtil.bool())\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Byte(kotlin-builtin)],), kwargs - {}, result - Byte(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - 30
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - kyushu
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:314:gen_func_decl; method - ['        can_override = abstract or is_interface or (class_method and not\n', '        class_is_final and ut.randomUtil.bool())\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - -71
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - repeaters
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:314:gen_func_decl; method - ['        can_override = abstract or is_interface or (class_method and not\n', '        class_is_final and ut.randomUtil.bool())\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>],), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Short(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Float(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>],), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Double(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<String(kotlin-builtin)>, Function0<out Double>, Function1<Double(kotlin-builtin), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))>, Function2<Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Short(kotlin-builtin), out Float>, Function3<Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), in Double, Int(kotlin-builtin), Int(kotlin-builtin)>, Any(kotlin-builtin)],), kwargs - {}, result - Float(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_real_constant at 0x7ffafdfcda20>],), kwargs - {}, result - <function gen_real_constant at 0x7ffafdfcda20>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:35:gen_real_constant; method - ['    """\n', '    prefix = str(utils.randomUtil.integer(0, 100))\n']; args - (0, 100), kwargs - {}, result - 90
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:36:gen_real_constant; method - ['    prefix = str(utils.randomUtil.integer(0, 100))\n', '    suffix = str(utils.randomUtil.integer(0, 1000))\n']; args - (0, 1000), kwargs - {}, result - 149
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:37:gen_real_constant; method - ['    suffix = str(utils.randomUtil.integer(0, 1000))\n', "    sign = utils.randomUtil.choice(['', '-'])\n"]; args - (['', '-'],), kwargs - {}, result -
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - bigwigs
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf103a0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11fc0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf103a0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1548:gen_func_call; method - ['        """\n', '        if ut.randomUtil.bool(cfg.prob.func_ref_call):\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2611:_gen_matching_func; method - ['        gen_method = (\n', '                ut.randomUtil.bool() or\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2623:_gen_matching_func; method - ['                self.namespace\n', '                if ut.randomUtil.bool() or etype.has_type_variables()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - sedna
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:353:gen_func_decl; method - ['                self._gen_func_params()\n', '                if (ut.randomUtil.bool(prob=0.25) or is_interface)\n']; args - (), kwargs - {'prob': 0.25}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:395:_gen_func_params_with_default; method - ['        params = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_params)):\n']; args - (0, 2), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - novellas
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Herd<L <: Ashamedly, C>  <: Astounded<L <: Ashamedly, Any(kotlin-builtin), Function0<L <: Ashamedly>>, Placard<J <: Toilets, P <: Kilowatt, S <: Char>  <: Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Long(kotlin-builtin)>, Maligned<R, O <: R>  <: Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin)>, Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Function2<A1, A2, R>  <: Any(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Boolean(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:398:_gen_func_params_with_default; method - ['            if not has_default:\n', '                has_default = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11b40>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11b40>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1855:_gen_func_ref_lambda; method - ['        # We are unable to produce function references in super calls.\n', '        if ut.randomUtil.bool(cfg.prob.func_ref) and not self._in_super_call:\n']; args - (0.5,), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - shortstop
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - shuffled
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([String(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_string_constant at 0x7ffafe120310>],), kwargs - {}, result - <function gen_string_constant at 0x7ffafe120310>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - restroom
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - unstudied
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Herd<L <: Ashamedly, C>  <: Astounded<L <: Ashamedly, Any(kotlin-builtin), Function0<L <: Ashamedly>>, Placard<J <: Toilets, P <: Kilowatt, S <: Char>  <: Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Long(kotlin-builtin)>, Maligned<R, O <: R>  <: Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin)>, Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Unit(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11d80>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf11b40>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11d80>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Ashamedly],), kwargs - {}, result - class Ashamedly : Astounded {
  colonial: Double(kotlin-builtin)
  fun stickups(agism: String(kotlin-builtin)): Any(kotlin-builtin) =
  -77
  fun addicting(): Int(kotlin-builtin) =
  {
  val roumania: Int(kotlin-builtin) = -79
  roumania
}
  fun only(cancer: Boolean(kotlin-builtin),procurer: Float(kotlin-builtin),morally: Char(kotlin-builtin)): Byte(kotlin-builtin) =
  {
  var borrowers: Byte(kotlin-builtin) = 84
  borrowers
} }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_real_constant at 0x7ffafdfcda20>],), kwargs - {}, result - <function gen_real_constant at 0x7ffafdfcda20>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:35:gen_real_constant; method - ['    """\n', '    prefix = str(utils.randomUtil.integer(0, 100))\n']; args - (0, 100), kwargs - {}, result - 99
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:36:gen_real_constant; method - ['    prefix = str(utils.randomUtil.integer(0, 100))\n', '    suffix = str(utils.randomUtil.integer(0, 1000))\n']; args - (0, 1000), kwargs - {}, result - 863
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:37:gen_real_constant; method - ['    suffix = str(utils.randomUtil.integer(0, 1000))\n', "    sign = utils.randomUtil.choice(['', '-'])\n"]; args - (['', '-'],), kwargs - {}, result - -
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - martial
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf11750>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf115a0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf115a0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1005:gen_assignment; method - ['                                                     only_leaves, subtype))\n', '        receiver, variable = ut.randomUtil.choice(variables)\n']; args - ([(None, preparing), (None, routed), (None, deodorant), (None, entryway), (None, martial)],), kwargs - {}, result - (None, preparing)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Int(kotlin-builtin)],), kwargs - {}, result - Int(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_integer_constant at 0x7ffafdfcd990>],), kwargs - {}, result - <function gen_integer_constant at 0x7ffafdfcd990>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (-100, 100), kwargs - {}, result - -55
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - tarawa
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1589:_gen_func_call; method - ['\n', '        rand_func = ut.randomUtil.choice(funcs)\n']; args - ([AttrReceiverInfo(receiver_expr=None, receiver_inst={}, attr_decl=sedna, attr_inst={})],), kwargs - {}, result - AttrReceiverInfo(receiver_expr=None, receiver_inst={}, attr_decl=sedna, attr_inst={})
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Boolean(kotlin-builtin)],), kwargs - {}, result - Boolean(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Long(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([String(kotlin-builtin)],), kwargs - {}, result - String(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Function2<Boolean(kotlin-builtin), Long(kotlin-builtin), String(kotlin-builtin)>],), kwargs - {}, result - Function2<Boolean(kotlin-builtin), Long(kotlin-builtin), String(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11bd0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf10dc0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11bd0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1855:_gen_func_ref_lambda; method - ['        # We are unable to produce function references in super calls.\n', '        if ut.randomUtil.bool(cfg.prob.func_ref) and not self._in_super_call:\n']; args - (0.5,), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - emits
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - looked
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_string_constant at 0x7ffafe120310>],), kwargs - {}, result - <function gen_string_constant at 0x7ffafe120310>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - gauges
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - westwards
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - priciest
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf117e0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10700>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf109d0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafdf10820>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafdf11000>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf10ca0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf117e0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - creak
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:80:select_class_type; method - ["    # there's higher probability to generate a regular class.\n", '    if ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:86:select_class_type; method - ['        candidates.append(ast.ClassDeclaration.INTERFACE)\n', '    return ut.randomUtil.choice(candidates)\n']; args - ([2],), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:456:gen_class_decl; method - ['        class_type = gu.select_class_type(field_type is not None)\n', '        is_final = ut.randomUtil.bool() and class_type == \\\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2128:gen_type_params; method - ['        """\n', '        if not count and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2139:gen_type_params; method - ['        )\n', '        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n']; args - (1, 3), kwargs - {}, result - 2
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2140:gen_type_params; method - ['        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n', '            name = ut.randomUtil.caps(blacklist=type_param_names)\n']; args - (), kwargs - {'blacklist': []}, result - Q
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2151:gen_type_params; method - ['            bound = None\n', '            if ut.randomUtil.bool(cfg.prob.bounded_type_parameters):\n']; args - (0.5,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Herd<L <: Ashamedly, C>  <: Astounded<L <: Ashamedly, Any(kotlin-builtin), Function0<L <: Ashamedly>>, Placard<J <: Toilets, P <: Kilowatt, S <: Char>  <: Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Long(kotlin-builtin)>, Maligned<R, O <: R>  <: Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin)>, Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Function2<A1, A2, R>  <: Any(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2140:gen_type_params; method - ['        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n', '            name = ut.randomUtil.caps(blacklist=type_param_names)\n']; args - (), kwargs - {'blacklist': ['Q']}, result - E
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2151:gen_type_params; method - ['            bound = None\n', '            if ut.randomUtil.bool(cfg.prob.bounded_type_parameters):\n']; args - (0.5,), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:519:_select_superclass; method - ['            return None\n', '        class_decl = ut.randomUtil.choice(class_decls)\n']; args - ([Peeved, Kilowatt, Astounded, Enclave, Ashamedly, Toilets, Herd, Maligned, Martens],), kwargs - {}, result - abstract class Maligned<R, O <: R> : Herd("musically") {
  truants: Astounded<Double(kotlin-builtin), Number(kotlin-builtin), Function0<Double(kotlin-builtin)>>
  fun stud(totems: Any(kotlin-builtin)): Any(kotlin-builtin) =
  new Any() }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2055:get_types; method - ['\n', '        if type_params and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Char(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11bd0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11bd0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - mushiest
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:850:gen_field_decl; method - ["        name = gu.gen_identifier('lower')\n", '        can_override = not class_is_final and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:851:gen_field_decl; method - ['        can_override = not class_is_final and ut.randomUtil.bool()\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:577:gen_class_fields; method - ['                .get_overridable_fields()\n', '            k = ut.randomUtil.integer(0, min(max_fields, len(overridable_fields)))\n']; args - (0, 0), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:593:gen_class_fields; method - ['                return fields\n', '            for _ in range(ut.randomUtil.integer(0, max_fields)):\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:701:gen_class_functions; method - ['                return funcs\n', '            k = ut.randomUtil.integer(0, min(max_funcs, len_over_f))\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/utils.py:212:sample; method - ['        self.call = "sample {} k={}".format(str(choices), k)\n', '        k = k or self.integer(0, len(choices))\n']; args - (0, 1), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:705:gen_class_functions; method - ['                if not max_funcs or curr_cls.is_interface()\n', '                else ut.randomUtil.sample(overridable_funcs, k=k)\n']; args - ([stud],), kwargs - {'k': 0}, result - []
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:716:gen_class_functions; method - ['                return funcs\n', '            for _ in range(ut.randomUtil.integer(0, max_funcs)):\n']; args - (0, 2), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>))],), kwargs - {}, result - Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))],), kwargs - {}, result - Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>)],), kwargs - {}, result - Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Function2<Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>)>],), kwargs - {}, result - Function2<Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11bd0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafdf11bd0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1122:gen_field_access; method - ['        objs = [(obj.receiver_expr, obj.attr_decl) for obj in objs]\n', '        receiver, attr = ut.randomUtil.choice(objs)\n']; args - ([(<src.ir.ast.BottomConstant object at 0x7ffafdd75f00>, mushiest)],), kwargs - {}, result - (<src.ir.ast.BottomConstant object at 0x7ffafdd75f00>, mushiest)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1122:gen_field_access; method - ['        objs = [(obj.receiver_expr, obj.attr_decl) for obj in objs]\n', '        receiver, attr = ut.randomUtil.choice(objs)\n']; args - ([(<src.ir.ast.FieldAccess object at 0x7ffafddcdc30>, entryway)],), kwargs - {}, result - (<src.ir.ast.FieldAccess object at 0x7ffafddcdc30>, entryway)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - lamas
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:118:gen_top_level_declaration; method - ['        ]\n', '        gen_func = ut.randomUtil.choice(candidates)\n']; args - ([<bound method Generator.gen_variable_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>, <bound method Generator.gen_class_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>, <bound method Generator.gen_func_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>],), kwargs - {}, result - <bound method Generator.gen_variable_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Herd<L <: Ashamedly, C>  <: Astounded<L <: Ashamedly, Any(kotlin-builtin), Function0<L <: Ashamedly>>, Placard<J <: Toilets, P <: Kilowatt, S <: Char>  <: Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Long(kotlin-builtin)>, Maligned<R, O <: R>  <: Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin)>, Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Creak<Q <: Function2<Patrician, Toilets, Martens>, E>  <: Maligned<Char(kotlin-builtin), Char(kotlin-builtin)>, Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Maligned<R, O <: R>  <: Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Maligned<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)>],), kwargs - {}, result - Maligned<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37400>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36440>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37490>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffb00c409d0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffb00c6d090>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffb00c427a0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37490>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Maligned<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)>],), kwargs - {}, result - Maligned<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37eb0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37eb0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - linnet
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:118:gen_top_level_declaration; method - ['        ]\n', '        gen_func = ut.randomUtil.choice(candidates)\n']; args - ([<bound method Generator.gen_variable_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>, <bound method Generator.gen_class_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>, <bound method Generator.gen_func_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>],), kwargs - {}, result - <bound method Generator.gen_variable_decl of <src.generators.generator.Generator object at 0x7ffaffe35660>>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Herd<L <: Ashamedly, C>  <: Astounded<L <: Ashamedly, Any(kotlin-builtin), Function0<L <: Ashamedly>>, Placard<J <: Toilets, P <: Kilowatt, S <: Char>  <: Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Long(kotlin-builtin)>, Maligned<R, O <: R>  <: Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin)>, Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Creak<Q <: Function2<Patrician, Toilets, Martens>, E>  <: Maligned<Char(kotlin-builtin), Char(kotlin-builtin)>, Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde368c0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde376d0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36a70>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffb00c409d0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffb00c6d090>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffb00c427a0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_variable at 0x7ffb00c6d090>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37910>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37370>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35a20>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37490>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36440>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37eb0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37370>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36cb0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37b50>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde369e0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37d00>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36b00>, <function gen_bool_constant at 0x7ffafdfcdab0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37f40>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37520>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35900>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36b00>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37d00>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1548:gen_func_call; method - ['        """\n', '        if ut.randomUtil.bool(cfg.prob.func_ref_call):\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2611:_gen_matching_func; method - ['        gen_method = (\n', '                ut.randomUtil.bool() or\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2623:_gen_matching_func; method - ['                self.namespace\n', '                if ut.randomUtil.bool() or etype.has_type_variables()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - dolmens
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:340:gen_func_decl; method - ['                    for_function=True\n', '                ) if ut.randomUtil.bool(prob=cfg.prob.parameterized_functions) \\\n']; args - (), kwargs - {'prob': 0.3}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2128:gen_type_params; method - ['        """\n', '        if not count and ut.randomUtil.bool():\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2139:gen_type_params; method - ['        )\n', '        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n']; args - (1, 3), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2140:gen_type_params; method - ['        for _ in range(ut.randomUtil.integer(count or 1, limit)):\n', '            name = ut.randomUtil.caps(blacklist=type_param_names)\n']; args - (), kwargs - {'blacklist': []}, result - K
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2151:gen_type_params; method - ['            bound = None\n', '            if ut.randomUtil.bool(cfg.prob.bounded_type_parameters):\n']; args - (0.5,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Herd<L <: Ashamedly, C>  <: Astounded<L <: Ashamedly, Any(kotlin-builtin), Function0<L <: Ashamedly>>, Placard<J <: Toilets, P <: Kilowatt, S <: Char>  <: Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Long(kotlin-builtin)>, Maligned<R, O <: R>  <: Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin)>, Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Creak<Q <: Function2<Patrician, Toilets, Martens>, E>  <: Maligned<Char(kotlin-builtin), Char(kotlin-builtin)>, Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Placard<J <: Toilets, P <: Kilowatt, S <: Char>  <: Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Long(kotlin-builtin)>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))],), kwargs - {}, result - Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)],), kwargs - {}, result - Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Char(kotlin-builtin)],), kwargs - {}, result - Char(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>, <src.ir.types.Variance object at 0x7ffaffe3bd30>, <src.ir.types.Variance object at 0x7ffaffe5e8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:353:gen_func_decl; method - ['                self._gen_func_params()\n', '                if (ut.randomUtil.bool(prob=0.25) or is_interface)\n']; args - (), kwargs - {'prob': 0.25}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:395:_gen_func_params_with_default; method - ['        params = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_params)):\n']; args - (0, 2), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_bool_constant at 0x7ffafdfcdab0>],), kwargs - {}, result - <function gen_bool_constant at 0x7ffafdfcdab0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:45:gen_bool_constant; method - ['    """\n', "    return ast.BooleanConstant(utils.randomUtil.choice(['true', 'false']))\n"]; args - (['true', 'false'],), kwargs - {}, result - false
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2344:_gen_func_body; method - ['            # type is not Unit. So, we can create an expression-based function.\n', '            body = expr if ut.randomUtil.bool(cfg.prob.function_expr) else \\\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1589:_gen_func_call; method - ['\n', '        rand_func = ut.randomUtil.choice(funcs)\n']; args - ([AttrReceiverInfo(receiver_expr=None, receiver_inst={}, attr_decl=dolmens, attr_inst={})],), kwargs - {}, result - AttrReceiverInfo(receiver_expr=None, receiver_inst={}, attr_decl=dolmens, attr_inst={})
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1316:gen_conditional; method - ['                                        include_self=True, concrete_only=True)\n', '            true_type = ut.randomUtil.choice(subtypes)\n']; args - ([Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1317:gen_conditional; method - ['            true_type = ut.randomUtil.choice(subtypes)\n', '            false_type = ut.randomUtil.choice(subtypes)\n']; args - ([Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1318:gen_conditional; method - ['            false_type = ut.randomUtil.choice(subtypes)\n', '            tmp_t = ut.randomUtil.choice(subtypes)\n']; args - ([Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36e60>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37760>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37a30>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37ac0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde37c70>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde367a0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37a30>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37d90>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37d90>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Ashamedly],), kwargs - {}, result - class Ashamedly : Astounded {
  colonial: Double(kotlin-builtin)
  fun stickups(agism: String(kotlin-builtin)): Any(kotlin-builtin) =
  -77
  fun addicting(): Int(kotlin-builtin) =
  {
  val roumania: Int(kotlin-builtin) = -79
  roumania
}
  fun only(cancer: Boolean(kotlin-builtin),procurer: Float(kotlin-builtin),morally: Char(kotlin-builtin)): Byte(kotlin-builtin) =
  {
  var borrowers: Byte(kotlin-builtin) = 84
  borrowers
} }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_real_constant at 0x7ffafdfcda20>],), kwargs - {}, result - <function gen_real_constant at 0x7ffafdfcda20>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:35:gen_real_constant; method - ['    """\n', '    prefix = str(utils.randomUtil.integer(0, 100))\n']; args - (0, 100), kwargs - {}, result - 55
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:36:gen_real_constant; method - ['    prefix = str(utils.randomUtil.integer(0, 100))\n', '    suffix = str(utils.randomUtil.integer(0, 1000))\n']; args - (0, 1000), kwargs - {}, result - 362
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:37:gen_real_constant; method - ['    suffix = str(utils.randomUtil.integer(0, 1000))\n', "    sign = utils.randomUtil.choice(['', '-'])\n"]; args - (['', '-'],), kwargs - {}, result -
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36dd0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37640>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37130>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde36c20>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36830>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36ef0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37640>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_bool_constant at 0x7ffafdfcdab0>],), kwargs - {}, result - <function gen_bool_constant at 0x7ffafdfcdab0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:45:gen_bool_constant; method - ['    """\n', "    return ast.BooleanConstant(utils.randomUtil.choice(['true', 'false']))\n"]; args - (['true', 'false'],), kwargs - {}, result - false
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde365f0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde365f0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Ashamedly],), kwargs - {}, result - class Ashamedly : Astounded {
  colonial: Double(kotlin-builtin)
  fun stickups(agism: String(kotlin-builtin)): Any(kotlin-builtin) =
  -77
  fun addicting(): Int(kotlin-builtin) =
  {
  val roumania: Int(kotlin-builtin) = -79
  roumania
}
  fun only(cancer: Boolean(kotlin-builtin),procurer: Float(kotlin-builtin),morally: Char(kotlin-builtin)): Byte(kotlin-builtin) =
  {
  var borrowers: Byte(kotlin-builtin) = 84
  borrowers
} }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_real_constant at 0x7ffafdfcda20>],), kwargs - {}, result - <function gen_real_constant at 0x7ffafdfcda20>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:35:gen_real_constant; method - ['    """\n', '    prefix = str(utils.randomUtil.integer(0, 100))\n']; args - (0, 100), kwargs - {}, result - 62
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:36:gen_real_constant; method - ['    prefix = str(utils.randomUtil.integer(0, 100))\n', '    suffix = str(utils.randomUtil.integer(0, 1000))\n']; args - (0, 1000), kwargs - {}, result - 741
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:37:gen_real_constant; method - ['    suffix = str(utils.randomUtil.integer(0, 1000))\n', "    sign = utils.randomUtil.choice(['', '-'])\n"]; args - (['', '-'],), kwargs - {}, result -
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35bd0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35bd0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Ashamedly],), kwargs - {}, result - class Ashamedly : Astounded {
  colonial: Double(kotlin-builtin)
  fun stickups(agism: String(kotlin-builtin)): Any(kotlin-builtin) =
  -77
  fun addicting(): Int(kotlin-builtin) =
  {
  val roumania: Int(kotlin-builtin) = -79
  roumania
}
  fun only(cancer: Boolean(kotlin-builtin),procurer: Float(kotlin-builtin),morally: Char(kotlin-builtin)): Byte(kotlin-builtin) =
  {
  var borrowers: Byte(kotlin-builtin) = 84
  borrowers
} }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_real_constant at 0x7ffafdfcda20>],), kwargs - {}, result - <function gen_real_constant at 0x7ffafdfcda20>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:35:gen_real_constant; method - ['    """\n', '    prefix = str(utils.randomUtil.integer(0, 100))\n']; args - (0, 100), kwargs - {}, result - 25
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:36:gen_real_constant; method - ['    prefix = str(utils.randomUtil.integer(0, 100))\n', '    suffix = str(utils.randomUtil.integer(0, 1000))\n']; args - (0, 1000), kwargs - {}, result - 168
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:37:gen_real_constant; method - ['    suffix = str(utils.randomUtil.integer(0, 1000))\n', "    sign = utils.randomUtil.choice(['', '-'])\n"]; args - (['', '-'],), kwargs - {}, result - -
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - excised
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Herd<L <: Ashamedly, C>  <: Astounded<L <: Ashamedly, Any(kotlin-builtin), Function0<L <: Ashamedly>>, Placard<J <: Toilets, P <: Kilowatt, S <: Char>  <: Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Long(kotlin-builtin)>, Maligned<R, O <: R>  <: Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin)>, Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Creak<Q <: Function2<Patrician, Toilets, Martens>, E>  <: Maligned<Char(kotlin-builtin), Char(kotlin-builtin)>, Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36710>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37be0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35870>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde36b90>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36680>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35c60>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37be0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37010>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde364d0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37880>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde363b0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36950>, <function gen_bool_constant at 0x7ffafdfcdab0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37250>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35cf0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde370a0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36950>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37250>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1223:gen_logical_expr; method - ['        self.depth += 1\n', '        op = ut.randomUtil.choice(ast.LogicalExpr.VALID_OPERATORS[self.language])\n']; args - ([<src.ir.ast.Operator object at 0x7ffafde7eb30>, <src.ir.ast.Operator object at 0x7ffafde7eb90>],), kwargs - {}, result - &&
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Boolean(kotlin-builtin)],), kwargs - {}, result - Boolean(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_bool_constant at 0x7ffafdfcdab0>],), kwargs - {}, result - <function gen_bool_constant at 0x7ffafdfcdab0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:45:gen_bool_constant; method - ['    """\n', "    return ast.BooleanConstant(utils.randomUtil.choice(['true', 'false']))\n"]; args - (['true', 'false'],), kwargs - {}, result - false
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Boolean(kotlin-builtin)],), kwargs - {}, result - Boolean(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_bool_constant at 0x7ffafdfcdab0>],), kwargs - {}, result - <function gen_bool_constant at 0x7ffafdfcdab0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:45:gen_bool_constant; method - ['    """\n', "    return ast.BooleanConstant(utils.randomUtil.choice(['true', 'false']))\n"]; args - (['true', 'false'],), kwargs - {}, result - false
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1316:gen_conditional; method - ['                                        include_self=True, concrete_only=True)\n', '            true_type = ut.randomUtil.choice(subtypes)\n']; args - ([Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>)],), kwargs - {}, result - Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1317:gen_conditional; method - ['            true_type = ut.randomUtil.choice(subtypes)\n', '            false_type = ut.randomUtil.choice(subtypes)\n']; args - ([Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>)],), kwargs - {}, result - Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1318:gen_conditional; method - ['            false_type = ut.randomUtil.choice(subtypes)\n', '            tmp_t = ut.randomUtil.choice(subtypes)\n']; args - ([Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>)],), kwargs - {}, result - Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde20040>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde200d0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde20160>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde35bd0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36560>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde379a0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde20160>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde375b0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde375b0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Martens],), kwargs - {}, result - class Martens : Maligned(_B_) {
  entryway: Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))
  fun only(cancer: Boolean(kotlin-builtin),procurer: Float(kotlin-builtin),morally: Char(kotlin-builtin)): Byte(kotlin-builtin) =
  {
  var kyushu: Byte(kotlin-builtin) = 30
  kyushu
}
  fun addicting(): Int(kotlin-builtin) =
  {
  val repeaters: Int(kotlin-builtin) = -71
  repeaters
}
  fun stickups(agism: String(kotlin-builtin)): Any(kotlin-builtin) =
  {
  val bigwigs: Float(kotlin-builtin) = 90.149
  fun sedna(novellas: Function2<Boolean(kotlin-builtin), Long(kotlin-builtin), String(kotlin-builtin)> = lambda (shortstop: Boolean(kotlin-builtin),shuffled: Long(kotlin-builtin)): String(kotlin-builtin) =
  {
  val unstudied: String(kotlin-builtin) = "restroom"
  unstudied
}): Unit(kotlin-builtin) =
  {
  var martial: Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>) = new Ashamedly(-99.863)
  var tarawa: Int(kotlin-builtin) = -55
  preparing = tarawa
  martial
}
  val priciest: Function2<Boolean(kotlin-builtin), Long(kotlin-builtin), String(kotlin-builtin)> = lambda (emits: Boolean(kotlin-builtin),looked: Long(kotlin-builtin)): String(kotlin-builtin) =
  {
  var westwards: String(kotlin-builtin) = "gauges"
  westwards
}
  sedna()
  bigwigs
} }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde20430>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde20430>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde363b0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde372e0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36f80>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffb00c409d0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffb00c427a0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffb00c6d090>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffb00c6d090>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Martens],), kwargs - {}, result - class Martens : Maligned(_B_) {
  entryway: Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))
  fun only(cancer: Boolean(kotlin-builtin),procurer: Float(kotlin-builtin),morally: Char(kotlin-builtin)): Byte(kotlin-builtin) =
  {
  var kyushu: Byte(kotlin-builtin) = 30
  kyushu
}
  fun addicting(): Int(kotlin-builtin) =
  {
  val repeaters: Int(kotlin-builtin) = -71
  repeaters
}
  fun stickups(agism: String(kotlin-builtin)): Any(kotlin-builtin) =
  {
  val bigwigs: Float(kotlin-builtin) = 90.149
  fun sedna(novellas: Function2<Boolean(kotlin-builtin), Long(kotlin-builtin), String(kotlin-builtin)> = lambda (shortstop: Boolean(kotlin-builtin),shuffled: Long(kotlin-builtin)): String(kotlin-builtin) =
  {
  val unstudied: String(kotlin-builtin) = "restroom"
  unstudied
}): Unit(kotlin-builtin) =
  {
  var martial: Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>) = new Ashamedly(-99.863)
  var tarawa: Int(kotlin-builtin) = -55
  preparing = tarawa
  martial
}
  val priciest: Function2<Boolean(kotlin-builtin), Long(kotlin-builtin), String(kotlin-builtin)> = lambda (emits: Boolean(kotlin-builtin),looked: Long(kotlin-builtin)): String(kotlin-builtin) =
  {
  var westwards: String(kotlin-builtin) = "gauges"
  westwards
}
  sedna()
  bigwigs
} }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37880>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde375b0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37880>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - classic
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:160:generate_loop_expr; method - ['        iterable_types = self._get_iterable_types()\n', '        random_type_to_iterate = ut.randomUtil.choice(iterable_types)\n']; args - ([Int(kotlin-builtin), Long(kotlin-builtin), Short(kotlin-builtin), Char(kotlin-builtin), Byte(kotlin-builtin)],), kwargs - {}, result - Long(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2097:select_type; method - ['                               exclude_function_types=exclude_function_types)\n', '        stype = ut.randomUtil.choice(types)\n']; args - ([Peeved<J <: Char, L <: J>  , Shiva<R <: Long>  <: Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>, Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Astounded<N, Z <: Any, R <: Function0<N>>  <: Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Herd<L <: Ashamedly, C>  <: Astounded<L <: Ashamedly, Any(kotlin-builtin), Function0<L <: Ashamedly>>, Placard<J <: Toilets, P <: Kilowatt, S <: Char>  <: Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Long(kotlin-builtin)>, Maligned<R, O <: R>  <: Herd<Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Any(kotlin-builtin)>, Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Creak<Q <: Function2<Patrician, Toilets, Martens>, E>  <: Maligned<Char(kotlin-builtin), Char(kotlin-builtin)>, Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin), Array<out T>  <: Any(kotlin-builtin), Unit(kotlin-builtin), Function0<R>  <: Any(kotlin-builtin), Function1<A1, R>  <: Any(kotlin-builtin), Function2<A1, A2, R>  <: Any(kotlin-builtin), Function3<A1, A2, A3, R>  <: Any(kotlin-builtin)],), kwargs - {}, result - Function2<A1, A2, R>  <: Any(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Byte(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Number(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:648:_compute_type_variable_assignments; method - ['                    a_types = types\n', '        c = utils.randomUtil.choice(a_types)\n']; args - ([Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Defectors <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>), Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>), Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>)), Patrician <: (Kilowatt <: (Peeved<Char(kotlin-builtin), Char(kotlin-builtin)>)), Martens <: (Maligned<Byte(kotlin-builtin), Byte(kotlin-builtin)>), Any(kotlin-builtin), Number(kotlin-builtin), Int(kotlin-builtin), Byte(kotlin-builtin), Short(kotlin-builtin), Long(kotlin-builtin), Float(kotlin-builtin), Double(kotlin-builtin), Double(kotlin-builtin), Int(kotlin-builtin), Boolean(kotlin-builtin), Char(kotlin-builtin), String(kotlin-builtin)],), kwargs - {}, result - Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:495:_get_type_arg_variance; method - ['        variances = [tp.Invariant] + contravariance\n', '    return utils.randomUtil.choice(variances)\n']; args - ([<src.ir.types.Variance object at 0x7ffaffe3a8f0>],), kwargs - {}, result - 0
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36b90>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36680>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35c60>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffb00c427a0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffb00c409d0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffb00c6d090>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35c60>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Byte(kotlin-builtin)],), kwargs - {}, result - Byte(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Number(kotlin-builtin)],), kwargs - {}, result - Number(kotlin-builtin)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/ir/type_utils.py:212:_construct_related_types; method - ['            t_args = [t for t in t_args if not t.is_primitive()]\n', '            t_arg = utils.randomUtil.choice(t_args)\n']; args - ([Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))],), kwargs - {}, result - Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Function2<Byte(kotlin-builtin), Number(kotlin-builtin), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))>],), kwargs - {}, result - Function2<Byte(kotlin-builtin), Number(kotlin-builtin), Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35cf0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35cf0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1855:_gen_func_ref_lambda; method - ['        # We are unable to produce function references in super calls.\n', '        if ut.randomUtil.bool(cfg.prob.func_ref) and not self._in_super_call:\n']; args - (0.5,), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - bestrid
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - divulges
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))],), kwargs - {}, result - Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37880>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde363b0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde379a0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde35bd0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde375b0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36560>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde379a0>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))],), kwargs - {}, result - Toilets <: (Enclave <: (Astounded<Float(kotlin-builtin), Float(kotlin-builtin), Function0<Float(kotlin-builtin)>>))
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35870>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35870>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - veblen
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde36950>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36a70>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36a70>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1005:gen_assignment; method - ['                                                     only_leaves, subtype))\n', '        receiver, variable = ut.randomUtil.choice(variables)\n']; args - ([(None, preparing), (None, routed), (None, deodorant), (None, lamas), (None, excised), (classic, entryway)],), kwargs - {}, result - (None, deodorant)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde36560>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37010>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde370a0>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde35870>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde37be0>, <function gen_bool_constant at 0x7ffafdfcdab0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde363b0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35bd0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde375b0>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde37be0>],), kwargs - {}, result - <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde35870>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1548:gen_func_call; method - ['        """\n', '        if ut.randomUtil.bool(cfg.prob.func_ref_call):\n']; args - (1.0,), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1589:_gen_func_call; method - ['\n', '        rand_func = ut.randomUtil.choice(funcs)\n']; args - ([AttrReceiverInfo(receiver_expr=None, receiver_inst={}, attr_decl=dolmens, attr_inst={})],), kwargs - {}, result - AttrReceiverInfo(receiver_expr=None, receiver_inst={}, attr_decl=dolmens, attr_inst={})
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:2359:_gen_side_effects; method - ['        exprs = []\n', '        for _ in range(ut.randomUtil.integer(0, cfg.limits.fn.max_side_effects)):\n']; args - (0, 1), kwargs - {}, result - 1
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde376d0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37370>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37370>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1005:gen_assignment; method - ['                                                     only_leaves, subtype))\n', '        receiver, variable = ut.randomUtil.choice(variables)\n']; args - ([(None, preparing), (None, routed), (None, deodorant), (None, lamas), (None, excised), (classic, entryway)],), kwargs - {}, result - (None, excised)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde372e0>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37250>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35a20>, <function Generator.get_generators.<locals>.gen_fun_call at 0x7ffafde37400>, <function Generator.get_generators.<locals>.gen_variable at 0x7ffafde36d40>, <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde37910>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35a20>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:937:generate_expr; method - ['                subtype and expr_type != self.bt_factory.get_void_type()\n', '                and ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:944:generate_expr; method - ['            old_type = expr_type\n', '            expr_type = ut.randomUtil.choice(subtypes)\n']; args - ([Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)],), kwargs - {}, result - Ashamedly <: (Astounded<Number(kotlin-builtin), Short(kotlin-builtin), Function0<Number(kotlin-builtin)>>)
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35870>],), kwargs - {}, result - <function Generator.get_generators.<locals>.<lambda> at 0x7ffafde35870>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:1840:_get_subclass; method - ['        # it may happens due to ParameterizedType with TypeParameters as targs\n', '        return ut.randomUtil.choice(\n']; args - ([Ashamedly],), kwargs - {}, result - class Ashamedly : Astounded {
  colonial: Double(kotlin-builtin)
  fun stickups(agism: String(kotlin-builtin)): Any(kotlin-builtin) =
  -77
  fun addicting(): Int(kotlin-builtin) =
  {
  val roumania: Int(kotlin-builtin) = -79
  roumania
}
  fun only(cancer: Boolean(kotlin-builtin),procurer: Float(kotlin-builtin),morally: Char(kotlin-builtin)): Byte(kotlin-builtin) =
  {
  var borrowers: Byte(kotlin-builtin) = 84
  borrowers
} }
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:949:generate_expr; method - ['                                         exclude_var, sam_coercion=sam_coercion)\n', '        expr = ut.randomUtil.choice(generators)(expr_type)\n']; args - ([<function gen_real_constant at 0x7ffafdfcda20>],), kwargs - {}, result - <function gen_real_constant at 0x7ffafdfcda20>
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:35:gen_real_constant; method - ['    """\n', '    prefix = str(utils.randomUtil.integer(0, 100))\n']; args - (0, 100), kwargs - {}, result - 45
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:36:gen_real_constant; method - ['    prefix = str(utils.randomUtil.integer(0, 100))\n', '    suffix = str(utils.randomUtil.integer(0, 1000))\n']; args - (0, 1000), kwargs - {}, result - 306
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:37:gen_real_constant; method - ['    suffix = str(utils.randomUtil.integer(0, 1000))\n', "    sign = utils.randomUtil.choice(['', '-'])\n"]; args - (['', '-'],), kwargs - {}, result -
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:956:generate_expr; method - ['                self._vars_in_context[self.namespace] < cfg.limits.max_var_decls and\n', '                ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:184:generate_loop_expr; method - ['        else:\n', '            if ut.randomUtil.bool(0.43):\n']; args - (0.43,), kwargs - {}, result - False
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (0, 100), kwargs - {}, result - 52
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:884:gen_variable_decl; method - ['        self.depth = initial_depth\n', '        is_final = ut.randomUtil.bool()\n']; args - (), kwargs - {}, result - True
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/utils.py:113:gen_identifier; method - ['    """\n', '    word = ut.randomUtil.word()\n']; args - (), kwargs - {}, result - bobsleds
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:194:generate_loop_expr; method - ['                                          gens.gen_integer_constant(\n', '                                              left_bound=ut.randomUtil.integer(int(i.expr.literal), 100)),\n']; args - (52, 100), kwargs - {}, result - 89
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generators.py:27:gen_integer_constant; method - ['    """\n', '    return ast.IntegerConstant(utils.randomUtil.integer(left_bound, right_bound), expr_type)\n']; args - (89, 100), kwargs - {}, result - 98
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:195:generate_loop_expr; method - ['                                              left_bound=ut.randomUtil.integer(int(i.expr.literal), 100)),\n', '                                          ut.randomUtil.choice(\n']; args - ([<src.ir.ast.Operator object at 0x7ffafde7f3d0>, <src.ir.ast.Operator object at 0x7ffafde7f430>, <src.ir.ast.Operator object at 0x7ffafde7f490>, <src.ir.ast.Operator object at 0x7ffafde7f4f0>],), kwargs - {}, result - >
caller - /home/vitekkor/PycharmProjects/hephaestus/src/generators/generator.py:199:generate_loop_expr; method - ['                body.body.append(increment)\n', '                if ut.randomUtil.bool(0.43):\n']; args - (0.43,), kwargs - {}, result - False

Total faults: 0

Process finished with exit code 0
